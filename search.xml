<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>web 发展史及现状</title>
      <link href="/2022/09/01/ji-zhu-chen-dian/qian-duan-fa-zhan-shi/web-fa-zhan-shi-ji-xian-zhuang/"/>
      <url>/2022/09/01/ji-zhu-chen-dian/qian-duan-fa-zhan-shi/web-fa-zhan-shi-ji-xian-zhuang/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>web 的发展目前可分为三个阶段：web 1.0 → web 2.0 → web 3.0，技术的变迁经过了漫长的积累和迭代的过程。就我自身而言，90 后，没有经历过 web 1.0 时代，即使身处 web 2.0 百家争鸣、百花齐放的时代，但由于各种原因，也没有较为深刻的认知。现在身处 web 3.0 时代，是时候回顾一下 web 的发展史以及发展现状了。本文回顾了 web 的前两个时代，并对 web 3.0 的发展现状进行梳理，以供参考。</p></blockquote><p>本文从宏观（总体描述）和微观（技术架构）两个维度对 web 的发展进行回顾与总结。准备好了吗，发车了🚘</p><hr><h2 id="宏观-应用场景"><a href="#宏观-应用场景" class="headerlink" title="宏观-应用场景"></a>宏观-应用场景</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/bfdfce7fa7ce17a8059beccdb6cfd12b.png" alt="三个 Web 时代的架构[4]"></p><h3 id="Web-1-0-时代"><a href="#Web-1-0-时代" class="headerlink" title="Web 1.0 时代"></a>Web 1.0 时代</h3><div class="admonition info"><p class="admonition-title">Info</p><p>1991 年 ~ 2004 年</p></div><p>Web 1.0 时代是万维网（www）发展的第一阶段 [1-2]（1989 年，英国科学家蒂姆·伯纳斯-李于1989 年发明了万维网。1990 年他在瑞士 CERN 的工作期间编写了第一个网页浏览器。网页浏览器于1991 年 1 月向其他研究机构发行，并于同年 8 月向公众开放），表现为“内容提供者”，即创建一个静态网站，该网站向用户提供可供检索和浏览的静态内容。Web 1.0 本质上是一个内容分发网络（CDN），网站上的内容对用户来说是只读的，主要是公司向个体提供服务。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d794fc5937821a8ced13fe26d7769386.png" alt="Web 1.0 时代的搜狐门户网站[4]"></p><hr><h3 id="Web-2-0-时代"><a href="#Web-2-0-时代" class="headerlink" title="Web 2.0 时代"></a>Web 2.0 时代</h3><div class="admonition info"><p class="admonition-title">Info</p><p>2004 开始</p></div><p>Web 2.0 首次出现在达西·迪努奇（Darcy DiNucci ）在 1999 年发表的文章《Fragmented Future》中，于 2004 年末在 O’Reilly Media Web 2.0 会议上由提姆·奥莱理（Tim O’Reilly）和戴尔·多尔蒂（Dale Dougherty）正式推广 [3]。Web 2.0 又名参与式社交网络，顾名思义，Web 2.0 时代的网站是可交互的了，用户可以对网站执行写操作，表现为在论坛、贴吧中用户可以发帖、评论等。用户可以参与到网站内容的贡献中，并享受网站提供的部分利益分成，如短视频、B站创作等。在 Web 2.0 上时代，虽然用户可以自主创建互联网中的内容，但流量入口与利益分配等却被各个互联网巨头公司把控，且隐私与安全问题难以保障 [4]。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8c39bd17d36f48500f34c781dea69bce.png" alt="Web 2.0 时代涌现的知名企业[4]"></p><hr><h3 id="Web-3-0-时代"><a href="#Web-3-0-时代" class="headerlink" title="Web 3.0 时代"></a>Web 3.0 时代</h3><div class="admonition info"><p class="admonition-title">Info</p><p>2014 ~ 至今</p></div><p>对于我们普通大众来说，Web 2.0 时代的互联网是我们熟知并且每天都在使用的，作为<del>用户</del>韭菜的我们似乎已经习惯了被<del>企业家</del>大资本们安排。在 Web 2.0 时代，我们在网上发言，购买虚拟的产品，这些数据都在服务提供者的数据库中。你的数据，他们想删就删，如果不小心被黑客入侵造成用户数据泄露，你也只能自认倒霉。很大程度上，由我们个人产生的数据并不由我们自己支配，严格意义上说你买的那些虚拟的产品并不属于你，它只是一份存在服务器上数据库中的数据，你不能直接拿到它，只有间接的使用权。要解决以上问题，我们普通的用户是无能为力了，可能也没几个人去想这些问题。但是国外是一个“自由的国度”，私人财产神圣不容侵犯，你不能侵犯我的个人隐私。记忆中，16 年左右国内外陆陆续续出现了许多侵犯个人隐私的新闻，到今天，2022 年，互联网上的个人隐私算是已经深入人心了。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9d4f694d947c555f02c0d1e2171777c4.png" alt="Web 1.0，Web 2.0 和 Web 3.0 架构的区别[4]"></p><p>为了解决上述问题，外国人开始发力了。与区块链有关的 Web3 概念由以太坊联合创始人 Gavin Wood 于 2014 年提出，并于 2021 年受到加密货币爱好者、大型科技公司和创业投资公司的关注 [5]。Web 3.0 在 Web 1.0 和 Web 2.0 的基础上，以区块链的去中心化思想为基础构建数字化生态。到那时，用户将真正拥有自己的数字资产，无需依赖于某一家公司，而是依赖确定的软件代码逻辑来严格执行协议 [4]。未来的互联网可能是这样的：</p><ul><li>区块链让数据成为资产；</li><li>智能合约打造可编程的智能经济体系；</li><li>人工智能构建全球智慧大脑并创造“数字人”；</li><li>物联网让物理世界的现实物体向数字空间广泛映射；</li><li>AR 实现了数字世界与物理世界的叠加；</li><li>5G 网络、云计算、边缘计算将构建更加宏伟的数字新空间；</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/ac055c2babc2d376f3de3b8afe2f7db0.png" alt="Web 3.0 时代出现的一些公司 [4]"></p><p>作为对下一代互联网的设计和设想，Web 3.0 将会是一个更加开放，公平和安全的网络。用户将成为互联网真正的创作者与构建者，用户所创造的数据信息与数据资产都将归自身所有，每一个参与到 Web 3.0 的个体都将享受到属于他们的红利 [4]。</p><hr><h2 id="微观-建站技术"><a href="#微观-建站技术" class="headerlink" title="微观-建站技术"></a>微观-建站技术</h2><h3 id="Web-1-0"><a href="#Web-1-0" class="headerlink" title="Web 1.0"></a>Web 1.0</h3><p>1991 年 至 2004 年，互联网处于起步阶段，彼时可称为“洪荒时代”，一切由后端包办。具有代表性的技术有：</p><ol><li>CGI（Common Gateway Interface，1993）：本质是一个接口协议，定义了一系列与 HTTP 协议相关的环境变量，只要使用编程语言（Perl 为主，还有 C/C++ 等）按照这一接口规范编写程序就可以处理网络请求，返回响应。请求的 HTML 文件在后端生成 [12-13]。</li><li>PHP（Personal Home Page，1993）。PHP能将动态的内容嵌入到HTML中，提升了编写页面的效率与可读性，其性能也比一般的CGI高。PHP的界定符、循环语句等的发明，深刻影响了后来的ASP、JSP，乃致后来的JavaScript前端模板引擎 [6]。</li><li>1994 年 10 月，W3C 小组成立，其宗旨是通过促进通用协议的发展并确保其通用性，以激发 web 世界的全部潜能 [7]。1995 年，JavaScript 诞生（传闻，网景工程师布兰登·艾克（Brendan Eich）只花了10天时间设计出 JavaScript 语言）</li><li>1994~2005 年发生了著名的“浏览器战争”，催生了一些新技术，如 JScript、IE7.js、IE8.js 等。</li><li>1999 年，微软的 IE5 发布，第一次引入新功能：允许 JavaScript 脚本向服务器发起HTTP请求 [8]。</li></ol><hr><h3 id="Web-2-0"><a href="#Web-2-0" class="headerlink" title="Web 2.0"></a>Web 2.0</h3><p>2004 年 至 2014 年，10 年时间，web 前端的技术发生了翻天覆地的变化。期间的技术演进如下：</p><p>​        2004 年 - 2005 年，Google 的两个 Web 产品 Gmail 和 Google Map 大量使用了 Ajax 技术。2005 年 2 月，杰西·詹姆士·贾瑞特（Jesse James Garrett）发表了一篇名为《Ajax：一种Web应用程序开发的新方法》的文章后，Ajax 被挖掘出，大家开始重视起这技术的应用。Ajax 在当时来说是一项革命性的技术，对后来的 Web 开发产生了深远的影响。</p><p>​        2006年，jQuery 发布。当时前端界首要面对的是浏览器兼容性问题，jQuery 在处理 DOM 兼容上真是知微见著, 发掘出大量的 DOM/BOM 兼容方案（例如 Dean Edwrad 的 addEvent()， IE 的 px 转换方案，domReady的 doScroll 方案，globalEval 的兼容方案等）。jQuery 也打破了前端开发者的编程思维，之前是按照后端的开发思路来的：做一个业务就先封装一个类，有了这个类后，再想办法传入一个 DOM，然后再通过类方法操作 DOM。而 jQuery 是 DOM 为中心，开发者可以选一个或多个 DOM，变成 jQuery 对象，然后进行链式操作。其次，开发者们已开始注重前后端分离，并要求不能污染 Object 原型对象，不能污染 window 全局变量。这样，jQuery 只占用两个全局变量。再次，jQuery 非常轻量级，采用 Dean Edwards 编写的 Packer 压缩后， 大小不到 30KB。并且里面实现得非常精妙，以令人瞠目的手段解决各种兼容痼疾。</p><p>​        jQuery 出现之后，出现了大量 jQuery 插件与 UI 库。为后 jQuery时代，人们研发<strong>前端模块加载</strong>、<strong>统一异步机制</strong>、 <strong>打造大型 MVC 框架</strong>， 甚至伸向<strong>后端</strong>，接管打包脚本而发明 Node.js，来腾出大量时间。这个时期涌现了大量 jQuery-like的库，其中最著名的是 <a href="https://www.zeptojs.com.cn/">Zepto.js</a>（2016 年）。Zepto 的出现也标志着我们进入移动互联网时代。</p><p>jQuery 存在的问题：</p><ol><li>页面第三方库混乱，难以管理和维护。前端工程师通常编写一个页面，会引入十多个乃至几十个 jQuery 插件，页面上塞满了 Script 标签。众所周知，浏览器是单线程，Script 的加载，会影响到页面的解析与呈现，导致著名的白屏问题（当时前端用力过猛，body 中的所有东西都是动态生成的）。</li><li>忽视底层实现，只关注上层应用。jQuery 的出现让前端工程师开发更加轻松，假如工程师想实现一个功能，现搜索出一个 jQuery 插件来实现。</li><li>全局污染。由于插件的质量问题，或者开发的素质问题，这已经是 IIEF 模块或命名空间等传统手段无法解决了。</li><li>jQuery 开发者需要解决大段 HTML 的生成问题，之前 jQuery 有$.html, $.append, $before等方法，可以将一大段符合 HTML 结构的字符串转换成 DOM 再插入到页面上。但现在我们想分离出来，让 HTML 独立到不同的文件中，然后插数据，这就是之后出现的前端模板。</li></ol><p><strong>破局：</strong></p><p>​        一些优秀的前端工程师们决定向后端取经，引入模块机制。早期，这种模块机制在 Dojo、EXT 这些框架中都是内置的，但是显然说服不了另一个框架的用户用对方的模块机制，于是有人立志要统一这种模块定义方式，成立了 CommonJS。但不料，CommonJS 内部也有派系，谁也说不服对方。终于有一个人忍不住自己独立开发出RequireJS，其模块规范即为 AMD。AMD 最大的优势是它支持各种插件，且简单明了，并且提供 shim 机制加载以非 AMD 规范编写的 JavaScript 代码。</p><ol><li>CommonJS 规范：由 Mozilla 的工程师 Kevin Dangoor 在 2009 年 1 月创建的，当时的名字是 ServerJS。2009 年 8 月，这个项目改名为 CommonJS，以显示其 API 的更广泛实用性 [9]。</li><li>AMD（Asynchronous Module Definition）规范：为浏览器环境设计的，因为 CommonJS 模块系统是同步加载的，当前浏览器环境还没有准备好同步加载模块的条件。AMD 定义了一套 JavaScript 模块依赖异步加载标准，来解决同步加载的问题。</li><li>CMD 规范：SeaJS 是一个适用于 Web 浏览器端的模块加载器（阿里出品）。在 SeaJS 的世界里，一个文件就是一个模块。所有模块都遵循 <a href="https://github.com/seajs/seajs/issues/242">CMD</a> 规范 [10]。</li></ol><p>​        当出现前后端分离的需求后，前端模板技术出现了，接着又诞生了前端路由。基于这两者，又出现了一个新的技术词汇 SPA（Single Page Application）。</p><p>​        2009 年 5 月，来自Ruby界的高手Ryan Dahl发明了 Node.js。它是一个基于 Chrome V8 引擎的 JavaScript 运行环境，使用了一个事件驱动、非阻塞式 I/O 模型，让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与 PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言 [11]。有了 Node.js 之后，海量模块、路由、状态管理、数据库、MVC 框架都有了。这时，前端就缺自己的 MVVM 框架了。接着出现的前端框架有：</p><ol><li><a href="https://www.backbonejs.com.cn/">Backbone.js</a>：纯正的MVC模型，强依赖于jQuery。Backbone.js 的作者还搞了另一套编译语言 CoffeeScript, 里面的箭头函数、类机制、 解构赋值等语法糖都深深影响了后来的 ES6。</li><li><a href="https://v6.angular.cn/features">Angular</a>：背靠谷歌，MVVM 框架，用于移动端原生开发的 <a href="https://ionicframework.com/docs">ionic</a>；</li><li><a href="https://knockoutjs.com/documentation/introduction.html">Knockout.js</a>：微软出品的 MVVM 框架；</li><li><a href="https://emberjs.com/">Ember.js</a>：苹果出品的 MVVM框架；</li><li><a href="https://react.docschina.org/">React</a>：FaceBook 出品，技术生态包括状态管理器、CSS-in-JS、Flow 静态类型检查、devTool、Fetch、前后端同构、Fiber、suspend、并发渲染、<a href="https://reactnative.dev/">React Native</a>等。</li><li><a href="https://cn.vuejs.org/">Vue</a>：国人独立开源开发者尤雨溪打造，生态链包括 Vuex、Vue-Router、Vite、用于移动端原生开发的 <a href="https://doc.weex.io/zh/guide/introduction.html">Weex</a> （阿里出品）等。</li></ol><hr><p>​        2013 年，百度基于 H5 技术推出了轻应用。2015年，360 和 DCloud 合作在 360 手机助手内嵌了客户端引擎实现了名为 360 微应用的流式应用，做到了应用的秒开。2016 年 9 月 21 日，微信宣布更名应用号为小程序。接着又有了支付宝小程序、QQ 小程序等等。小程序的技能树由中国国内的开发者创建，并不断地在演进。关于这部分，后续再详细回顾。</p><hr><h3 id="Web-3-0"><a href="#Web-3-0" class="headerlink" title="Web 3.0"></a>Web 3.0</h3><p>还没写完，没想到写下来工作量还挺大。持续更新（有时间再更）。</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[^1]: <a href="https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91">万维网 - 维基百科，自由的百科全书 (wikipedia.org)</a><br>[^2]: <a href="https://www.geeksforgeeks.org/web-1-0-web-2-0-and-web-3-0-with-their-difference/">Web 1.0、Web 2.0 和 Web 3.0 之间的比较 - GeeksforGeeks</a><br>[^3]: <a href="https://zh.m.wikipedia.org/zh-hans/Web_2.0">Web 2.0 - 维基百科，自由的百科全书 (wikipedia.org)</a><br>[^4]: <a href="https://www.cnblogs.com/JasonCeng/p/15861645.html">互联网的前世今生：Web 1.0、2.0、3.0 - JasonCeng - 博客园 (cnblogs.com)</a><br>[^5]: <a href="https://zh.m.wikipedia.org/zh/Web3">Web3 - 维基百科，自由的百科全书 (wikipedia.org)</a><br>[^6]: <a href="https://cloud.tencent.com/developer/article/1492656">一文读懂前端技术演进：盘点Web前端20年的技术变迁史 - 腾讯云开发者社区-腾讯云 (tencent.com)</a><br>[^7]: <a href="https://www.w3school.com.cn/w3c/w3c_intro.asp">W3C 简介 (w3school.com.cn)</a><br>[^8]: <a href="https://juejin.cn/post/7023180088698994724#heading-4">前端分享: 前端技术发展演进之路(上) - 掘金 (juejin.cn)</a><br>[^9]: <a href="https://zhaoda.net/webpack-handbook/commonjs.html">CommonJS 规范 | Webpack 中文指南 (zhaoda.net)</a><br>[^10]: <a href="https://www.zhangxinxu.com/sp/seajs/">SeaJS - A Module Loader for the Web (zhangxinxu.com)</a><br>[^11]: <a href="https://baike.baidu.com/item/Node.js/7567977">node.js_百度百科 (baidu.com)</a><br>[^12]: <a href="https://zhuanlan.zhihu.com/p/25013398">万法归宗——CGI - 知乎 (zhihu.com)</a><br>[^13]: <a href="https://blog.csdn.net/guodongxiaren/article/details/50569675">C++后台实践：古老的CGI与Web开发_果冻虾仁的博客-CSDN博客_c++ cgi</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端发展史 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web 发展史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 基础</title>
      <link href="/2022/08/15/ji-zhu-chen-dian/qian-duan-ji-chu/vue/"/>
      <url>/2022/08/15/ji-zhu-chen-dian/qian-duan-ji-chu/vue/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><blockquote><ol><li>指令与属性</li><li>组件</li><li>生命周期</li><li>响应式原理</li><li>diff算法</li><li>vue-router</li><li>Vuex</li><li>其他</li></ol></blockquote><h2 id="指令与属性"><a href="#指令与属性" class="headerlink" title="指令与属性"></a>指令与属性</h2><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><ul><li>声明式操作视图，将data中属性的值设置到绑定v-text指令的标签上</li><li>原理：当改变data中某个属性的值时，获取绑定v-text指令的节点的所有属性，将该节点的文本设置为v-text绑定的data中的值。<ul><li>发布订阅模式的本质是解决一对多的问题，在vue中实现数据变化之后的精准更新（依赖data中某个属性的节点才更新）。</li></ul></li></ul><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><ul><li>视图变化反应到数据<ul><li>事件监听反向修改（有缺陷，不能精确更新）</li></ul></li><li>双向绑定原理<ul><li>vue.js是采用==数据劫持+发布者-订阅者模式==的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调来渲染视图。</li><li><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220406202620.png" alt="在这里插入图片描述"><ul><li><code>observe</code>对象指的是把数据处理成响应式的对象；</li><li><code>watcher</code>指的其实就是数据变化之后的更新函数 (vue中的watcher有两种，一种是用来更新视图的watcher，一种是通过watch配置项声明的watcher)；</li><li><code>dep</code>指的就是使用发布订阅实现的收集更新函数和触发更新函数的对象；</li><li>发布订阅模式的本质是解决一对多的问题，在vue中实现数据变化之后的精准更新（依赖data中某个属性的节点才更新）。</li></ul></li><li>过程：<ol><li> 定义一个Vue实例后，先递归将data对象中所有的属性通过Object.defineProperty()设置访问器属性getter和setter；</li><li> compile解析模板指令：将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变化，通知watcher，然后更新视图；</li><li> Watcher订阅者是Observer和Compile之间通信的桥梁；</li><li> 数据模型变化反映到视图上：当data中的数据发生变化时，触发setter，setter通知dep对象，dep对象通知watcher，watcher将更新后的数据更新到视图上；</li><li> 视图数据更新反映到数据模型上：</li></ol></li></ul></li></ul><h4 id="👉References"><a href="#👉References" class="headerlink" title="👉References"></a>👉References</h4><ul><li><a href="https://www.cnblogs.com/webcabana/p/11077628.html">Vue数据双向绑定(面试必备) 极简版 - 前端婴幼儿 - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/houguangzhao/article/details/112358923">Vue双向数据绑定原理(面试必问)_侯先生的博客的博客-CSDN博客_vue双向绑定原理 面试</a></li></ul><h4 id="v-show-v-if的区别"><a href="#v-show-v-if的区别" class="headerlink" title="v-show v-if的区别"></a>v-show v-if的区别</h4><ol><li>控制手段不同：v-show控制元素的display属性来实现隐藏与显示。v-if通过添加或删除dom元素来实现。</li><li>不管显示与否，v-show都会渲染。而只有满足条件的时候，v-if才会渲染。、v-show由false变为true时不会触发组件的生命周期。v-if由false变为true时会触发组件的beforeCreated、created、beforeMounted、mounted钩子，由true变为false时会触发组件的beforeDestroy、destroy钩子。</li><li>v-show有更高的渲染消耗，v-if有更高的切换消耗。</li></ol><p>使用场景：</p><ol><li>需要频繁切换使用v-show；</li><li>在运行时条件很少改变，使用v-if较好。</li></ol><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="computed和watch区别（重点）"><a href="#computed和watch区别（重点）" class="headerlink" title="computed和watch区别（重点）"></a>computed和watch区别（重点）</h4><h5 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h5><p>computed 是一个计算属性，类似于 filter，对 data 中的属性进行处理，通过已有属性得出 data 中不存在的属性</p><p>computed 具有缓存性，computed 的值在 getter 执行后是会缓存的，只有在它依赖的属性值改变之后，下一次获取 computed 的值时重新调用对应的 getter 来计算，底层借助了 Object.defineProperty 的 getter 和 setter。</p><p>get 的作用：有人初次读取计算属性或依赖的属性发生变化时，get 会被自动调用，返回计算出的属性值。多次调用时，会读取缓存，只调用一次 get</p><p>set 的作用：当修改计算属性时，会调用 set</p><blockquote><p>如果确定只会读取计算属性的值，不会修改时，可以简写，不写 get 和 set，直接在计算属性对象中返回计算方法。</p><p>computed 中的函数必须用 return 返回最终的结果</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token comment">// 因为计算的过程可能会很复杂，所以vue要求计算属性写为对象的形式</span>    <span class="token literal-property property">fullName</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment">// get的作用：当有人调取fullName时，get就会被调用，返回值作为fullName的值，多次调用fullName时，会读取缓存，只调用一次get，</span>        <span class="token comment">// 但所依赖的值发生变化时，会重新调用get()，都是自动调用的</span>        <span class="token comment">// get什么时候调用？1、初次读取fullName时，2、所依赖的数据发生变化时</span>        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName   <span class="token comment">//this指向vm</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">// set什么时候调用？当fullName值被修改时</span>            <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">const</span> arr <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输入'李-四'，通过-分开，第一个值是姓，第二个值是名</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h5><ol><li><p>属性监听，监听属性的变化，监听 props，$emit 或本组件的值，当数据变化时来执行回调进行后续操作；</p></li><li><p>watch 中的函数是不需要调用的；</p></li><li><p>没有缓存性，页面渲染时值没有变化也会重新执行；</p></li><li><p>监视还包括深度监视，此时必须使用完整形式；</p></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">isHot</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token comment">// immediate:true,</span>    <span class="token comment">// deep:true,//监测多级结构中所有属性的变化</span>    <span class="token comment">// 当配置项只有handler的时候才可以使用简写形式</span>    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">//监测更改前与更改后的值</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'isHot被修改了!'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><blockquote><p> computed 和 watch 之间的区别：</p><ol><li>当我们要进行数值计算，而且依赖于其他数据，那么把这个数据设计为 computed</li><li>如果你需要在某个数据变化时做一些事情，使用 watch 来观察这个数据变化。</li></ol><p> <strong>使用场景</strong></p><p>  <code>computed</code>：当一个属性受多个属性影响的时候使用，例：购物车商品结算功能</p><p>  <code>watch</code>：当一条数据影响多条数据的时候使用，例：搜索数据</p><p> 两个重要的小原则:</p><p> ​    1.所有被Vue管理的函数,最好写成普通函数,这样,this才指向的是vm或者组件实例对象</p><p> ​    2.所有不被Vue所管理的函数(定时器的回调函数,ajax的回调函数等等),最好写成箭头函数,这样的this指向才是vm或者组件实例对象</p><p> <strong>总结</strong></p><p> 计算属性本质上是 <code>computed watcher</code>，而侦听属性本质上是 <code>user watcher</code>。就应用场景而言，计算属性适合用在模板渲染中，某个值是依赖了其它的响应式对象甚至是计算属性计算而来；而侦听属性适用于观测某个值的变化去完成一段复杂的业务逻辑。</p></blockquote><h4 id="为什么-vue-中的-data-是一个函数？"><a href="#为什么-vue-中的-data-是一个函数？" class="headerlink" title="为什么 vue 中的 data 是一个函数？"></a>为什么 vue 中的 data 是一个函数？</h4><p>组件中的<code>data</code>写成一个函数，数据以函数返回值形式定义，这样每复用一次组件，就会返回一份新的<code>data</code>，类似于给每个组件实例创建一个私有的数据空间，让各个组件实例维护各自的数据。而单纯的写成对象形式，就使得所有组件实例共用了一份<code>data</code>，就会造成一个变了全都会变的结果</p><h4 id="nextTick-的原理是什么？"><a href="#nextTick-的原理是什么？" class="headerlink" title="nextTick 的原理是什么？"></a>nextTick 的原理是什么？</h4><p>将回调推迟到下一个 DOM 更新周期之后执行。在更改了一些数据以等待 DOM 更新后立即使用它。</p><p><strong>原理分析</strong></p><p>由于Vue DOM更新是异步执行的，即修改数据时，视图不会立即更新，而是会监听数据变化，并缓存在同一事件循环中，等同一数据循环中的所有数据变化完成之后，再统一进行视图更新。为了确保得到更新后的DOM，所以设置了 <code>Vue.nextTick()</code>方法。</p><blockquote><p>JS执行是单线程的，它是基于事件循环的。</p><ol><li>所有同步任务都在主线程上执行,形成一个执行栈。</li><li>主线程之外，会存在- -个任务队列，只要异步任务有了结果，就在任务队列<br>中放置一个事件。</li><li>当执行栈中的所有同步任务执行完后，就会读取任务队列。那些对应的异步<br>任务，会结束等待状态，进入执行栈。</li><li>主线程不断重复第三步。</li></ol></blockquote><h3 id="样式穿透"><a href="#样式穿透" class="headerlink" title="样式穿透"></a>样式穿透</h3><p>突破scoped的样式隔离，按需改变组件中引入的第三方组件</p><ol><li>在父组件中使用<code>&gt;&gt;&gt;</code>改变子组件样式（只作用于css）；</li><li>在父组件中使用<code>/deep/</code>改变子组件样式（只作用于less）；</li><li>在父组件中使用<code>::v-deep</code>改变子组件样式（只作用于sass）；</li></ol><hr><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><blockquote><ol><li>组件间通信</li><li>单向数据流</li></ol></blockquote><h3 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h3><p>组件间通信的分类可以分成以下</p><ul><li>父子组件之间的通信</li><li>兄弟组件之间的通信</li><li>祖孙与后代组件之间的通信</li><li>非关系组件间之间的通信</li></ul><p><img src="https://static.vue-js.com/85b92400-3aca-11eb-ab90-d9ae814b240d.png"></p><p>整理<code>vue</code>中8种常规的通信方案：</p><ol><li><strong>通过 props 传递</strong></li><li><strong>通过 $emit 触发自定义事件</strong></li><li><strong>使用 ref</strong></li><li><strong>EventBus（全局事件总线）</strong></li><li>$parent 或$root</li><li>attrs 与 listeners</li><li>provide 与 inject</li><li><strong>Vuex</strong></li></ol><ul><li>父子组件通信<ul><li> <code>props</code> 与 <code>$emit</code></li><li> <code>ref</code></li></ul></li><li>兄弟组件通信<ul><li><code>$bus</code></li><li><code>$parent</code></li></ul></li><li>祖先与后代组件通信<ul><li><code>attrs</code>与<code>listeners</code></li><li><code>provide</code>与 <code>inject</code></li></ul></li><li>复杂关系的组件通信<ul><li><code>vuex</code>存放共享的变量</li></ul></li></ul><h4 id="1-1-props传递数据"><a href="#1-1-props传递数据" class="headerlink" title="1.1 props传递数据"></a>1.1 props传递数据</h4><p><img src="https://static.vue-js.com/8f80a670-3aca-11eb-ab90-d9ae814b240d.png"></p><ul><li>适用场景：父组件传递数据给子组件</li><li>子组件设置<code>props</code>属性，定义接收父组件传递过来的参数</li><li>父组件在使用子组件标签中通过字面量来传递值</li></ul><p><code>Children.vue</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">props:{      // 字符串形式   name:String // 接收的类型参数      // 对象形式      age:{            type:Number, // 接收的类型为数值          defaule:18,  // 默认值为18         require:true // age属性必须传递      }  } <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Father.vue</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;Children name="jack" age=18 /&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-emit触发自定义事件"><a href="#1-2-emit触发自定义事件" class="headerlink" title="1.2 $emit触发自定义事件"></a>1.2 $emit触发自定义事件</h4><ul><li>适用场景：子组件传递数据给父组件</li><li>子组件通过<code>$emit触发</code>自定义事件，<code>$emit</code>第二个参数为传递的数值</li><li>父组件绑定监听器获取到子组件传递过来的参数</li></ul><p><code>Children.vue</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">this.$emit('add', good) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Father.vue</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;Children @add="cartAdd($event)" /&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-3-ref"><a href="#1-3-ref" class="headerlink" title="1.3 ref"></a>1.3 ref</h4><ul><li>父组件在使用子组件的时候设置<code>ref</code></li><li>父组件通过设置子组件<code>ref</code>来获取数据</li></ul><p><code>Father.vue</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;Children ref="foo" /&gt;    this.$refs.foo  // 获取子组件实例，通过子组件实例我们就能拿到对应的数据 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-4-EventBus"><a href="#1-4-EventBus" class="headerlink" title="1.4 EventBus"></a>1.4 EventBus</h4><ul><li>使用场景：兄弟组件传值</li><li>创建一个中央事件总线<code>EventBus</code></li><li>兄弟组件通过<code>$emit</code>触发自定义事件，<code>$emit</code>第二个参数为传递的数值</li><li>另一个兄弟组件通过<code>$on</code>监听自定义事件</li></ul><p><code>main.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">//安装全局事件总线，$bus就是当前应用的vm</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>组件A.vue</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">/* 组件A */methods(){  demo(data){......}}......mounted() { // 绑定自定义事件，留下回调函数      this.$bus.$on('xxxx',this.demo)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>组件B.vue</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">this.$bus.$emit('xxxx',数据)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</p><h4 id="1-5-parent或-root"><a href="#1-5-parent或-root" class="headerlink" title="1.5 $parent或$root"></a>1.5 $parent或$root</h4><ul><li>通过共同祖辈<code>$parent</code>或者<code>$root</code>搭建通信桥连</li></ul><p>兄弟组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">this.$parent.on('add',this.add)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一个兄弟组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">this.$parent.emit('add')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-6-attrs与-listeners"><a href="#1-6-attrs与-listeners" class="headerlink" title="1.6 $attrs与$listeners"></a>1.6 $attrs与$listeners</h4><ul><li>适用场景：祖先传递数据给子孙</li><li>设置批量向下传属性<code>$attrs</code>和 <code>$listeners</code></li><li>包含了父级作用域中不作为 <code>prop</code> 被识别 (且获取) 的特性绑定 ( class 和 style 除外)。</li><li>可以通过 <code>v-bind="$attrs"</code> 传⼊内部组件</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">// child：并未在props中声明foo  &lt;p&gt;{{$attrs.foo}}&lt;/p&gt;    // parent  &lt;HelloWorld foo="foo"/&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">// 给Grandson隔代传值，communication/index.vue  &lt;Child2 msg="lalala" @some-event="onSomeEvent"&gt;&lt;/Child2&gt;    // Child2做展开  &lt;Grandson v-bind="$attrs" v-on="$listeners"&gt;&lt;/Grandson&gt;    // Grandson使⽤  &lt;div @click="$emit('some-event', 'msg from grandson')"&gt;  {{msg}}  &lt;/div&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-7-provide与inject"><a href="#1-7-provide与inject" class="headerlink" title="1.7 provide与inject"></a>1.7 provide与inject</h4><ul><li>在祖先组件定义<code>provide</code>属性，返回传递的值</li><li>在后代组件通过<code>inject</code>接收组件传递过来的值</li></ul><p>祖先组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">provide(){      return {          foo:'foo'      }  } <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后代组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">inject:['foo'] // 获取到祖先组件传递过来的值  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-8-Vuex"><a href="#1-8-Vuex" class="headerlink" title="1.8 Vuex"></a>1.8 Vuex</h4><ul><li>适用场景: 复杂关系的组件数据传递</li><li><code>Vuex</code>作用相当于一个用来存储共享变量的容器</li></ul><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/fa207cd0-3aca-11eb-ab90-d9ae814b240d.png"></p><ul><li><code>state</code>用来存放共享变量的地方</li><li><code>getter</code>，可以增加一个<code>getter</code>派生状态，(相当于<code>store</code>中的计算属性），用来获得共享变量的值</li><li><code>mutations</code>用来存放修改<code>state</code>的方法。</li><li><code>actions</code>也是用来存放修改state的方法，不过<code>action</code>是在<code>mutations</code>的基础上进行。常用来做一些异步操作</li></ul><hr><h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3><p>当父组件给子组件传递数据的时候，子组件只允许对数据进行读取，不允许修改数据，因为当子组件修改了父组件传过来的数据时，其他引用父组件数据的组件也会被修改，从而导致报错，然而也不知道是当前组件报错还是父组件报错还是修改父组件信息的子组件的错误；如果要修改可以通过this.$emit方法派发自定义事件，在父组件中修改；</p><hr><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><blockquote><ol><li>生命周期的节点方法</li><li>讲讲vue的生命周期</li><li>父子组件生命周期顺序</li><li>父子组件生命周期执行顺序，为什么要这样执行</li><li>created mounted生命周期区别</li></ol></blockquote><p>在<code>Vue</code>中实例从创建到销毁的过程就是生命周期，即指从创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程。</p><p>Vue生命周期总共可以分为8个阶段：创建前后, 载入前后,更新前后,销毁前销毁后，以及一些特殊场景的生命周期</p><table><thead><tr><th align="left">生命周期</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">beforeCreate</td><td align="left">组件实例被创建之初</td></tr><tr><td align="left">created</td><td align="left">组件实例已经完全创建</td></tr><tr><td align="left">beforeMount</td><td align="left">组件挂载之前</td></tr><tr><td align="left">mounted</td><td align="left">组件挂载到实例上去之后</td></tr><tr><td align="left">beforeUpdate</td><td align="left">组件数据发生变化，更新之前</td></tr><tr><td align="left">updated</td><td align="left">组件数据更新之后</td></tr><tr><td align="left">beforeDestroy</td><td align="left">组件实例销毁之前</td></tr><tr><td align="left">destroyed</td><td align="left">组件实例销毁之后</td></tr><tr><td align="left">activated</td><td align="left">keep-alive 缓存的组件激活时</td></tr><tr><td align="left">deactivated</td><td align="left">keep-alive 缓存的组件停用时调用</td></tr><tr><td align="left">errorCaptured</td><td align="left">捕获一个来自子孙组件的错误时被调用</td></tr></tbody></table><p><strong>beforeCreate -&gt; created</strong></p><ul><li>初始化<code>vue</code>实例，进行数据观测</li></ul><p><strong>created</strong></p><ul><li>完成数据观测，属性与方法的运算，<code>watch</code>、<code>event</code>事件回调的配置</li><li>可调用<code>methods</code>中的方法，访问和修改data数据触发响应式渲染<code>dom</code>，可通过<code>computed</code>和<code>watch</code>完成数据计算</li><li>此时<code>vm.$el</code> 并没有被创建</li></ul><p><strong>created -&gt; beforeMount</strong></p><ul><li>判断是否存在<code>el</code>选项，若不存在则停止编译，直到调用<code>vm.$mount(el)</code>才会继续编译</li><li>优先级：<code>render</code> &gt; <code>template</code> &gt; <code>outerHTML</code></li><li><code>vm.el</code>获取到的是挂载<code>DOM</code>的</li></ul><p><strong>beforeMount</strong></p><ul><li>在此阶段可获取到<code>vm.el</code></li><li>此阶段<code>vm.el</code>虽已完成DOM初始化，但并未挂载在<code>el</code>选项上</li></ul><p><strong>beforeMount -&gt; mounted</strong></p><ul><li>此阶段<code>vm.el</code>完成挂载，<code>vm.$el</code>生成的<code>DOM</code>替换了<code>el</code>选项所对应的<code>DOM</code></li></ul><p><strong>mounted</strong></p><ul><li><code>vm.el</code>已完成<code>DOM</code>的挂载与渲染，此刻打印<code>vm.$el</code>，发现之前的挂载点及内容已被替换成新的DOM</li></ul><p><strong>beforeUpdate</strong></p><ul><li>更新的数据必须是被渲染在模板上的（<code>el</code>、<code>template</code>、<code>rende</code>r之一）</li><li>此时<code>view</code>层还未更新</li><li>若在<code>beforeUpdate</code>中再次修改数据，不会再次触发更新方法</li></ul><p><strong>updated</strong></p><ul><li>完成<code>view</code>层的更新</li><li>若在<code>updated</code>中再次修改数据，会再次触发更新方法（<code>beforeUpdate</code>、<code>updated</code>）</li></ul><p><strong>beforeDestroy</strong></p><ul><li>实例被销毁前调用，此时实例属性与方法仍可访问</li></ul><p><strong>destroyed</strong></p><ul><li>完全销毁一个实例。可清理它与其它实例的连接，解绑它的全部指令及事件监听器</li><li>并不能清除DOM，仅仅销毁实例</li></ul><p><strong>使用场景分析</strong></p><table><thead><tr><th align="left">生命周期</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">beforeCreate</td><td align="left">执行时组件实例还未创建，通常用于插件开发中执行一些初始化任务</td></tr><tr><td align="left">created</td><td align="left">组件初始化完毕，各种数据可以使用，常用于异步数据获取</td></tr><tr><td align="left">beforeMount</td><td align="left">未执行渲染、更新，dom未创建</td></tr><tr><td align="left">mounted</td><td align="left">初始化结束，dom已创建，可用于获取访问数据和dom元素</td></tr><tr><td align="left">beforeUpdate</td><td align="left">更新前，可用于获取更新前各种状态</td></tr><tr><td align="left">updated</td><td align="left">更新后，所有状态已是最新</td></tr><tr><td align="left">beforeDestroy</td><td align="left">销毁前，可用于一些定时器或订阅的取消</td></tr><tr><td align="left">destroyed</td><td align="left">组件已销毁，作用同上</td></tr></tbody></table><h3 id="父子组件的生命周期"><a href="#父子组件的生命周期" class="headerlink" title="父子组件的生命周期"></a>父子组件的生命周期</h3><p>父beforeCreate -&gt; 父created -&gt; 父beforeMount -&gt; 子beforeCreate -&gt; 子created -&gt; 子beforeMount -&gt; 子mounted -&gt; 父mounted-&gt;父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated-&gt;父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ol><li><a href="https://vue3js.cn/interview/vue/lifecycle.html#%E4%B8%80%E3%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%98%AF%E4%BB%80%E4%B9%88">面试官：请描述下你对vue生命周期的理解？在created和mounted这两个生命周期中请求数据有什么区别呢？ | web前端面试 - 面试官系列 (vue3js.cn)</a></li><li><a href="https://blog.csdn.net/leilei__66/article/details/118699960">Vue——父子组件的生命周期（执行顺序）_默默花上开的博客-CSDN博客_父子组件生命周期</a></li></ol><hr><h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><h3 id="什么是虚拟DOM"><a href="#什么是虚拟DOM" class="headerlink" title="什么是虚拟DOM"></a>什么是虚拟DOM</h3><p>虚拟 DOM （<code>Virtual DOM</code> ）这个概念相信大家都不陌生，从 <code>React</code> 到 <code>Vue</code> ，虚拟 <code>DOM</code> 为这两个框架都带来了跨平台的能力（<code>React-Native</code> 和 <code>Weex</code>）。</p><p>实际上它只<u>是一层对真实<code>DOM</code>的抽象，是以<code>JavaScript</code> 对象 (<code>VNode</code> 节点) 作为基础的树，用对象的属性来描述节点，最终可以通过一系列操作使这棵树映射到真实DOM上。</u></p><p>在<code>Javascript</code>对象中，虚拟<code>DOM</code> 表现为一个 <code>Object</code>对象。并且最少包含标签名 (<code>tag</code>)、属性 (<code>attrs</code>) 和子元素对象 (<code>children</code>) 三个属性，不同框架对这三个属性的命名可能会有差别。</p><p>创建虚拟<code>DOM</code>就是为了更好将虚拟的节点渲染到页面视图中，所以虚拟<code>DOM</code>对象的节点与真实<code>DOM</code>的属性一一照应。</p><p><u>通过<code>VNode</code>，<code>vue</code>可以对这颗抽象树进行创建节点，删除节点以及修改节点的操作， 经过<code>diff</code>算法得出一些需要修改的最小单位，再更新视图，减少了<code>dom</code>操作，提高了性能。</u></p><h3 id="为什么需要虚拟DOM"><a href="#为什么需要虚拟DOM" class="headerlink" title="为什么需要虚拟DOM"></a>为什么需要虚拟DOM</h3><ol><li>通过diff 算法，减少 JavaScript 操作真实 DOM 所带来的性能消耗。</li><li>虚拟 DOM 最大的优势在于抽象了原本的渲染过程，实现了跨平台的能力，而不仅仅局限于浏览器的 DOM，可以是安卓和 IOS 的原生组件，可以是小程序，也可以是各种GUI。</li></ol><p><code>DOM</code>是很慢的，其元素非常庞大，页面的性能问题，大部分都是由<code>DOM</code>操作引起的。</p><p><u>直接操作写真实的DOM会使页面性能下降，因为DOM节点的属性很多，直接操作DOM节点是比较耗时的，频繁操作还会出现页面卡顿，影响用户的体验。</u></p><p>真实的<code>DOM</code>节点，哪怕一个最简单的<code>div</code>也包含着很多属性，可以打印出来直观感受一下： <img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/cc95c7f0-442c-11eb-ab90-d9ae814b240d.png" alt="img"></p><p><strong>举个例子：</strong></p><p>你用传统的原生<code>api</code>或<code>jQuery</code>去操作<code>DOM</code>时，浏览器会从构建<code>DOM</code>树开始从头到尾执行一遍流程</p><p>当你再一次操作时，需要更新10个<code>DOM</code>节点，浏览器没这么智能，收到第一个更新<code>DOM</code>请求后，并不知道后续还有9次更新操作，因此会马上执行流程，最终执行10次流程</p><p>而Vue通过<code>VNode</code>，同样更新10个<code>DOM</code>节点，虚拟<code>DOM</code>不会立即操作<code>DOM</code>，而是将这10次更新的<code>diff</code>内容保存到本地的一个<code>js</code>对象中，最终将这个<code>js</code>对象一次性<code>attach</code>到<code>DOM</code>树上，避免大量的不需要的计算。</p><blockquote><p>很多人认为虚拟 DOM 最大的优势是 diff 算法，<strong>减少 JavaScript 操作真实 DOM 的带来的性能消耗</strong>。虽然这是虚拟 DOM 带来的一个优势，但并不是全部。<strong>虚拟 DOM 最大的优势在于抽象了原本的渲染过程，实现了跨平台的能力</strong>，而不仅仅局限于浏览器的 DOM，可以是安卓和 IOS 的原生组件，可以是小程序，也可以是各种GUI。</p></blockquote><h3 id="如何实现虚拟DOM-源码"><a href="#如何实现虚拟DOM-源码" class="headerlink" title="如何实现虚拟DOM(源码)"></a>如何实现虚拟DOM(源码)</h3><p><code>createElement</code> 创建 <code>VNode</code> 的过程，每个 <code>VNode</code> 有 <code>children</code>，<code>children</code> 每个元素也是一个<code>VNode</code>，这样就形成了一个虚拟树结构，用于描述真实的<code>DOM</code>树结构</p><p>👉<a href="https://vue3js.cn/interview/vue/vnode.html#%E4%B8%89%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9Fdom">面试官：什么是虚拟DOM？如何实现一个虚拟DOM？说说你的思路 | web前端面试 - 面试官系列 (vue3js.cn)</a></p><h3 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h3><blockquote><ol><li>Vue 中 key 的作用，为什么有高效性？（就地复用、Diff <a href="https://www.nowcoder.com/jump/super-jump/word?word=%E7%AE%97%E6%B3%95">算法</a>）</li><li>vue的diff<a href="https://www.nowcoder.com/jump/super-jump/word?word=%E7%AE%97%E6%B3%95">算法</a>？</li></ol></blockquote><p><code>diff</code> 算法是一种通过同层的树节点进行比较的高效算法。在 <code>vue</code> 中，用于虚拟 <code>dom</code> 渲染成真实 <code>dom</code> 的新旧 <code>VNode</code> 节点比较</p><ul><li>比较只会在同层级进行, 不会跨层级比较；</li><li>在diff比较的过程中，循环从两边向中间比较；</li></ul><p>首先，我们拿到新旧节点的数组，然后初始化四个指针，分别指向新旧节点的开始位置和结束位置，进行两两对比，若是 新的开始节点和旧开始节点相同，则都向后面移动，若是结尾节点相匹配，则都前移指针。若是新开始节点和旧结尾节点匹配上了，则会将旧的结束节点移动到旧的开始节点前。若是旧开始节点和新的结束节点相匹配，则会将旧开始节点移动到旧结束节点的后面。若是上述节点都没配有匹配上，则会进行一个兜底逻辑的判断，判断开始节点是否在旧节点中，若是存在则复用，若是不存在则创建。最终跳出循环，进行裁剪或者新增，若是旧的开始节点小于旧的结束节点，则会删除之间的节点，反之则是新增新的开始节点到新的结束节点。</p><p>之前也是对vue的diff算法一知半解，现在对diff算法有了更深刻的理解。</p><p>ps: 之前被问过 vue 的diff算法是深度优先遍历还是广度优先算法，从图里是无法的得知的，在patchVnode过程中会调用updateChildren，所以 vue 的diff算法是个<code>深度优先算法</code>。</p><h3 id="👉References-1"><a href="#👉References-1" class="headerlink" title="👉References"></a>👉References</h3><ol><li><p><a href="https://vue3js.cn/interview/vue/diff.html#%E4%B8%80%E3%80%81%E6%98%AF%E4%BB%80%E4%B9%88">面试官：你了解vue的diff算法吗？说说看 | web前端面试 - 面试官系列 (vue3js.cn)</a></p></li><li><p><a href="https://juejin.cn/post/7013193754349666335">面试官：说说vue的diff算法 - 掘金 (juejin.cn)</a></p></li></ol><hr><h2 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h2><blockquote><ol><li>Vue 响应式原理</li><li>使用过哪些vue指令</li><li>v-show v-if的区别</li><li>vue里style标签添加scoped属性是干嘛的？<ul><li>使用scoped，那么style标签里的样式只对当前组件生效，而不会影响到父子组件。</li><li>样式穿透</li></ul></li><li>vue的watch，watch可以监听路由吗？可以监听url的参数吗？可以监听未双向绑定的数据吗？<ul><li>watch可以监听路由；</li><li>可以监听url的参数</li><li>watch只能监听双向绑定的数据</li></ul></li><li>Vue MVVM实现思路</li></ol></blockquote><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220405165442.png" alt="data"></p><ol><li><p>Vue实例，通过data传入的对象，Vue会遍历它所有的property，然后通过Object.defineProperty将每个属性修改为getter/setter，对外不可见。每个组件实例都有一个watcher实例，它会在组件渲染时将“接触”过的数据property记录为依赖，之后当依赖更新时（即触发setter），会通知watcher，从而让依赖这个数据的组件重新渲染。</p></li><li><p>Vue更新DOM是异步执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 <code>Promise.then</code>、<code>MutationObserver</code> 和 <code>setImmediate</code>，如果执行环境不支持，则会采用 <code>setTimeout(fn, 0)</code> 代替。例如，当你设置 <code>vm.someData = 'new value'</code>，该组件不会立即重新渲染。当刷新队列时，组件会在下一个事件循环“tick”中更新。多数情况我们不需要关心这个过程，但是如果你想基于更新后的 DOM 状态来做点什么，这就可能会有些棘手。虽然 Vue.js 通常鼓励开发人员使用“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们必须要这么做。为了在数据变化之后等待 Vue 完成更新 DOM，可以在数据变化之后立即使用 <code>Vue.nextTick(callback)</code>。这样回调函数将在 DOM 更新完成后被调用。</p></li></ol><hr><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><blockquote><ol><li>state了解吗</li><li>props和state的区别</li><li>vuex中mutation中可以执行异步吗</li></ol></blockquote><p>Vuex 是一个专为 Vue 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。</p><ol><li><p> Vuex 的状态存储是响应式的；当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新</p></li><li><p> 改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation， 这样使得我们可以方便地跟踪每一个状态的变化 。</p></li></ol><p><strong>Vuex主要包括以下几个核心模块：</strong></p><ol><li><p> State：定义了应用的状态数据</p></li><li><p> Getter：在 store 中定义“getter”（可以认为是 store 的计算属性），就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来， 且只有当它的依赖值发生了改变才会被重新计算 </p></li><li><p> Mutation：是唯一更改 store 中状态的方法，且必须是同步函数 。（为什么？因为任何在回调函数中进行的状态的改变都是不可追踪的）</p></li><li><p> Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作</p></li></ol><p>​     5. Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。</p><p><img src="https://vuex.vuejs.org/vuex.png"></p><hr><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><blockquote><ol><li>多路复用怎么实现的</li><li>路由的实现</li><li>vue中的router有哪两种类型？（hash、history）区别是什么？</li><li>vue的history和hash模式，底层是咋做的</li><li>. 描述VueRouter如何实现单页</li><li>前端路由怎么实现的，原理。</li><li>前端路由有哪几种。</li></ol></blockquote><p>前端路由就是将之前服务端根据 url 的不同返回不同的页面的任务交给前端来做。</p><p>前端路由的实现原理其实很简单，本质上就是检测 URL 的变化，通过拦截 URL然后解析匹配路由规则。</p><h3 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h3><ul><li>hash路由<ul><li>url地址，<a href="https://elegantlee/#/about%EF%BC%8C#%E5%90%8E%E9%9D%A2%E7%9A%84%E5%86%85%E5%AE%B9%E7%A7%B0%E4%B8%BAlocation%E7%9A%84hash%E3%80%82%E5%BD%93#%E5%90%8E%E9%9D%A2%E7%9A%84%E5%9C%B0%E5%9D%80%E5%8F%91%E7%94%9F%E6%94%B9%E5%8F%98%E6%97%B6%EF%BC%8C%E6%95%B4%E4%B8%AA%E9%A1%B5%E9%9D%A2%E6%B2%A1%E6%9C%89%E5%88%B7%E6%96%B0%EF%BC%8C%E4%B8%8D%E4%BC%9A%E9%87%8D%E6%96%B0%E8%AF%B7%E6%B1%82%E6%95%B4%E4%B8%AAhtml%E7%9A%84%E8%B5%84%E6%BA%90%E3%80%82%E4%BD%86%E6%AF%8F%E6%AC%A1hash%E5%8F%98%E5%8C%96%E4%BC%9A%E8%A7%A6%E5%8F%91%60haschange%60%E4%BA%8B%E4%BB%B6%EF%BC%8C%E5%9B%A0%E6%AD%A4%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E7%9B%91%E5%90%AC%60haschange%60%E7%9A%84%E5%8F%98%E5%8C%96%E6%9D%A5%E4%BD%9C%E5%87%BA%E5%93%8D%E5%BA%94%E3%80%82">https://elegantlee/#/about，#后面的内容称为location的hash。当#后面的地址发生改变时，整个页面没有刷新，不会重新请求整个html的资源。但每次hash变化会触发`haschange`事件，因此可以通过监听`haschange`的变化来作出响应。</a></li><li>在</li></ul></li><li>history路由<ul><li>HTML5提供了两个API，<code>pushState</code>和<code>replaceState</code>（不会触发<code>onpopstate</code>事件）。通过这两个API可以改变URL地址并且不会发送请求。浏览器行为，JS调用history.back()或history.forward()（如）会触发<code>onpopState</code>事件，监听这个事件作出相应的响应。</li></ul></li></ul><p>👉<a href="https://juejin.cn/post/6942520773156438023#heading-8">从路由到 vue-router 源码，带你吃透前端路由 - 掘金 (juejin.cn)</a></p><h3 id="vue-router如何实现SPA"><a href="#vue-router如何实现SPA" class="headerlink" title="vue-router如何实现SPA"></a>vue-router如何实现SPA</h3><p>vue-router是Vue的官方路由，用来构建单页应用。</p><ol><li>首先全局注册vue-router插件；</li><li>配置路由规则，即路由映射，不同的路径对应不同的组件</li><li>创建router实例。将router挂载到vue实例上，然后暴露该router实例。</li><li>在需要显示的组件中创建<router-view></router-view>标签</li><li>当页面地址发生变化时，router-view会显示对应的内容。</li></ol><h3 id="路由守卫（重点）"><a href="#路由守卫（重点）" class="headerlink" title="路由守卫（重点）"></a>路由守卫（重点）</h3><p>路由守卫分为全局路由守卫、组件路由守卫、路由独享守卫</p><p><strong>全局路由守卫</strong>：全局路由守卫为整个route设置。</p><p><strong>独享路由守卫</strong>：独享路由守卫是在路由配置界面给<strong>某一个路由单独配置</strong>的守卫。</p><p><strong>组件路由守卫</strong>：组件路由守卫是写在每个<strong>单独vue文件</strong>中的路由守卫。</p><h4 id="全局路由守卫：（直接挂载到router实例上）"><a href="#全局路由守卫：（直接挂载到router实例上）" class="headerlink" title="全局路由守卫：（直接挂载到router实例上）"></a><strong>全局路由守卫：</strong>（直接挂载到router实例上）</h4><p>全局前置路由守卫（beforeEach）：初始化的时候被调用、每次<strong>路由切换之前</strong>被调用，常用做登陆验证。</p><p>全局后置路由守卫（afterEach）：初始化的时候被调用、每次<strong>路由切换之后</strong>被调用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//语法：</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//全局前置路由守卫</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">'/login'</span> <span class="token operator">||</span> to<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">'/register'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'您还没有登录，请先登录'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="独享路由守卫：（为每个路由单独添加）"><a href="#独享路由守卫：（为每个路由单独添加）" class="headerlink" title="独享路由守卫：（为每个路由单独添加）"></a>独享路由守卫：（为每个路由单独添加）</h4><p>钩子函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">beforeEnter：在beforeEach之后执行，与它功能一样，只是，将其写进其中一个路由对象中，只在这个路由下起作用。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220411155742.png" alt="image-20220329151826414"></p><h4 id="组件路由守卫"><a href="#组件路由守卫" class="headerlink" title="组件路由守卫"></a>组件路由守卫</h4><p>钩子函数：</p><pre class="line-numbers language-none"><code class="language-none">beforeRouteEnter//通过路由操作进入组件被触发beforeRouteLeave//通过路由操作离开组件被触发<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="route-与-router的区别-重点"><a href="#route-与-router的区别-重点" class="headerlink" title="$route 与$router的区别(重点)"></a><code>$route</code> 与<code>$router</code>的区别(重点)</h3><p>1、<strong>router</strong>是VueRouter的一个实例对象。这个对象是一个<strong>全局的对象</strong>，包含了所有路由的关键属性和对象。</p><p>举例：</p><p>history对象；比如：$router.push({path：‘home’})，本质是向history栈中添加一个路由，在我们看来是切换路由，但本质是添加一个history记录。</p><p>方法：$router.replace({path：‘home’})    //替换路由，没有历史记录。</p><p>2、route是一个跳转的路由对象，每一个路由都会有一个route对象，是一个<strong>局部的对象。</strong>可以获取对应的name、path、params</p><h3 id="路由跳转方式"><a href="#路由跳转方式" class="headerlink" title="路由跳转方式"></a>路由跳转方式</h3><p>1、编程式：采用这种方式就需要导入 VueRouter 并调用了。</p><p>2、声明式：简单来说，就是使用 router-link 组件来导航，通过传入 to 属性指定跳转地址（router-link 默认会被渲染成一个a标签）。</p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础与进阶</title>
      <link href="/2022/08/15/ji-zhu-chen-dian/qian-duan-ji-chu/javascript/"/>
      <url>/2022/08/15/ji-zhu-chen-dian/qian-duan-ji-chu/javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>JavaScript 是一个静态作用域语言。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li>基本数据类型</li><li>变量的定义</li><li>函数</li><li>数组</li><li>类和对象</li><li>this 指向</li><li>作用域和作用域链</li></ul><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><blockquote><ol><li>8种数据类型及区别；</li><li>数据类型检测的方式；</li></ol></blockquote><h4 id="8种数据类型及区别"><a href="#8种数据类型及区别" class="headerlink" title="8种数据类型及区别"></a>8种数据类型及区别</h4><p>JavaScript 中的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures">类型</a>集合包括原始值和对象。</p><p><strong>基本类型(值类型，原始值)：</strong> Number (<a href="https://zh.wikipedia.org/wiki/%E9%9B%99%E7%B2%BE%E5%BA%A6%E6%B5%AE%E9%BB%9E%E6%95%B8">基于 IEEE 754 标准的双精度 64 位二进制格式的值</a>，<code>-(2^53-1)~2^53-1</code>，+Infinity，-Infinity，NaN，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE">Number.MAX_VALUE</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE">Number.MIN_VALUE</a>)，String (字符串，不可改变，对字符串的操作一定是返回一个新字符串)，Boolean (布尔)，Null (空)，Undefined (未定义)，BigInt 类型，Symbol (符号)。在内存中占据固定大小，保存在<code>栈内存</code>中（7个）；</p><p>Number 类型：<code>MAX_VALUE</code> 属性值接近于 <code>1.79E+308</code>。大于 <code>MAX_VALUE</code> 的值代表 “<code>Infinity</code>“；</p><ul><li>检查值是否在双精度浮点数的取值范围内：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER"><code>Number.MAX_SAFE_INTEGER</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER"><code>Number.MIN_SAFE_INTEGER</code></a>， <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger"><code>Number.isSafeInteger()</code></a>。超出这个范围，JavaScript 中的<strong>整数</strong>将不再安全，该值将表示为与该值近似的双精度浮点数。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&gt;</span> <span class="token number">42</span> <span class="token operator">/</span> <span class="token operator">+</span><span class="token number">0</span><span class="token number">Infinity</span><span class="token operator">&gt;</span> <span class="token number">42</span> <span class="token operator">/</span> <span class="token operator">-</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">Infinity</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>引用类型(复杂数据类型，对象)：</strong> Object (对象)、Function (函数)。其他还有 Array (数组)、Date (日期)、RegExp (正则表达式)、特殊的基本包装类型（String、Number、Boolean）以及单体内置对象（Global、Math）等引用类型的值是对象保存在<code>堆内存</code>中，栈内存存储的是对象的变量标识符以及对象在堆内存中的存储地址。</p><p>Reference:👉 [浅析JS中的堆内存与栈内存 - 木子墨 - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/heioray/p/9487093.html#:~:text=js%E4%B8%AD%E7%9A%84%E5%A0%86%E5%86%85%E5%AD%98%E4%B8%8E%E6%A0%88%E5%86%85%E5%AD%98">https://www.cnblogs.com/heioray/p/9487093.html#:~:text=js中的堆内存与栈内存</a> 在js引擎中对变量的存储主要有两种位置， 堆内存和栈内存 。 和java中对内存的处理类似，,栈内存 主要用于存储各种 基本类型的 变量，包括Boolean、Number、String、Undefined、Null，**以及对象变量的指针，这时候栈内存给人的感觉就像一个线性排列的空间，每个小单元大小基本 )</p><p><strong><code>null</code> 和 <code>undefined</code> 的区别？</strong></p><ol><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/null">null</a> 是表示变量未指向任何对象。把 <code>null</code> 作为尚未创建的对象，更容易理解。null 不是全局对象的一个属性，转为数值时为0；<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined">undefined</a> 是一个表示”无”的原始值，转为数值时为 NaN。当声明的变量还未被初始化时，变量的默认值为 undefined。</p></li><li><p>null 用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象；undefined表 示 “缺少值”，就是此处应该有一个值，但是还没有定义。</p></li></ol><p>undefined 的典型用法是：</p><ol><li><p>变量被声明了，但没有赋值时，就等于 undefined</p></li><li><p>调用函数时，应该提供的参数没有提供，该参数等于 undefined</p></li><li><p>对象没有赋值的属性，该属性的值为 undefined</p></li><li><p>函数没有返回值时，默认返回 undefined</p></li></ol><p>null 表示“没有对象”，即该处不应该有值。典型用法是：</p><ol><li><p>作为函数的参数，表示该函数的参数不是对象</p></li><li><p>作为对象原型链的终点</p></li></ol><p><strong>延伸知识点：</strong></p><p>（1）== 和  === 的区别？== 会在比较值之前执行数据类型转换。</p><p>== 号：</p><ul><li><font color="red">如果一个操作数是<code>null</code>，另一个操作数是<code>undefined</code>，则返回<code>true</code>。</font></li><li>如果两个操作数都是对象，则仅当两个操作数都引用同一个对象时才返回<code>true</code>。</li><li>如果两个操作数是不同类型的，就会尝试在比较之前将它们<strong>转换为相同类型</strong>：<ul><li>当数字与字符串进行比较时，会尝试<strong>将字符串转换为数字值</strong>。</li><li>如果操作数之一是<code>Boolean</code>，则<strong>将布尔操作数转换为 1 或 0</strong>。</li><li>如果操作数之一是对象，另一个是数字或字符串，会尝试使用对象的<code>valueOf()</code>和<code>toString()</code>方法<strong>将对象转换为原始值</strong>。</li></ul></li><li>如果操作数具有相同的类型，则将它们进行如下比较：<ul><li><code>String</code>：<code>true</code>仅当两个操作数具有相同顺序的相同字符时才返回。</li><li><code>Number</code>：<code>true</code>仅当两个操作数具有相同的值时才返回。<code>+0</code>并被<code>-0</code>视为相同的值。如果任一操作数为<code>NaN</code>，则返回<code>false</code>。</li><li><code>Boolean</code>：<code>true</code>仅当操作数为两个<code>true</code>或两个<code>false</code>时才返回<code>true</code>。</li></ul></li></ul><p>=== 号：</p><ul><li>如果操作数的类型不同，则返回 <code>false</code>。</li><li>如果两个操作数都是对象，只有当它们指向同一个对象时才返回 <code>true</code>。</li><li>如果两个操作数都为 <code>null</code>，或者两个操作数都为 <code>undefined</code>，返回 <code>true</code>。</li><li>如果两个操作数有任意一个为 <code>NaN</code>，返回 <code>false</code>。</li><li>否则，比较两个操作数的值：<ul><li>数字类型必须拥有相同的数值。<code>+0</code> 和 <code>-0</code> 会被认为是相同的值。</li><li>字符串类型必须拥有相同顺序的相同字符。</li><li>布尔运算符必须同时为 <code>true</code> 或同时为 <code>false</code>。</li></ul></li></ul><p>（2）检查 undefined 的三种方式？</p><ul><li>严格全等 ===，== 会先检查值是否为 null，null 不等同于 undefined；</li><li>typeof</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/void">void</a> 0 得到原始的 undefined</li></ul><p><strong>使用场景：</strong></p><p>Symbol：使用 Symbol 来作为对象属性名（key）。利用该特性，把一些不需要对外操作和访问的属性使用 Symbol 来定义。</p><p>BigInt：由于在 Number 与 BigInt 之间进行转换会损失精度，因而建议仅在值可能大于 2^53 时使用 BigInt 类型，并且不在两种类型之间进行相互转换。</p><p>传送门 👉<a href="https://juejin.cn/post/7000754813801775111"># JavaScript 数据类型之 Symbol、BigInt</a></p><h4 id="数据类型检测的方式"><a href="#数据类型检测的方式" class="headerlink" title="数据类型检测的方式"></a>数据类型检测的方式</h4><ol><li><p>typeof null 返回什么 ：object</p></li><li><p>数据类型检测的方式？（typeof、instanceof、Object.prototype.toString.call）</p></li><li><p>instanceof 实现机制（手写，口述出来）</p></li></ol><p> <strong>typeof</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 'number'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'number'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 'boolean'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">'mc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 'string'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Symbol<span class="token punctuation">)</span>           <span class="token comment">// 'function'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 'function'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 'function'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 'object'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 'object'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 'object'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 'undefined'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：能够快速区分<code>基本数据类型</code></p><p>缺点：不能区分 Object、Array 和 null，都返回 object</p><p><strong>instanceof</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'str'</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// false  </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：能够区分 Array、Object 和 Function，适合用于判断自定义的类实例对象，用于区分引用类型的数据；</p><p>缺点：Number，Boolean，String基本数据类型不能判断</p><p><strong>Object.prototype.toString.call()</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> toString <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//[object Number]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//[object Boolean]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'mc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//[object String]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//[object Array]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//[object Object]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[object Function]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[object Undefined]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[object Null]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：精准判断数据类型</p><p>缺点：写法繁琐不容易记，推荐进行封装后使用</p><h5 id="instanceof-的作用"><a href="#instanceof-的作用" class="headerlink" title="instanceof 的作用"></a>instanceof 的作用</h5><p>用于判断一个引用类型是否属于某构造函数；</p><p>还可以在继承关系中用来判断一个实例是否属于它的父类型。</p><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>原型链。</p><ul><li>prototype：只要创建一个函数就会按特定的规则为这个函数创建一个 prototype 属性（指向原型对象）。</li><li>实例对象上暴露的 _<em>proto</em>_ 属性，通过这个属性可以访问对象的原型。</li><li>prototype 是构造函数自带的属性，_<em>proto</em>_ 是实例化对象的属性，指向构造函数的 prototype。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">instance_of</span><span class="token punctuation">(</span><span class="token parameter">object<span class="token punctuation">,</span> constructor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>object <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">===</span> constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    object <span class="token operator">=</span> object<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="instanceof-和-typeof-的区别："><a href="#instanceof-和-typeof-的区别：" class="headerlink" title="instanceof 和 typeof 的区别："></a>instanceof 和 typeof 的区别：</h5><p>typeof 在对值类型 number、string、boolean 、undefined、 以及引用类型的 function 的反应是精准的；但是，对于对象 { } 、数组 [ ] 、null 都会返回object。为了弥补这一点，<u>instanceof 从原型的角度，来判断某引用属于哪个构造函数，从而判定它的数据类型</u>。</p><h3 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h3><h4 id="var-let-const-区别"><a href="#var-let-const-区别" class="headerlink" title="var let const 区别"></a>var let const 区别</h4><ol><li> var 定义的变量是包含它的函数的局部变量，在函数内定义变量省略 var 会创建一个全局变量。用 var 可以重复定义同一个变量（变量提升）。let 和 const 定义的变量，只能在块作用域里访问，不能重复声明同一个变量。const 用来定义常量，使用时必须初始化（即必须赋值），且不能修改。</li><li> 在全局上下文中，基于 let 声明的全局变量和全局对象 GO（window）没有任何关系 ；var 声明的变量会和 GO 有映射关系；</li><li> let 和 const <code>会产生暂时性死区</code>：在解析代码时，JavaScript 引擎也会注意出现在块后面的 let 声明。在 let 声明之前的执行瞬间被称为“暂时性死区”（temporal dead zone），在这个阶段引用任何后面才声明的变量都会抛出 RefferenceError。</li></ol><h4 id="作用域和作用域链"><a href="#作用域和作用域链" class="headerlink" title="作用域和作用域链"></a>作用域和作用域链</h4><p><strong>作用域：</strong>简单来说<u>作用域就是变量与函数的可访问范围</u>。作用域最大的用处就是<code>隔离变量</code>，不同作用域下同名变量不会有冲突。</p><p><strong>作用域链：</strong>一般情况下，变量到创建该变量的作用域中取值。但是如果在当前作用域中没有查到，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。</p><p>在 JavaScript 执行过程中，其作用域链是由词法作用域决定的。</p><p><strong>词法作用域是代码编译阶段就决定好的，和函数是怎么调用的没有关系</strong>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> myName <span class="token operator">=</span> <span class="token string">"b"</span>  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> myName <span class="token operator">=</span> <span class="token string">"a"</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 输出 a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="箭头函数和普通函数的区别"><a href="#箭头函数和普通函数的区别" class="headerlink" title="箭头函数和普通函数的区别"></a>箭头函数和普通函数的区别</h4><p>特性：</p><ol><li> <strong>箭头函数没有 constructor</strong>，是匿名函数，不能作为构造函数，不能通过 new 调用。</li><li> 没有 new.target 属性。在通过 new 运算符被初始化的函数或构造方法中，new.target 返回一个指向构造方法或函数的引用。在普通的函数调用中，new.target 的值是 undefined。</li><li> <strong>箭头函数不绑定 Arguments 对象</strong>。取而代之用 rest 参数…（剩余参数）解决。</li><li> <strong>箭头函数没有自己的 this 指针</strong>，捕获其所在作用域链的上一级作用域中的 this。通过 call() 或 apply() 方法调用一个箭头函数时，只能传递参数（不能绑定this），他们的第一个参数会被忽略。（这种现象对于 bind 方法同样成立）。</li><li> 箭头函数没有原型属性，Fn.prototype 值为 undefined。</li><li> 箭头函数不能当做 Generator 函数，不能使用 yield 关键字。</li></ol><h4 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h4><p>立即执行函数表达式（Immediately Invoked Function Expression，IIFE）就是声明一个匿名函数，然后马上调用这个匿名函数。可以创建一个局部作用域。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span>“这是一个立即执行函数”<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>作用：</p><ol><li>立即执行函数会形成一个单独的作用域，我们<u>可以封装一些临时变量或者局部变量，避免污染全局变量</u>。</li><li><u>解决 undefined 标识符的默认值被错误覆盖导致的异常</u>。</li></ol><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><h5 id="闭包是什么"><a href="#闭包是什么" class="headerlink" title="闭包是什么"></a>闭包是什么</h5><p><strong>《JavaScript 高级程序设计（第 4 版）》（红宝书）：</strong>闭包是指有权访问另外一个函数作用域中的变量的函数。</p><p><strong>MDN：</strong>闭包是由函数以及声明该函数的<strong>词法环境</strong>组合而成的。该环境包含了这个闭包创建时作用域内的任何局部变量。词法（lexical）一词指的是，词法作用域根据源代码中声明变量的位置来确定该变量在何处可用。嵌套函数可访问声明于它们外部作用域的变量。</p><p><strong>《你不知道的 JavaScript》：</strong>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。</p><p><strong><a href="https://zhqwq.github.io/broswer-working-principle/guide/10.html">浏览器工作原理与实践</a><strong>：在 JavaScript 中，根据</strong>词法作用域</strong>的规则，内部函数总是可以访问其外部函数中声明的变量，当通过调用一个外部函数返回一个内部函数后，即使该外部函数已经执行结束了，但是内部函数引用外部函数的变量依然保存在内存中，我们就把这些变量的集合称为闭包。比如外部函数是 foo，那么这些变量的集合就称为 foo 函数的闭包。</p><p><strong>形成原因：</strong>内部的函数存在所在词法作用域的引用就会导致闭包。</p><p><strong>闭包变量存储的位置：</strong>闭包中的变量存储的位置是堆内存。</p><p><strong>闭包的作用</strong></p><ul><li><code>保护</code>，隐藏内部实现，最小限度地暴露必要的内容。</li><li>避免同名标识符之间的冲突（模块化管理代码时用到）。</li><li><code>保存</code>，保持对函数定义所在的词法作用域的引用。</li></ul><p><strong>闭包的应用：</strong>回调函数和模块化。</p><p><strong>闭包缺点：</strong>导致函数的变量一直保存在内存中，过多的闭包可能会导致内存泄漏。开发模式 performance 面板 和 memory 面板可以找到泄露的现象和位置。</p><p>手写一个闭包函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">myClosure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// myClosure 是一个闭包 </span>        <span class="token keyword">return</span> <span class="token operator">++</span>num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> myClosure<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="闭包-哪里用到了-为什么用-有什么作用"><a href="#闭包-哪里用到了-为什么用-有什么作用" class="headerlink" title="闭包 哪里用到了 为什么用 有什么作用"></a>闭包 哪里用到了 为什么用 有什么作用</h5><blockquote><p>闭包的特性使得函数可以访问到外层作用域。如果一个内层函数访问外层函数中的变量，外层函数已经执行完毕，但是内层函数还没执行完毕时，内层函数想要访问外层函数中的变量，变量会直到内层函数执行完时它的存储空间才会被收回。</p><p>使用场景：</p><p>（1）回调函数；（定时器、事件监听器、Ajax 请求、跨窗口通信、Web Workers 或者任何其他的异步（或者同步）任务中，只要使用了回调函数，实际上就是在使用闭包）</p><p>（2）模拟私有方法（创建模块，封装私有变量和对外开放的 API）；</p><p>性能考量：</p><p>如果不是某些特定任务需要使用闭包，在其它函数中创建函数是不明智的，因为闭包在处理速度和内存消耗方面对脚本性能具有负面影响。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 1. 定时器传参 */</span><span class="token comment">//原生的 setTimeout 传递的第一个函数不能带参数</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment">//通过闭包可以实现传参效果</span><span class="token keyword">function</span> <span class="token function">myfunc</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token function">myfunc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">&gt;</span>button<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token comment">/* 2. 事件中的回调函数 */</span>    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">autorun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"autorun执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token comment">/* 3. 自执行函数 */</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//使用IIFE</span>    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span><span class="token comment">/* 4. 防抖节流 */</span><span class="token comment">/*使用场景比如绑定响应鼠标移动、窗口大小调整、滚屏等事件时，绑定的函数触发的频率会很频繁。若稍处理函数微复杂，需要较多的运算执行时间和资源，往往会出现延迟，甚至导致假死或者卡顿感。为了优化性能，这时就很有必要使用 debounce 或 throttle了。debounce 与 throttle 区别防抖 （debounce） ：多次触发，只在最后一次触发时，执行目标函数。节流（throttle）：限制目标函数调用的频率，比如：1s内不能调用2次。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p>👉<a href="https://juejin.cn/post/6937469222251560990">JS 闭包经典使用场景和含闭包必刷题 - 掘金 (juejin.cn)</a></p><p>👉<a href="https://juejin.cn/post/6948415598632108063">闭包的使用场景，使用闭包需要注意什么 - 掘金 (juejin.cn)</a></p><hr><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote><ol><li>遍历</li><li>判断</li><li>清空</li><li>去重</li></ol></blockquote><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration">MDN</a></p><h5 id="for循环遍历（ES1）"><a href="#for循环遍历（ES1）" class="headerlink" title="for循环遍历（ES1）"></a>for循环遍历（ES1）</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="for-in（ES1）"><a href="#for-in（ES1）" class="headerlink" title="for-in（ES1）"></a>for-in（ES1）</h5><p>for-in 遍历的不是数组中的 value，而是 index。</p><p>for-in 语句循环一个指定的变量来循环一个对象所有可枚举的属性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "0", "1", "2", "foo"</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "3", "5", "7"</span><span class="token punctuation">}</span><span class="token comment">// 注意 for...of 的输出没有出现 "hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="forEach方法（ES5）"><a href="#forEach方法（ES5）" class="headerlink" title="forEach方法（ES5）"></a>forEach方法（ES5）</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>currentValue <span class="token punctuation">[</span><span class="token punctuation">,</span> index <span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只支持IE8以上的浏览器，有一定的局限性</p><p><strong>缺点：</strong></p><ul><li>这种写法的问题在于，无法中途跳出 <code>forEach</code> 循环，<code>break</code> 命令或 <code>return</code> 命令都不能奏效，只能抛出异常退出循环。</li><li>不能在它的循环体中使用 <code>await</code>。</li><li>如果数组在迭代过程时被修改了，则其他元素会被跳过。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/** value: 当前正在遍历的对象* index: 当前正在遍历的对象的索引* array: 当前正在遍历的数组(就是arr---调用者)*/</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// console.log(index);</span>    <span class="token comment">// console.log(array);</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="for-of（ES6）"><a href="#for-of（ES6）" class="headerlink" title="for-of（ES6）"></a>for-of（ES6）</h5><p>特点：</p><ul><li>可以在内部使用 await。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for-in、for-of-、forEach-三者的区别"><a href="#for-in、for-of-、forEach-三者的区别" class="headerlink" title="for in、for of 、forEach 三者的区别"></a>for in、for of 、forEach 三者的区别</h4><p><code>for...in</code> 和 <code>for...of</code> 都可以用来遍历对象的属性和数组。不同的是：</p><ol><li><code>for...in</code> 遍历对象输出的是对象的 <code>key</code> 值，遍历数组输出的是 <code>index</code> 索引值；<code>for...of</code> 遍历对象和数组输出的是都是 <code>value</code>，而且遍历对象需要使用 <code>Object.keys()</code> 获取对象的 <code>key</code> 值集合后，再使用 <code>for of</code>；<code>forEach</code> 更多的用来遍历数组，它包括三个参数分别是（<code>value</code>，<code>index</code> 和数 <code>arr</code>）</li><li>在 <code>forEach</code> 内部不能使用 <code>await</code>，也无法在遍历过程中通过 <code>break</code> 或 <code>return</code> 跳出循环，只能抛出异常跳出。其他两循环种遍历方式都可以使用 <code>await</code>，也可以正常跳出循环。</li></ol><h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4><p>（1）原型</p><p>（2）构造函数</p><p>（3）Array 自带的 isArray() 方法</p><h5 id="1-instanceof-运算符"><a href="#1-instanceof-运算符" class="headerlink" title="1. instanceof 运算符"></a>1. instanceof 运算符</h5><p>从构造函数入手：可以判断一个对象是否是在其原型链上原型构造函数中的属性。</p><p>typeof 和 instanceof 的区别？ </p><ul><li>两者都可以用来判断变量，typeof 会返回基本类型，而 instanceof 只会返回一个布尔值。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-constructor-判断"><a href="#2-constructor-判断" class="headerlink" title="2. constructor 判断"></a>2. constructor 判断</h5><p>这个属性是返回对象相对应的构造函数，Object 的每个实例都有构造函数 constructor，用于保存着用于创建当前对象的构造函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3-通过数组自带的方法-isArray-判断（ES5-新增，优于-instanceof，在浏览器环境中检测数组更好）"><a href="#3-通过数组自带的方法-isArray-判断（ES5-新增，优于-instanceof，在浏览器环境中检测数组更好）" class="headerlink" title="3. 通过数组自带的方法 isArray 判断（ES5 新增，优于 instanceof，在浏览器环境中检测数组更好）"></a>3. 通过数组自带的方法 isArray 判断（ES5 新增，优于 instanceof，在浏览器环境中检测数组更好）</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="4-通过-isPrototypeOf-方法判断"><a href="#4-通过-isPrototypeOf-方法判断" class="headerlink" title="4. 通过 isPrototypeOf() 方法判断"></a>4. 通过 isPrototypeOf() 方法判断</h5><p>从原型入手，Array.prototype 属性表示 Array 构造函数的原型，其中有一个方法是 isPrototypeOf() 用于测试一个对象是否存在于另一个对象的原型链上。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="admonition warning"><p class="admonition-title">注意</p><p><strong>备注：</strong><code>isPrototypeOf()</code> 与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof"><code>instanceof</code></a> 运算符不同。在表达式 "<code>object instanceof AFunction</code>" 中，<code>object</code> 的原型链是针对 <code>AFunction.prototype</code> 进行检查的，而不是针对 <code>AFunction</code> 本身。</p></div><h5 id="通过-Object-getPrototypeOf-方法判断"><a href="#通过-Object-getPrototypeOf-方法判断" class="headerlink" title="通过 Object.getPrototypeOf 方法判断"></a>通过 Object.getPrototypeOf 方法判断</h5><p>Object.getPrototypeOf() 方法返回指定对象的原型，所以只要跟 Array 的原型比较即可。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="通过-Object-prototype-toString-call-判断"><a href="#通过-Object-prototype-toString-call-判断" class="headerlink" title="通过 Object.prototype.toString.call() 判断"></a>通过 Object.prototype.toString.call() 判断</h5><p>虽然 Array 也继承自 Object，但 js 在 Array.prototype 上重写了 toString，而我们通过 toString.call(arr) 实际上是通过原型链调用了。可以获取到变量的不同类型。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Array]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h4><h5 id="1-直接赋空值"><a href="#1-直接赋空值" class="headerlink" title="1. 直接赋空值"></a>1. 直接赋空值</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-length赋值为0"><a href="#2-length赋值为0" class="headerlink" title="2. length赋值为0"></a>2. length赋值为0</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3-数组的splice方法"><a href="#3-数组的splice方法" class="headerlink" title="3. 数组的splice方法"></a>3. 数组的splice方法</h5><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">splice()</a> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组，并以数组形式返回被修改的内容。==此方法会改变原数组==。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*第二个和第三个参数是可选的* splice(start, deleteCount, [item1, item2, ...])*/</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h4><blockquote><ol><li>遍历数组-不改变元素组（可使用map方法）；</li><li>遍历数组-删除重复的元素（使用splice方法）；</li><li>利用Set去重；</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/* 1. 遍历数组---保存到新数组 */</span><span class="token keyword">let</span> arr0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> arr0<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr0<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 2. 遍历数组---删除重复的元素  */</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 如果相等，删除j</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 删除j位置的元素</span>      arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 每删除一个元素，数组长度-1，j位置的元素继续与后面一个元素比较</span>      j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/* 3. 利用set去重 */</span><span class="token keyword">let</span> arr0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>[MDN]</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects">使用对象</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Details_of_the_Object_Model">对象模型细节</a></li></ul><p>在 javascript 中，一个对象可以是一个单独的拥有属性和类型的实体。 对象中未赋值的属性的值为<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>（而不是<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/null"><code>null</code></a>）</p><p>JavaScript 中的对象只能使用 String 类型作为键类型。</p><p><strong>创建对象的方式：</strong></p><p>（1）使用对象初始化器（也被称作通过字面值）创建对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">property_1</span><span class="token operator">:</span>   value_1<span class="token punctuation">,</span>   <span class="token comment">// property_# 可以是一个标识符...</span>  <span class="token number">2</span><span class="token operator">:</span>            value_2<span class="token punctuation">,</span>   <span class="token comment">// 或一个数字...</span>  <span class="token punctuation">[</span><span class="token string">"property"</span> <span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">:</span> value_3<span class="token punctuation">,</span>  <span class="token comment">//  或一个可计算的 key 名...</span>  <span class="token comment">// ...,</span>  <span class="token string-property property">"property n"</span><span class="token operator">:</span> value_n <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 或一个字符串</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）使用构造函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token parameter">make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token operator">=</span> make<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> kenscar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"Nissan"</span><span class="token punctuation">,</span> <span class="token string">"300ZX"</span><span class="token punctuation">,</span> <span class="token number">1992</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> vpgscar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"Mazda"</span><span class="token punctuation">,</span> <span class="token string">"Miata"</span><span class="token punctuation">,</span> <span class="token number">1990</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）使用<code>Object.create </code>方法，新对象的原型就是调用 create 方法时传入的第一个参数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Animal properties and method encapsulation</span><span class="token keyword">var</span> Animal <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"Invertebrates"</span><span class="token punctuation">,</span> <span class="token comment">// 属性默认值</span>  <span class="token function-variable function">displayType</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 用于显示 type 属性的方法</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 创建一种新的动物——animal1</span><span class="token keyword">var</span> animal1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">;</span>animal1<span class="token punctuation">.</span><span class="token function">displayType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output:Invertebrates</span><span class="token comment">// 创建一种新的动物——Fishes</span><span class="token keyword">var</span> fish <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">;</span>fish<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"Fishes"</span><span class="token punctuation">;</span>fish<span class="token punctuation">.</span><span class="token function">displayType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output:Fishes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）使用 ECMAScript 2015 提供的关键字：class, constructor, static, extends, super。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Polygon</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">height<span class="token punctuation">,</span> width</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Polygon</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">sideLength</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>sideLength<span class="token punctuation">,</span> sideLength<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">get</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">set</span> <span class="token function">sideLength</span><span class="token punctuation">(</span><span class="token parameter">newLength</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> newLength<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> newLength<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> square <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>访问方式：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1. 点运算符访问</span>objectName<span class="token punctuation">.</span>propertyName<span class="token comment">// 2. 通过方括号访问</span>objectName<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>枚举对象的所有属性：</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in">for…in</a> 循环<br>该方法<font color="orange">以任意顺序迭代一个对象的除 Symbol 以外的可枚举属性，包括继承的可枚举属性</font>。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys">Object.keys(obj)</a><br>该方法返回对象 <code>obj</code> <strong>自身</strong>包含（不包括原型中）的所有<font color="orange">可枚举属性</font>的名称的数组。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames">Object.getOwnPropertyNames(obj)</a><br>该方法返回对象 <code>obj</code> 自身包含（不包括原型中）的<font color="orange">所有属性 (无论是否可枚举)</font> 的名称的数组。</li></ul><p><strong>删除一个<font color="red">不是继承而来</font>的属性：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//Creates a new object, myobj, with two properties, a and b.</span><span class="token keyword">var</span> myobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">;</span>myobj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>myobj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">//Removes the a property, leaving myobj with only the b property.</span><span class="token keyword">delete</span> myobj<span class="token punctuation">.</span>a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><blockquote><ol><li>原型和原型链；</li><li>继承方式</li><li>new</li></ol></blockquote><h4 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h4><p>【MDN】</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">继承和原型链</a></li></ul><p>JavaScript 是一种基于原型而不是基于类的基于对象 (object-based) 语言。当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（object）都有一个私有属性（称之为<code>__proto__</code> ）指向它的构造函数的原型对象（<strong>prototype</strong>）。该原型对象也有一个自己的原型对象（<code>__proto__</code>），层层向上直到一个对象的原型对象为 <code>null</code>。根据定义，<code>null</code> 没有原型，并作为这个<strong>原型链</strong>中的最后一个环节。</p><p align="center" style="font-weight: bold; font-size: 1.3rem">基于类（Java）和基于原型（JavaScript）的对象系统的比较</p><table><thead><tr><th align="left">基于类的（Java）</th><th align="left">基于原型的（JavaScript）</th></tr></thead><tbody><tr><td align="left">类和实例是不同的事物。</td><td align="left">所有对象均为实例。</td></tr><tr><td align="left">通过类定义来定义类；通过构造器方法来实例化类。</td><td align="left">通过构造器函数来定义和创建一组对象。</td></tr><tr><td align="left">通过 <code>new</code> 操作符创建单个对象。</td><td align="left">相同。</td></tr><tr><td align="left">通过类定义来定义现存类的子类，从而构建对象的层级结构。</td><td align="left">指定一个对象作为原型并且与构造函数一起构建对象的层级结构</td></tr><tr><td align="left">遵循类链继承属性。</td><td align="left">遵循原型链继承属性。</td></tr><tr><td align="left">类定义指定类的所有实例的<strong>所有</strong>属性。无法在运行时动态添加属性。</td><td align="left">构造器函数或原型指定实例的<strong>初始</strong>属性集。允许动态地向单个的对象或者整个对象集中添加或移除属性。</td></tr></tbody></table><p>每个对象都有一个 <code>__proto__</code> 对象属性（除了 <code>Object</code>）；每个函数都有一个 <code>prototype</code> 对象属性。特殊的 <code>__proto__</code> 属性是在构建对象时设置的，设置为构造器的 <code>prototype</code> 属性的值。</p><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220410174017.png" alt="image-20220304172647086"></p><p><strong>原型关系：</strong></p><ul><li>每个构造函数都有显式原型对象 <code>prototype</code></li><li>每个实例都有隐式原型属性 <code>__proto__</code></li><li>实例的 <code>__proto__</code> 指向对应构造函数的 <code>prototype</code></li></ul><p>‌ <strong>原型:</strong> &nbsp;在 JS 中，每当定义一个对象（函数也是对象）时，对象中都会包含一些预定义的属性。其中每个<code>函数对象</code>都有一个<code>prototype</code>&nbsp;属性，这个属性指向函数的<code>原型对象</code>。</p><p><strong>原型链：</strong>函数的原型对象的 <code>constructor</code> 默认指向函数本身，原型对象除了有原型属性外，为了实现继承，还有一个原型链指针 <code>__proto__</code>，该指针是指向上一层的原型对象，而上一层的原型对象的结构依然类似。因此可以利用 <code>__proto__</code> 一直指向 Object 的原型对象上，而 Object 原型对象用 <code>Object.prototype.__ proto__ = null</code> 表示原型链顶端。如此形成了 js 的原型链继承。同时所有的 js 对象都有 Object 的基本方法。</p><p><strong>特点:</strong> &nbsp;<code>JavaScript</code> 对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。</p><p align="center" style="font-weight: bold; font-size:1.3rem;">4个拓展原型链的方法</p><table><thead><tr><th align="center">名称</th><th align="center">例子</th><th align="center">优势</th><th align="center">缺陷</th></tr></thead><tbody><tr><td align="center">New</td><td align="center">1</td><td align="center">支持目前以及所有可想象到的浏览器 (IE5.5 都可以使用)。 ==这种方法非常快，非常符合标准，并且充分利用 JIT 优化==。</td><td align="center">为使用此方法，必须对相关函数初始化。 在初始化过程中，构造函数可以存储每个对象必须生成的唯一信息。但是，这种唯一信息只生成一次，可能会带来潜在的问题。此外，构造函数的初始化，可能会将不需要的方法放在对象上。然而，如果你只在自己的代码中使用，你也清楚（或有通过注释等写明）各段代码在做什么，这些在大体上都不是问题（事实上，通常是有益处的）。</td></tr><tr><td align="center">Object.create</td><td align="center">2</td><td align="center">支持当前所有非微软版本或者 IE9 以上版本的浏览器。允许一次性地直接设置 _<em>proto</em>_ 属性，以便浏览器能更好地优化对象。同时允许通过 Object.create(null) 来创建一个没有原型的对象。</td><td align="center">不支持 IE8 以下的版本。然而，随着微软不再对系统中运行的旧版本浏览器提供支持，这将不是在大多数应用中的主要问题。 另外，这个慢对象初始化在使用第二个参数的时候有可能成为一个性能黑洞，因为每个对象的描述符属性都有自己的描述对象。当以对象的格式处理成百上千的对象描述的时候，可能会造成严重的性能问题。</td></tr><tr><td align="center">Object.setPrototypeOf</td><td align="center">3</td><td align="center">支持所有现代浏览器和微软 IE9+ 浏览器。允许动态操作对象的原型，甚至能强制给通过 Object.create(null) 创建出来的没有原型的对象添加一个原型。</td><td align="center">==这个方式表现并不好，应该被弃用==。如果你在生产环境中使用这个方法，那么快速运行 Javascript 就是不可能的，<u>因为许多浏览器优化了原型，尝试在调用实例之前猜测方法在内存中的位置，但是动态设置原型干扰了所有的优化，甚至可能使浏览器为了运行成功，使用完全未经优化的代码进行重编译。</u> 不支持 IE8 及以下的浏览器版本。</td></tr><tr><td align="center">_<em>proto</em>_</td><td align="center">4</td><td align="center">支持所有现代非微软版本以及 IE11 以上版本的浏览器。将 _<em>proto</em>_ 设置为非对象的值会静默失败，并不会抛出错误。</td><td align="center">应该完全将其抛弃因为这个行为完全不具备性能可言。 如果你在生产环境中使用这个方法，那么快速运行 Javascript 就是不可能的，因为许多浏览器优化了原型，尝试在调用实例之前猜测方法在内存中的位置，但是动态设置原型干扰了所有的优化，甚至可能使浏览器为了运行成功，使用完全未经优化的代码进行重编译。不支持 IE10 及以下的浏览器版本。</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 例子1 */</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> foo<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token literal-property property">foo_prop</span><span class="token operator">:</span> <span class="token string">"foo val"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">var</span> proto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">;</span> proto<span class="token punctuation">.</span>bar_prop <span class="token operator">=</span> <span class="token string">"bar val"</span><span class="token punctuation">;</span> bar<span class="token punctuation">.</span>prototype <span class="token operator">=</span> proto<span class="token punctuation">;</span> <span class="token keyword">var</span> inst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bar</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inst<span class="token punctuation">.</span>foo_prop<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inst<span class="token punctuation">.</span>bar_prop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 例子2 */</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> foo<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token literal-property property">foo_prop</span><span class="token operator">:</span> <span class="token string">"foo val"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">var</span> proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>   foo<span class="token punctuation">.</span>prototype <span class="token punctuation">)</span><span class="token punctuation">;</span> proto<span class="token punctuation">.</span>bar_prop <span class="token operator">=</span> <span class="token string">"bar val"</span><span class="token punctuation">;</span> bar<span class="token punctuation">.</span>prototype <span class="token operator">=</span> proto<span class="token punctuation">;</span> <span class="token keyword">var</span> inst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bar</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inst<span class="token punctuation">.</span>foo_prop<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inst<span class="token punctuation">.</span>bar_prop<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 例子3*/</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> foo<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token literal-property property">foo_prop</span><span class="token operator">:</span> <span class="token string">"foo val"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">var</span> proto <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token literal-property property">bar_prop</span><span class="token operator">:</span> <span class="token string">"bar val"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>   proto<span class="token punctuation">,</span> foo<span class="token punctuation">.</span>prototype <span class="token punctuation">)</span><span class="token punctuation">;</span> bar<span class="token punctuation">.</span>prototype <span class="token operator">=</span> proto<span class="token punctuation">;</span> <span class="token keyword">var</span> inst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bar</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inst<span class="token punctuation">.</span>foo_prop<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inst<span class="token punctuation">.</span>bar_prop<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 例子4*/</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> foo<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token literal-property property">foo_prop</span><span class="token operator">:</span> <span class="token string">"foo val"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">var</span> proto <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token literal-property property">bar_prop</span><span class="token operator">:</span> <span class="token string">"bar val"</span><span class="token punctuation">,</span>   <span class="token literal-property property">__proto__</span><span class="token operator">:</span> foo<span class="token punctuation">.</span>prototype <span class="token punctuation">}</span><span class="token punctuation">;</span> bar<span class="token punctuation">.</span>prototype <span class="token operator">=</span> proto<span class="token punctuation">;</span> <span class="token keyword">var</span> inst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bar</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inst<span class="token punctuation">.</span>foo_prop<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inst<span class="token punctuation">.</span>bar_prop<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> inst <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token literal-property property">__proto__</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token literal-property property">bar_prop</span><span class="token operator">:</span> <span class="token string">"bar val"</span><span class="token punctuation">,</span>     <span class="token literal-property property">__proto__</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token literal-property property">foo_prop</span><span class="token operator">:</span> <span class="token string">"foo val"</span><span class="token punctuation">,</span>       <span class="token literal-property property">__proto__</span><span class="token operator">:</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inst<span class="token punctuation">.</span>foo_prop<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inst<span class="token punctuation">.</span>bar_prop<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><blockquote><ol><li>ES5: <ul><li>组合继承</li><li>原型式继承</li><li>寄生式继承</li><li>寄生组合式继承（最优）</li></ul></li><li>ES6：类，extends关键字（底层实现也是通过原型和构造函数实现）</li></ol></blockquote><h5 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h5><p><em>原型链+盗用构造函数</em>，使用原型链继承原型上的属性和方法，通过盗用构造函数继承实例属性。</p><p>缺点：存在效率问题，主要是父类构造函数始终会被调用两次。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 父构造函数 */</span><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 子构造函数 */</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 盗用构造函数---继承属性</span>  <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第二次调用SuperType()</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 原型链继承---继承方法</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一次调用SuperType()---这里可以改进</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span> instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Greg"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>instance2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance2<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 输出[ 'red', 'blue', 'green', 'black' ]Nicholas29[ 'red', 'blue', 'green' ]Greg27*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h5><p><em>Object.create</em>，在已有对象的基础上再创建一个新的对象，这个对象是增强后的对象，即添加了新的属性或方法；</p><p>场景：适合不需要单独创建构造函数，但仍然需要在对象间共享信息的场合。</p><p>缺点：<u>引用类型的属性继承存在问题，不同对象共享同一个引用类型的属性</u>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span> <span class="token string">"Court"</span><span class="token punctuation">,</span> <span class="token string">"Van"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> anotherPerson <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>anotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Greg"</span><span class="token punctuation">;</span>anotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Rob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> yetAnotherPerson <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>yetAnotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Linda"</span><span class="token punctuation">;</span>yetAnotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Barbie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>friends<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> anotherPerson2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">25</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anotherPerson2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** 输出 * [ 'Shelby', 'Court', 'Van', 'Rob', 'Barbie' ] * 25 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h5><p><em>（在已有对象的基础上）</em>与原型式继承比较接近。<u>创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象。</u></p><p>场景：适合主要关注对象，而不在乎类型和构造函数的场景。</p><p>缺点：<u>引用类型的属性继承有问题</u>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> clone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 original 的引用</span>  clone<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 以某种方式增强这个对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> clone<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span> <span class="token string">"Court"</span><span class="token punctuation">,</span> <span class="token string">"Van"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> anotherPerson <span class="token operator">=</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>anotherPerson<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**输出 * hi */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h5><p>不通过调用父类构造函数给子类原型赋值，而是寄生式继承父类原型的一个副本。</p><p>==寄生式组合继承是引用类型继承的最佳模式。==</p><p><strong>优点：</strong></p><ol><li>避免了子类原型上拥有不必要的属性，效率更高；</li><li>原型链保持不变，<code>instanceof</code> 操作符和 <code>isPrototypeOf()</code> 方法有效。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 寄生式继承来继承父类原型 */</span><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">subType<span class="token punctuation">,</span> superType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span>superType<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建对象---取得父类原型的副本</span>  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subType<span class="token punctuation">;</span>                    <span class="token comment">// 增强对象---解决重写原型导致默认constructor丢失问题---</span>  subType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype<span class="token punctuation">;</span>                      <span class="token comment">// 赋值对象---子类的原型对象指向父类的原型对象</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 继承父类的属性</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">inheritPrototype</span><span class="token punctuation">(</span>SubType<span class="token punctuation">,</span> SuperType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 继承父类原型上的方法和属性</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> subType1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subType1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>subType1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>subType1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>subType1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subType1<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> subType2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>subType2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>subType2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>subType2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subType2<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**输出test1[ 'red', 'blue', 'green', 'pink' ]test120test2[ 'red', 'blue', 'green' ]test221*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="extends关键字"><a href="#extends关键字" class="headerlink" title="extends关键字"></a>extends关键字</h5><hr><h4 id="new运算符的实现机制"><a href="#new运算符的实现机制" class="headerlink" title="new运算符的实现机制"></a>new运算符的实现机制</h4><ol><li> 首先创建了一个新的普通<code>空对象</code></li><li> <code>设置原型</code>，将这个普通对象中的 <code>__proto__</code> 属性设置为构造函数的 <code>prototype</code>。</li><li> 让构造函数的 <code>this</code> 指向这个普通对象，执行构造函数的代码（为这个新对象添加属性）</li><li> 如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的对象。</li></ol><p>当执行：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>JavaScript 实际执行的是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token function">Foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>任何函数只要使用 new 操作符调用就是构造函数，而不使用 new 操作符调用的函数就是普通函数。——《JavaScript高级程序设计-第四版》</p></blockquote><p><strong>访问一个对象属性时，JavaScript 的执行步骤：</strong></p><ol><li>检查对象自身是否存在。如果存在，返回值。</li><li>如果本地值不存在，检查原型链（通过 <code>__proto__</code> 属性）。</li><li>如果原型链中的某个对象具有指定属性，则返回值。</li><li>如果直到找到原型链的顶端 null 也没找到这个属性，则判定该对象没有该属性，返回 undefined。</li></ol><hr><h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h3><p>如果要判断一个运行中的函数的 this 绑定，就需要找到这个函数的直接调用位置。找到之后就可以顺序应用下面这四条规则来判断 this 的绑定对象：</p><ol><li>由 new 调用？绑定到新创建的对象。</li><li>由 call 或 apply（或 bind） 调用？绑定到指定的对象。</li><li>由上下文对象调用？绑定到那个上下文对象。</li><li>默认：在严格模式下绑定到 undefined，否则绑定到全局对象。</li></ol><div class="admonition warning"><p class="admonition-title">注意</p><p>有些调用可能无意中使用默认绑定规则。如果想“更安全”地忽略 this 绑定，你可以使用一个 DMZ（demilitarized zone，非军事区）对象，如<code>tmp=Object.create(null)</code>，以保护全局对象。</p></div><p>ES6 中的箭头函数不会使用以上四条标准的绑定规则，而是根据当前的词法作用域来决定 this，即箭头函数会继承外层函数调用的 this 绑定（无论 this 绑定到什么）。这其实和 ES6 之前代码中的 <code>self = this</code> 机制一样。</p><h4 id="绑定的例外"><a href="#绑定的例外" class="headerlink" title="绑定的例外"></a>绑定的例外</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实际应用的是默认绑定</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="this-指向分哪几类情况？"><a href="#this-指向分哪几类情况？" class="headerlink" title="this 指向分哪几类情况？"></a>this 指向分哪几类情况？</h4><ul><li>全局环境下调用 this（全局对象）</li><li>函数作为对象方法被调用（上下文对象）</li><li>通过 call、apply 和 bind 方法显式指定 this（显式绑定）</li><li>作为构造函数调用（new 绑定，指向创建的对象实例）</li></ul><h4 id="call-apply-bind-的区别"><a href="#call-apply-bind-的区别" class="headerlink" title="call/apply/bind 的区别"></a>call/apply/bind 的区别</h4><p>相同：</p><p>1、都是用来改变函数的 this 对象的指向的。</p><p>2、第一个参数都是 this 要指向的对象。</p><p>3、都可以利用后续参数传参。</p><p>不同：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"obj"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>apply 和 call 传入的参数列表形式不同。apply 接收参数数组，call 接收一串参数列表，两者都是立即执行。</p><p>bind：语法和 call 一模一样，但不是立即执行，返回改变 this 指向后的函数，bind 不兼容IE6~8；</p><p>总结：基于 Function.prototype 上的 <code> apply 、 call 和 bind</code> 调用模式，这三个方法都可以显式的指定调用函数的 this 指向。<code>apply</code>接收参数的是数组，<code>call</code>接受参数列表，<code>bind</code> 方法通过传入一个对象，返回一个 <code>this</code> 绑定了传入对象的新函数。这个函数的 <code>this</code> 指向除了使用 <code>new </code> 时会被改变，其他情况下都不会改变。若为空默认是指向全局对象 window。</p><p>参考：👉 <a href="https://blog.csdn.net/hexinyu_1022/article/details/82795517">call、apply、bind三者的用法和区别</a></p><hr><h2 id="异步-JavaScript"><a href="#异步-JavaScript" class="headerlink" title="异步 JavaScript"></a>异步 JavaScript</h2><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><p>Gmail 开发人员发现 IE 里面有个 XMLHTTPRequest 对象来请求数据时，可以实现<strong>无刷新数据请求</strong>，所以使用这个特性，进行网络数据请求，这就是 Ajax 的由来。</p><p>Ajax 不是一个单词，他的全称是 Asynchronous JavaScript and XML，就是<strong>异步的 JavaScript 和 XML</strong>，它是一套用于创建快速动态网页的技术标准，使用步骤如下：</p><ol><li>创建异步 XMLHttpRequest 对象 <code>const httpRequest = new XMLHttpRequest()</code>；</li><li>设置请求参数，包括请求的方法和URL等 <code>httpRequest.open('GET',url)</code>（第三个参数可以设置这个请求是异步还是同步的，默认是异步请求）；</li><li>发送请求  <code>httpRequest.send()</code>；</li><li>注册事件，事件状态变更会及时响应监听  ；</li><li>在监听里面获取并处理返回数据；</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">httpRequest<span class="token punctuation">.</span><span class="token function-variable function">onReadyStateChange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>readyState<span class="token operator">===</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>status<span class="token operator">&gt;=</span><span class="token number">200</span><span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>status<span class="token operator">&lt;</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>httpRequest <span class="token punctuation">.</span>response<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以 Ajax 的核心就是 <code>XMLHttpRequest</code> 对象，这是一个非常早的实现方法，也是兼容性最好的，已经成为了浏览器标准，虽然我们现在都使用其它的 API 规范，但对象名字暂时还是用 XML 命名。</p><h3 id="事件处理函数和回调函数"><a href="#事件处理函数和回调函数" class="headerlink" title="事件处理函数和回调函数"></a>事件处理函数和回调函数</h3><p>事件处理函数是异步执行的，只有在事件发生时被调用；事件处理程序是一种特殊类型的回调函数。而回调函数则是一个被传递到另一个函数中的会在适当的时候被调用的函数。回调函数曾经是 JavaScript 中实现异步函数的主要方式。然而，当回调函数本身需要调用其他同样接受回调函数的函数时，基于回调的代码会变得难以理解，即“回调地狱”。</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a></strong> 是现代 JavaScript 中异步编程的基础，是一个由异步函数返回的可以向我们指示当前操作所处的状态的对象。在 Promise 返回给调用者的时候，操作往往还没有完成，但 Promise 对象可以让我们操作最终完成时对其进行处理（无论成功还是失败）。Promise 使异步操作可以链式调用，避免了回调地狱，使代码逻辑更加清晰。</p><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/fetch">fetch()</a> 是一个现代的、基于 Promise 的、用于替代 <code>XMLHttpRequest</code> 的方法。</p><p>fetch 不是 XMLHttpRequest 对象，它是原生的 js 对象，也就是说，它不依赖浏览器。我们主要需要了解下 fetch 和 ajax 的本质区别：</p><ol><li>fetch 返回的是 Promise，所以如果 HTTP 状态码是 404 之类的，fetch 也是成功返回的，只有在网络连接错误的情况下，才会 reject；</li><li>fetch 不发送 cookies；</li></ol><p>fetch 的请求写法会比 Ajax 简单许多，但我想，最主要的问题是，无法区分 HTTP 状态码了，这个在编程时还是比较常用的，所以我们目前还是使用 axios 比较多，而很少使用 fetch。</p><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>axios 是一个基于 Promise 的 HTTP 库，可以用在浏览器和 node.js 中，在服务端使用 node.js 的 <code>http</code> 模块，在浏览器中使用 XMLHttpRequest 对象。你可以认为它是一个方便的封装库，除了基础请求数据，它还增加了如下功能：</p><ol><li>对 Promise API 的支持；</li><li>支持请求拦截和响应、转换请求数据和响应数据、取消请求；</li><li>可以自动转换 JSON 数据；</li><li>客户端支持防御 <a href="https://fe.ecool.fun/topic/a1c9963f-fb40-4d8a-aa47-e5cca8c885b7?orderBy=updateTime&amp;order=desc&amp;titleKey=CSRF">XSRF</a>（Cross-site request forgery-CSRF-跨站请求伪造）；</li></ol><h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><p>JavaScript 的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript 的主要用途是与用户互动，以及操作 DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定 JavaScript 同时有两个线程，一个线程在某个 DOM 节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？所以，为了避免复杂性，从一诞生，JavaScript 就是单线程。</p><p>为了利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制，且不得操作 DOM。所以，这个新标准并没有改变 JavaScript 单线程的本质。</p><h3 id="wokers"><a href="#wokers" class="headerlink" title="wokers"></a>wokers</h3><p>Workers 给了你在不同线程中运行某些任务的能力，因此你可以启动任务，然后继续其他的处理（例如处理用户操作）。但是这是要付出代价的。对于多线程代码，你永远不知道你的线程什么时候将会被挂起，其他线程将会得到运行的机会。因此，如果两个线程都可以访问相同的变量，那么变量就有可能在任何时候发生意外的变化，这将导致很难发现的 Bug。为了避免 Web 中的这些问题，你的主代码和你的 worker 代码永远不能直接访问彼此的变量。Workers 和主代码运行在完全分离的环境中，只有通过相互发送消息来进行交互。特别是，这意味着 workers 不能访问 DOM（窗口、文档、页面元素等等）。</p><p>有三种不同类型的 workers：</p><ul><li>dedicated workers(由一个脚本实例使用)</li><li>shared workers(可以由运行在不同窗口中的多个不同脚本共享)</li><li>service workers(行为就像代理服务器，缓存资源以便于 web 应用程序可以在用户离线时工作。他们是<a href="https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps">渐进式 Web 应用</a>的关键组件)</li></ul><p>web workers，它使得 web 应用能够离线加载任务到单独的线程中。主线程和 worker 不直接共享任何变量，但是可以通过发送消息来进行通信，这些消息作为 <code>message</code> 事件被 对方接受。Workers 尽管不能访问主应用程序能访问的所有 API，尤其是不能访问 DOM，但是可以作为使主应用程序保持响应的一个有效的方式。</p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>如果 js 不存在异步，只能自上而下执行，那么当上一个任务执行很长时间后，下面的任务就都会阻塞。对用户来说，页面就卡死了，这样用户体验较差。JS 主要是通过<strong>事件循环</strong>来实现异步的。</p><hr><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="事件捕获和冒泡"><a href="#事件捕获和冒泡" class="headerlink" title="事件捕获和冒泡"></a>事件捕获和冒泡</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Building_blocks/Events">MDN</a></p><p> <img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220728102415.png" alt="事件捕获和冒泡示意图（来源：MDN)"></p><p>当一个事件发生在具有父元素的元素上 (例如，在我们的例子中是<code>&lt;video&gt;</code>元素) 时，现代浏览器运行两个不同的阶段 - 捕获阶段和冒泡阶段。在捕获阶段：</p><ul><li>浏览器检查元素的最外层祖先<code>&lt;html&gt;</code>，是否在捕获阶段中注册了一个<code>onclick</code>事件处理程序，如果是，则运行它。</li><li>然后，它移动到<code>&lt;html&gt;</code>中单击元素的下一个祖先元素，并执行相同的操作，然后是单击元素再下一个祖先元素，依此类推，直到到达实际点击的元素。</li></ul><p>在冒泡阶段，恰恰相反：</p><ul><li>浏览器检查实际点击的元素是否在冒泡阶段中注册了一个<code>onclick</code>事件处理程序，如果是，则运行它</li><li>然后它移动到下一个直接的祖先元素，并做同样的事情，然后是下一个，等等，直到它到达<code>&lt;html&gt;</code>元素。</li></ul><p>在现代浏览器中，默认情况下，所有事件处理程序都在<strong>冒泡阶段</strong>进行注册。因此，在我们当前的示例中，当您单击视频时，这个单击事件从 <code>&lt;video&gt;</code>元素向外冒泡直到<code>&lt;html&gt;</code>元素。沿着这个事件冒泡线路：</p><ul><li>它发现了<code>video.onclick...</code>事件处理器并且运行它，因此这个视频<code>&lt;video&gt;</code>第一次开始播放。</li><li>接着它发现了（往外冒泡找到的） <code>videoBox.onclick...</code>事件处理器并且运行它，因此这个视频<code>&lt;video&gt;</code>也隐藏起来了。</li></ul><p><strong>阻止事件冒泡</strong></p><p>标准事件对象具有 <code>stopPropagation()</code> 方法，当在事件对象上调用该函数时，它只会让当前事件处理程序运行，但事件不会在<strong>冒泡</strong>链上进一步扩大，因此将不会有更多事件处理器被运行 (不会向上冒泡)。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">video<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  video<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div class="admonition info"><p>默认情况下，所有事件处理程序都是在冒泡阶段注册的，这在大多数情况下更有意义。如果您真的想在捕获阶段注册一个事件，那么您可以通过使用<code>addEventListener()</code>注册您的处理程序，并将可选的第三个属性设置为 true。</p></div><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p><strong>事件委托</strong>是把原本需要绑定给子元素的事件委托给父元素，让父元素负责事件监听。</p><p>因为每绑定一个事件监听器都是有代价的，如果一个父元素有很多的子元素，要给每个子元素都绑定事件，会极大的影响页面的性能。</p><p>因此我们通过事件委托来进行优化。以此来<u>减少内存消耗</u>，和<u>实现动态绑定事件</u>。</p><h4 id="事件委托的原理："><a href="#事件委托的原理：" class="headerlink" title="事件委托的原理："></a>事件委托的原理：</h4><p>事件委托利用的就是<strong>冒泡</strong>的原理。</p><h4 id="事件委托的优点："><a href="#事件委托的优点：" class="headerlink" title="事件委托的优点："></a>事件委托的优点：</h4><p>​    1、减小内存消耗</p><p>​    2、动态绑定事件</p><h4 id="事件委托举例："><a href="#事件委托举例：" class="headerlink" title="事件委托举例："></a>事件委托举例：</h4><p>在 ul 和 li 的例子中：正常情况我们给每一个 li 都会绑定一个监听事件，但是如果这时候 li 是动态渲染的，数据又特别大的时候，每次渲染后（有新增的情况）我们还需要重新来绑定，又繁琐又耗性能；这时候我们可以将绑定事件委托到 li 的父级元素，即 ul。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> ul_dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span>ul_dom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="target-和-currentTarget"><a href="#target-和-currentTarget" class="headerlink" title="target 和 currentTarget"></a>target 和 currentTarget</h4><p>上面代码中我们使用了两种获取目标元素的方式，target 和 currentTarget，那么他们有什么区别呢：</p><ul><li>target 返回触发事件的元素，不一定是绑定事件的元素。</li><li>currentTarget 返回的是绑定事件的元素。</li></ul><h3 id="事件循环（JS-异步任务的执行机制、JavaScript-的执行机制）"><a href="#事件循环（JS-异步任务的执行机制、JavaScript-的执行机制）" class="headerlink" title="事件循环（JS 异步任务的执行机制、JavaScript 的执行机制）"></a>事件循环（JS 异步任务的执行机制、JavaScript 的执行机制）</h3><p><a href="https://www.ruanyifeng.com/blog/2014/10/event-loop.html">阮一峰</a></p><p><a href="https://mp.weixin.qq.com/s/ktLWSbkx3L2hWkv2ZK6Gmw">JavaScript 事件循环：从起源到浏览器再到 Node.js</a></p><p>JavaScript 是单线程的，这意味着任务的执行需要排队，如果有耗时特别长的任务在执行，那么后一个任务就得等待上一个任务执行完。这样的执行效率是很低的，没有充分利用 CPU。于是 JavaScript 将任务分为两种：同步任务（synchronous）和异步任务（asynchronous）。同步任务指的是只在主线程上执行的任务，只有前一个任务执行完毕，后一个任务才能执行；异步任务指的是，不进入主线程而进入“任务队列（task queue）”的任务，只有“任务队列”通知主线程某个异步任务可以执行了，该任务才进入主线程执行。</p><p>具体来说事件的执行机制如下：</p><p>（1）所有同步任务都在主线程上执行，形成一个<a href="https://www.ruanyifeng.com/blog/2013/11/stack.html">执行栈</a>（execution context stack）。</p><p>（2）主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。</p><p>（3）一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件，主线程执行事件对应的回调函数，即执行异步任务。</p><p>（4）主线程不断重复上面的第三步。</p><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220723102716.jpeg" alt="任务队列"></p><p>只要主线程空了，就会去读取”任务队列”，这就是 JavaScript 的运行机制。这个过程会不断重复。主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为 <strong>Event Loop（事件循环）</strong>。</p><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220723103134.png" alt="Event Loop"></p><p>上图中，主线程运行的时候，产生堆（heap）和栈（stack），栈中的代码调用各种外部 API，它们在”任务队列”中加入各种事件（click，load，done）。只要栈中的代码执行完毕，主线程就会去读取”任务队列”，依次执行那些事件所对应的回调函数。</p><p>“任务队列”是一个事件的队列（也可以理解成消息的队列），IO 设备完成一项任务，就在”任务队列”中添加一个事件，表示相关的异步任务可以进入”执行栈”了。主线程读取”任务队列”，就是读取里面有哪些事件。</p><p>“任务队列”中的事件，除了 IO 设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入”任务队列”，等待主线程读取。</p><p>所谓”回调函数”（callback），就是那些会被主线程挂起来的代码。==异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数==。</p><hr><p>“任务队列”是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，”任务队列”上第一位的事件就自动进入主线程。但是，由于存在后文提到的”定时器”功能，<u>主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程</u>。</p><p>setTimeout(function, delay) 只是将事件插入到任务队列中，必须等到执行栈清空且任务队列中排在 setTimeout 事件之前的事件执行完，才会执行 setTimeout 的事件，因此 delay 表示至少等到 delay 时间后才执行 function，不能保证 function 在 delay  时间间隔内一定会执行。</p><hr><p><strong>（每一个宏任务和宏任务的微任务执行完后都会对页面 UI 进行渲染。）</strong></p><p>​    <img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220410225821.webp" alt="事件循环流程"></p><p>浏览器中的任务源（task）:</p><ul><li><code>宏任务(macrotask)</code>：<br>  宿主环境提供的，比如浏览器<br>  setTimeout、setInterval、setImmediate（只兼容 IE）、script、requestAnimationFrame、postMessage、messageChannel（web worker 用的 API）;</li><li><code>微任务(microtask)</code>：<br>  语言本身提供的，比如 promise.then、MutationObserver（浏览器提供）、process.nextTick（Node.js 环境）；</li></ul><p>传送门 ☞ <a href="https://juejin.cn/post/7001881781125251086"># 宏任务和微任务</a></p><h4 id="Node-环境中的事件循环（Event-Loop"><a href="#Node-环境中的事件循环（Event-Loop" class="headerlink" title="Node 环境中的事件循环（Event Loop)"></a>Node 环境中的事件循环（Event Loop)</h4><p><a href="https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/">Node.js</a></p><p><code>Node</code> 是基于 V8 引擎的运行在服务端的 <code>JavaScript</code> 运行环境，在处理高并发、I/O 密集（文件操作、网络操作、数据库操作等）场景有明显的优势。虽然用到也是 V8 引擎，但由于服务目的和环境不同，导致了它的 API 与原生 JS 有些区别，其 Event Loop 还要处理一些 I/O，比如新的网络连接等，所以 Node 的 Event Loop（事件循环机制）与浏览器是不太一样的。</p><p><a href="https://libuv.org/">libuv</a>（实现 Node.js 事件循环和平台的所有异步行为的 C 函数库）。</p><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220724100848.png" alt="Node.js"></p><p>执行的任务分为两种：同步任务和异步任务。同步任务总是比异步任务先执行。异步任务又分为两种：<u>追加在<strong>本次循环</strong>的异步任务</u>和<u>追加在<strong>次轮循环</strong>的异步任务</u>。这里的循环就指的是“事件循环（Event Loop）”。<strong>本轮循环一定比次轮循环先执行</strong>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 下面两行，次轮循环执行</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 下面两行，本轮循环执行</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 同步任务</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出：5 3 4 1 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本轮循环的执行顺序：</p><ol><li>同步任务；</li><li>process.nextTick() — ==nextTickQueue==</li><li>微任务 — ==microTaskQueue==</li></ol><p>Node.js 在进入事件循环之前会先完成下面的事情：</p><ul><li>执行同步任务</li><li>发出异步请求（调用一些异步的 API）</li><li>规定定时器生效的时间 （调度定时器）</li><li>执行 process.nextTick() 等等</li></ul><p>执行顺序如下：</p><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220817093145.png" alt="Node.js 事件循环的流程"></p><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220816123511.jpeg" alt="Node.js 事件循环"> </p><ul><li><p><code>timers(定时器)</code>: 计时器，执行 setTimeout 和 setInterval 的回调</p><ul><li>  这个是定时器阶段，处理 <code>setTimeout()</code>和 <code>setInterval</code> 的回调函数。进入这个阶段后，主线程会检查一下当前时间，是否满足定时器的条件。如果满足就执行回调函数，否则就离开这个阶段。</li><li>  计时器指定 <em>可以执行所提供回调</em> 的 <strong>阈值</strong>，而不是用户希望其执行的确切时间。在指定的一段时间间隔后， 计时器回调将被尽可能早地运行。但是，操作系统调度或其它正在运行的回调可能会延迟它们。</li></ul></li><li><p><code>pending callbacks(待定回调)</code>: 执行延迟到下一个循环迭代的 I/O 回调</p><ul><li><p>此阶段对某些系统操作（如 TCP 错误类型）执行回调。例如，如果 TCP 套接字在尝试连接时接收到 <code>ECONNREFUSED</code>，则某些 *nix 的系统希望等待报告错误。这将被排队以在 <strong>挂起的回调</strong> 阶段执行。（官网的描述）</p></li><li><p>除了以下操作的回调函数，其他的回调函数都在这个阶段执行。<font color="red">（阮一峰的描述—有待斟酌）</font></p><blockquote><ul><li><code>setTimeout()</code>和<code>setInterval()</code>的回调函数</li><li><code>setImmediate()</code>的回调函数</li><li>用于关闭请求的回调函数，比如<code>socket.on('close', ...)</code></li></ul></blockquote></li></ul></li><li><p><code>idle, prepare</code>: 队列的移动，仅系统内部使用</p></li><li><p><code>poll(轮询)</code>: 检索新的 I/O 事件；执行与 I/O 相关的回调。事实上除了其他几个阶段处理的事情，其他几乎所有的异步都在这个阶段处理。</p><ul><li><p>这个阶段是轮询时间，用于等待还未返回的 I/O 事件，比如服务器的回应、用户移动鼠标等等。</p><p>  这个阶段的时间会比较长。如果没有其他异步任务要处理（比如到期的定时器），会一直停留在这个阶段，等待 I/O 请求返回结果。</p></li><li><p><strong>轮询</strong> 阶段有两个重要的功能：</p><ol><li>计算应该阻塞和轮询 I/O 的时间。</li><li>然后，处理 <strong>轮询</strong> 队列里的事件。</li></ol></li><li><p>当事件循环进入 <strong>轮询</strong> 阶段且 <em>没有被调度的计时器时</em> ，将发生以下两种情况之一：</p><ul><li><em>如果 <strong>轮询</strong> 队列 <strong>不是空的</strong></em> ，事件循环将循环访问回调队列并同步执行它们，直到队列已用尽，或者达到了与系统相关的硬性限制。</li><li><em>如果 <strong>轮询</strong> 队列 <strong>是空的</strong></em> ，还有两件事发生：<ul><li>如果脚本被 <code>setImmediate()</code> 调度，则事件循环将结束 <strong>轮询</strong> 阶段，并继续 <strong>check</strong> 阶段以执行那些被调度的脚本。</li><li>如果脚本 <strong>未被</strong> <code>setImmediate()</code>调度，则事件循环将等待回调被添加到队列中，然后立即执行。</li></ul></li></ul></li><li><p>  一旦 <strong>轮询</strong> 队列为空，事件循环将检查 _已达到时间阈值的计时器_。如果一个或多个计时器已准备就绪，则事件循环将绕回计时器阶段以执行这些计时器的回调。</p></li></ul></li><li><p><code>check(检测)</code>: 执行 <code>setImmediate</code> 回调（<code>setImmediate</code> 在这里执行）。</p><ul><li>  通常，在执行代码时，事件循环最终会命中轮询阶段，在那等待传入连接、请求等。但是，如果回调已使用 <code>setImmediate()</code>调度过，并且轮询阶段变为空闲状态，则它将结束此阶段，并继续到检查阶段而不是继续等待轮询事件。</li></ul></li><li><p><code>close callbacks(关闭的回调函数)</code>: 执行 <code>close</code> 事件的 <code>callback</code>，一些关闭的回调函数，如：socket.on(‘close’, …)</p><ul><li>  如果套接字或处理函数突然关闭（例如 <code>socket.destroy()</code>），则<code>'close'</code> 事件将在这个阶段发出。否则它将通过 <code>process.nextTick()</code> 发出。</li></ul></li></ul><h2 id="setImmediate-对比-setTimeout"><a href="#setImmediate-对比-setTimeout" class="headerlink" title="setImmediate() 对比 setTimeout()"></a><code>setImmediate()</code> 对比 <code>setTimeout()</code></h2><p><code>setImmediate()</code> 和 <code>setTimeout()</code> 很类似，但是基于被调用的时机，他们也有不同表现。</p><ul><li><code>setImmediate()</code> 设计为一旦在当前 <strong>轮询</strong> 阶段完成， 就执行脚本。</li><li><code>setTimeout()</code> 在最小阈值（ms 单位）过后运行脚本。</li></ul><p>执行计时器的顺序将根据调用它们的上下文而异。如果二者都从主模块内调用，则计时器将受进程性能的约束（这可能会受到计算机上其他正在运行应用程序的影响）。</p><p>如果运行以下不在 I/O 周期（即主模块）内的脚本，则执行两个计时器的顺序是非确定性的，因为它受进程性能的约束。但是，如果你把这两个函数放入一个 I/O 循环内调用，setImmediate 总是被优先调用。</p><p><strong>总结：</strong>使用 <code>setImmediate()</code> 相对于<code>setTimeout()</code> 的主要优势是，如果 <code>setImmediate()</code> 是在 I/O 周期内被调度的，那它将会在其中任何的定时器之前执行，跟这里存在多少个定时器无关。</p><h2 id="process-nextTick-对比-setImmediate"><a href="#process-nextTick-对比-setImmediate" class="headerlink" title="process.nextTick() 对比 setImmediate()"></a><code>process.nextTick()</code> 对比 <code>setImmediate()</code></h2><ul><li><code>process.nextTick()</code> 在同一个阶段立即执行。</li><li><code>setImmediate()</code> 在事件循环的接下来的迭代或 ‘tick’ 上触发。</li></ul><p>Node.js 中提供的两个与“任务队列”相关的方法：<code>process.nextTick</code> 和 <code>setImmediate</code>。</p><p><code>process.nextTick</code> 方法可以在当前”执行栈”的尾部—-下一次 Event Loop（主线程读取”任务队列”）之前—-触发回调函数。也就是说，<font color="red">它指定的任务总是发生在所有异步任务之前</font>。<code>setImmediate</code> 方法则是在当前”任务队列”的尾部添加事件，也就是说，它指定的任务总是在下一次 Event Loop 时执行，这与 setTimeout(fn, 0) 很像。setImmediate 指定的回调函数，总是排在 setTimeout 前面。实际上，这种情况只发生在递归调用的时候。由于 process.nextTick 指定的回调函数是在本次”事件循环”触发，而 setImmediate 指定的是在下次”事件循环”触发，所以很显然，前者总是比后者发生得早，而且执行效率也高（因为不用检查”任务队列”）。</p><hr><h3 id="JS-阻塞-DOM-解析"><a href="#JS-阻塞-DOM-解析" class="headerlink" title="JS 阻塞 DOM 解析"></a>JS 阻塞 DOM 解析</h3><p>因为浏览器无法知道 DOM 树的内容，如果先解析了 DOM，而最后 js 又把 DOM 全部删除了，那么浏览器就白解析了一次，因此需要在 js 执行完后，再解析DOM。</p><p><strong>扩展：</strong></p><p>为什么 css 不会阻塞 DOM 解析，而会阻塞 DOM 渲染？</p><blockquote><p>在浏览器解析过程中，HTML 与 CSS 是并行的，所以不会阻塞 DOM 的解析。然后渲染的时候，渲染树必须结合 DOM 树和 CSS 树，如果 CSS 没有解析完成，那么就无法渲染。</p></blockquote><p>为什么 CSS 会阻塞 JS 的执行？js 会触发页面渲染？</p><blockquote><p>如果 js 想要获取到 DOM 的最新样式，则必须先把对应的 CSS 加载完成后，否则获取的样式可能是错误或者不是最新的。</p></blockquote><p><strong>总结：</strong></p><p>css 不会阻塞 DOM 的解析，但会阻塞 DOM 的渲染。或者说是阻塞渲染树的生成，进而阻塞 DOM 的渲染。</p><p>js 会阻塞 DOM 的解析。</p><p>css 会阻塞 js 的执行。</p><p>浏览器遇到 <code>&lt;script&gt;</code> 标签且没有 <code>defer</code> 或 <code>async</code> 属性时会阻塞页面渲染。</p><h3 id="defer-和-async-的区别"><a href="#defer-和-async-的区别" class="headerlink" title="defer 和 async 的区别"></a>defer 和 async 的区别</h3><p>参考：<a href="https://fe.ecool.fun/topic/2acd6447-af1d-4430-837f-a468b6c76ffe?orderBy=updateTime&amp;order=desc&amp;titleKey=defer">script 标签中， async 和 defer 两个属性有什么用途和区别？- 题目详情 - 前端面试题宝典 (ecool.fun)</a></p><hr><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为<strong>解构（Destructuring）</strong>。</p><h4 id="1、数组的解构赋值"><a href="#1、数组的解构赋值" class="headerlink" title="1、数组的解构赋值"></a>1、数组的解构赋值</h4><p>ES6 之前，为变量赋值，只能直接指定值，需要 let a = 1, let b = 2，在 ES6 中，可以从数组中提取值，按照对应位置，对变量赋值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">//可以按照对应位置对变量赋值，也可以不完全对应</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">//x=1, y=3</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span><span class="token operator">...</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment">// x=1, y=[2,3,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>另一种状态是<strong>不完全解构</strong>,但可以<strong>解构成功</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">//x=1,y=2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然也存在<strong>解构失败</strong>的状态</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">...</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token comment">//x=a, y=undefined, z=[]</span><span class="token comment">//上述y就是赋值不成功，值为undefined</span><span class="token comment">//z为数组，则为空数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但如果右边不是数组，或不是可遍历的结构，那么将会报错，解构失败。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>foo<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//报错，解构失败</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="admonition warning"><p class="admonition-title">注意</p><p>事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</p></div><p><strong>数组解构赋值的默认值</strong></p><p>只有当一个数组成员 <code>===</code> 等于 <code>undefined</code>，默认值才会生效。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>foo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//foo = true</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token comment">//x='a',y='b'</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token comment">// x=1</span><span class="token keyword">let</span><span class="token punctuation">[</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token comment">//x=null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果默认值是一个<strong>表达式</strong>，那么这个表达式是<strong>惰性求值</strong>的，即只有在用到的时候，才会求值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码中，因为 <code>x</code> 能取到值，所以函数 <code>f</code> 根本不会执行。</p><p>默认值可以引用解构赋值的其他变量（惰性的），但该变量必须已经声明。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">//x=1,y=1</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span>x<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">// x=2,y=2</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// x=1; y=2</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token operator">=</span>y<span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// ReferenceError: y is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、对象的解构赋值"><a href="#2、对象的解构赋值" class="headerlink" title="2、对象的解构赋值"></a>2、对象的解构赋值</h4><p>（1）对象的解构赋值与数组的解构赋值类似，不过对象的解构赋值可以是无序的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">'bbb'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>foo <span class="token comment">// "aaa"</span>bar <span class="token comment">// "bbb"</span><span class="token keyword">let</span> <span class="token punctuation">{</span> bar<span class="token punctuation">,</span> foo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">'bbb'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>foo <span class="token comment">// "aaa"</span>bar <span class="token comment">// "bbb"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）如果解构失败，变量的值等于<code>undefined</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">'baz'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>foo <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（3）对象的解构赋值，可以很方便地将<strong>现有对象的方法</strong>，<strong>赋值到某个变量</strong>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> log <span class="token punctuation">}</span> <span class="token operator">=</span> console<span class="token punctuation">;</span><span class="token comment">//将console.log赋值到log变量</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span> <span class="token comment">// hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（4）对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> baz <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">'bbb'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>baz <span class="token comment">// "aaa"</span>foo <span class="token comment">// error: foo is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面代码中，<code>foo</code>是匹配的模式，<code>baz</code>才是变量。真正被赋值的是变量<code>baz</code>，而不是模式<code>foo</code>。</p><p>（5）<u>与数组一样，解构也可以用于嵌套结构的对象。</u></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">'Hello'</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">'World'</span> <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span> p<span class="token punctuation">,</span> <span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token punctuation">{</span> y <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>x <span class="token comment">// "Hello"</span>y <span class="token comment">// "World"</span>p <span class="token comment">// ["Hello", {y: "World"}]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">loc</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">line</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token literal-property property">column</span><span class="token operator">:</span> <span class="token number">5</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span> loc<span class="token punctuation">,</span> <span class="token literal-property property">loc</span><span class="token operator">:</span> <span class="token punctuation">{</span> start <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">loc</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token punctuation">{</span> line <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>line <span class="token comment">// 1</span>loc  <span class="token comment">// Object {start: Object}</span>start <span class="token comment">// Object {line: 1, column: 5}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>嵌套赋值</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> obj<span class="token punctuation">.</span>prop<span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj <span class="token comment">// {prop:123}</span>arr <span class="token comment">// [true]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 报错</span><span class="token keyword">let</span> <span class="token punctuation">{</span><span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span>bar<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">baz</span><span class="token operator">:</span> <span class="token string">'baz'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>对象解构赋值的默认值</strong></p><p>类似数组的默认值（惰性），默认值生效的条件是，对象的属性值严格等于<code>undefined</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token punctuation">{</span>x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//x = 3</span><span class="token keyword">var</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// x=1,y=5</span><span class="token keyword">var</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// y:3</span><span class="token keyword">var</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// y:5</span><span class="token keyword">var</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> msg <span class="token operator">=</span> <span class="token string">'Something went wrong'</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//msg:"Something went wrong</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="admonition info"><p class="admonition-title">补充</p><p>除以上两种解构赋值外，还有<code>字符串的解构赋值</code>、<code>数值和布尔值的解构赋值</code>、<code>函数参数的解构赋值</code>。基本类型（字符串、数值和布尔值）会先转换成对象。</p></div><hr><h3 id="箭头函数（重点）"><a href="#箭头函数（重点）" class="headerlink" title="箭头函数（重点）"></a>箭头函数（重点）</h3><blockquote><p>箭头函数与普通函数的区别</p></blockquote><p>1、this 指向</p><ul><li><p>普通函数的 this 遵循 this 的4条规则；</p></li><li><p>箭头函数没有自己的 this，体内的 this 对象，就是函数定义时所在的作用域中的 this，而不是使用时所在的对象。</p></li></ul><p>2、箭头函数没有原型对象，不可以使用构造函数，也就是不能使用 new 命令。</p><h3 id="var、const-和-let-的区别"><a href="#var、const-和-let-的区别" class="headerlink" title="var、const 和 let 的区别"></a>var、const 和 let 的区别</h3><p>他们的区别主要体现在：</p><p><strong>变量提升</strong>方面：var 存在变量提升、但 let 和 const 不存在变量提升。</p><p><strong>块级作用域</strong>方面：let 和 const 具有块级作用域，而 var 没有。</p><p>重复声明方面：var 在声明变量时是可以重复声明的，而 let 和 const 不可以。</p><p><strong>暂时性死区</strong>：let 和 const 存在暂时性死区，如果不声明是无法使用的。而 var 可以先使用，后声明。</p><p><strong>初始值</strong>：var 和 let 在定义时可以不设置初始值，但 const 必须设置初始值。而且如果初始值是原始数据类型的话，初始值不可修改，但引用数据类型的属性可以修改。</p><h3 id="Promise（重点）"><a href="#Promise（重点）" class="headerlink" title="Promise（重点）"></a>Promise（重点）</h3><h4 id="什么是-promise？"><a href="#什么是-promise？" class="headerlink" title="什么是 promise？"></a>什么是 promise？</h4><p>promise 是 ES6 提供的用于解决异步问题的一个构造函数。它将回调函数的嵌套，改成链式调用，以此用来解决传统编程中因为嵌套层数过多而产生的异步回调地狱问题。</p><h4 id="Promise-规范"><a href="#Promise-规范" class="headerlink" title="Promise 规范"></a>Promise 规范</h4><ol><li><p>promise 有三种状态：<code>pending</code>（初始状态，既没有被兑现，也没有被拒绝）、<code>fulfilled</code>（已兑现）、<code>rejected</code>（已拒绝）</p><ul><li>如果一个 promise 已经被兑现或被拒绝，那么我们也可以说它处于 <em>已敲定（settled）</em> 状态。</li></ul></li><li><p>promise 的状态，只能从初始状态到兑现或拒绝，不能逆向。然后兑现和拒绝状态也不能相互转换。</p></li><li><p><code>then</code> 作为 promise 的核心方法，必须返回一个 promise。而且同一个 promise 可以调用多次。</p></li><li><p><code>then</code> 方法，接收两个参数，一个是成功的回调，一个是失败的回调。</p></li></ol><p>用 <code>Promise.prototype.then()</code>、<code>Promise.prototype.catch()</code> 和 <code>Promise.prototype.finally()</code> 这些方法将进一步的操作与一个变为已敲定状态的 promise 关联起来。</p><h4 id="手写-Promise（最简实现）"><a href="#手写-Promise（最简实现）" class="headerlink" title="手写 Promise（最简实现）"></a>手写 Promise（最简实现）</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span>（<span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//处理语句</span>        成功操作：resolve（<span class="token punctuation">[</span>参数<span class="token punctuation">]</span>）<span class="token punctuation">;</span>        失败操作：reject（<span class="token punctuation">[</span>参数<span class="token punctuation">]</span>）<span class="token punctuation">;</span>    <span class="token punctuation">}</span>）<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>参数<span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>        当处理语句返回resolve时，要执行的语句    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>参数<span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>        当promise对象中处理语句失败返回reject时，要执行的语句    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>参数<span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">do</span> something<span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="promise-如何解决异步？"><a href="#promise-如何解决异步？" class="headerlink" title="promise 如何解决异步？"></a>promise 如何解决异步？</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//处理语句</span>        成功操作：resolve（<span class="token punctuation">[</span>参数<span class="token punctuation">]</span>）；        失败操作：reject（<span class="token punctuation">[</span>参数<span class="token punctuation">]</span>）；    <span class="token punctuation">}</span>）<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>参数<span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>        当处理语句返回resolve时，要执行的语句    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>参数<span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>        当promise对象中处理语句失败返回reject时，要执行的语句    <span class="token punctuation">}</span><span class="token punctuation">)</span>例：<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">boo</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//boo 布尔值</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>boo<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> oP <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据里面传的参数的真假来执行</span>op<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      异步操作，得到一个value        <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  resolved时进入执行<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  rejected时进入执行<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="promise-的异步模式有哪些？有什么区别？"><a href="#promise-的异步模式有哪些？有什么区别？" class="headerlink" title="promise 的异步模式有哪些？有什么区别？"></a>promise 的异步模式有哪些？有什么区别？</h4><p>​    promise 的异步模式有：<code>Promise.all</code>, <code>primise.race</code>, <code>Promise.allSettled</code>. <code>Promise.any</code>。</p><p><strong>Promise.all</strong></p><p>可以将多个 Promise 实例包装成一个新的 Promise 实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个<strong>结果数组</strong>，而失败的时候则返回<strong>最先被 reject 失败状态</strong>的值。</p><p>Promse.all 在<strong>处理多个异步处理</strong>时非常有用，比如说一个页面上需要等两个或多个 ajax 的数据回来以后才正常显示，在此之前只显示 loading 图标。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'p1 success'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'p2 success'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> p3 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'p3 failed'</span><span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p3<span class="token punctuation">,</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**Promse.race ** </p><p><code>Promise.race([p1, p2, p3])</code> 里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'failed'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Promise.allSettled</strong></p><p><code>Promise.allSettled([p1, p2, p3])</code>，只要参数中的所有 promise 实例的状态改变（fullfilled 或 rejected），返回一个新的 Promise 实例（fullfilled）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> resolved <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> rejected <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> allSettledPromise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">[</span>resolved<span class="token punctuation">,</span> rejected<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>allSettledPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [</span><span class="token comment">//    { status: 'fulfilled', value: 42 },</span><span class="token comment">//    { status: 'rejected', reason: -1 }</span><span class="token comment">// ]</span><span class="token comment">// results 对应传入的 promise 的状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Promise.any</strong></p><p><code>Promise.any([p1, p2, p3])</code> ：只要参数实例有一个变成 <code>fulfilled</code> 状态，包装实例就会变成 <code>fulfilled</code> 状态；如果所有参数实例都变成 <code>rejected</code> 状态，包装实例就会变成 <code>rejected</code> 状态。</p><p><code>Promise.any()</code> 抛出的错误是一个 AggregateError 实例（详见《对象的扩展》一章），这个 AggregateError 实例对象的 <code>errors</code> 属性是一个数组，包含了所有成员的错误。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> resolved <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> rejected <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> alsoRejected <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span>resolved<span class="token punctuation">,</span> rejected<span class="token punctuation">,</span> alsoRejected<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span>rejected<span class="token punctuation">,</span> alsoRejected<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results <span class="token keyword">instanceof</span> <span class="token class-name">AggregateError</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">.</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [-1, Infinity]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="如果向-Promise-all-和-Promise-race-传递空数组，运行结果会有什么不同？"><a href="#如果向-Promise-all-和-Promise-race-传递空数组，运行结果会有什么不同？" class="headerlink" title="如果向 Promise.all() 和 Promise.race() 传递空数组，运行结果会有什么不同？"></a>如果向 Promise.all() 和 Promise.race() 传递空数组，运行结果会有什么不同？</h4><p><code>all</code> 会马上 resolve，进入 <code>fullfilled</code> 状态，传递的 value 是 <code>[]</code>；</p><p><code>race</code> 的状态是 <code>pending</code>，不会进入 <code>then</code>。</p><h4 id="设计实现-promise-race"><a href="#设计实现-promise-race" class="headerlink" title="设计实现 promise.race"></a>设计实现 promise.race</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function-variable function">_race</span> <span class="token operator">=</span> <span class="token parameter">promises</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    promises<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">promise</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise-中-reject-和-catch-处理上有什么区别？"><a href="#Promise-中-reject-和-catch-处理上有什么区别？" class="headerlink" title="Promise 中 reject 和 catch 处理上有什么区别？"></a>Promise 中 reject 和 catch 处理上有什么区别？</h4><ol><li><p>reject 是用来抛出异常的，catch 是用来处理异常。</p></li><li><p>reject 是 Promise 构造函数的方法，而 catch 是 Promise 实例的方法。</p></li><li><p>reject 后的东西，一定会进入 then 中的第二个回调，如果 then 中没有写第二个回调，则进入 catch；网络异常(比如断网)，会直接进入 catch 而不会进入 then 的第二个回调。</p></li></ol><h4 id="Promise-是如何捕获异常的？与传统的-try-catch-相比有什么优势？"><a href="#Promise-是如何捕获异常的？与传统的-try-catch-相比有什么优势？" class="headerlink" title="Promise 是如何捕获异常的？与传统的 try/catch 相比有什么优势？"></a>Promise 是如何捕获异常的？与传统的 try/catch 相比有什么优势？</h4><p>传统的 <code>try/catch</code> 捕获异常方式是无法捕获异步的异常的。</p><p><strong>对于 promise：</strong></p><p>1.单独对 <code>then()</code>中指定异常处理函数（用在希望捕获异常然后不影响接下来 promise 的执行）</p><p>2.使用 <code>catch</code> 来实现全部捕获（用在当一个 Promise 发生异常，剩下的的 Promise 都不执行）</p><hr><h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><p><code>Generator</code> 函数是 ES6 提供的一种异步编程解决方案，封装了多个内部状态，执行 <code>Generator</code> 函数会返回一个 <code>iterator</code> 对象。</p><p>每次调用遍历器对象的 <code>next</code> 方法，就会返回一个有着 <strong>value</strong> 和 <strong>done</strong> 两个属性的对象。</p><p><strong>value</strong> 属性表示当前的内部状态的值，是 yield 表达式后面那个表达式的值； <strong>done</strong> 属性是一个布尔值，表示是否遍历结束。</p><p>形式上，Generator 函数是一个普通函数，但是有两个特征：</p><p>​    一是，<code>function</code>关键字与函数名之间有一个星号；</p><p>​    二是，函数体内部使用 <code>yield</code> 表达式，定义不同的内部状态（<code>yield</code> 在英语里的意思就是“产出”）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// * 的位置没有规定，但一般的写法如下所示</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">helloWorldGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token string">'world'</span><span class="token punctuation">;</span><span class="token comment">//`yield`表达式只能用在 Generator 函数里面使用</span>  <span class="token keyword">return</span> <span class="token string">'ending'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> hw <span class="token operator">=</span> <span class="token function">helloWorldGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用后不会执行</span><span class="token comment">//只有使用.next()才会走一步,返回的也不是函数运行结果，而是一个指向内部状态的指针对象</span>hw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//{ value: 'hello', done: false }</span>hw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//{ value: 'world', done: false }</span>hw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//{ value: 'ending', done: true }</span>hw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//{ value: undefined, done: true }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遍历器对象的 <code>next</code> 方法的运行逻辑如下。</p><p>（1）遇到 <code>yield</code> 表达式，就暂停执行后面的操作，并将紧跟在 <code>yield</code> 后面的那个表达式的值，作为返回的对象的 <code>value</code> 属性值。</p><p>（2）下一次调用 <code>next</code> 方法时，再继续往下执行，直到遇到下一个 <code>yield</code> 表达式。</p><p>（3）如果没有再遇到新的 <code>yield</code> 表达式，就一直运行到函数结束，直到 <code>return</code> 语句为止，并将 <code>return</code> 语句后面的表达式的值，作为返回的对象的 <code>value</code> 属性值。</p><p>（4）如果该函数没有 <code>return</code> 语句，则返回的对象的 <code>value</code> 属性值为 <code>undefined</code>。</p><div class="admonition warning"><p class="admonition-title">注意</p><p><code>yield</code> 表达式后面的表达式，只有当调用 <code>next</code> 方法、内部指针指向该语句时才会执行，因此等于为 JavaScript 提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。</p></div><h4 id="与-Iterator-接口的关系"><a href="#与-Iterator-接口的关系" class="headerlink" title="与 Iterator 接口的关系"></a>与 Iterator 接口的关系</h4><p>任意一个对象的 <code>Symbol.iterator</code> 方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象。由于 Generator 函数就是遍历器生成函数，因此可以把 Generator 赋值给对象的 <code>Symbol.iterator</code> 属性，从而使得该对象具有 Iterator 接口。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myIterable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>myIterable<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token operator">...</span>myIterable<span class="token punctuation">]</span> <span class="token comment">// [1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="netx-方法的参数"><a href="#netx-方法的参数" class="headerlink" title="netx 方法的参数"></a>netx 方法的参数</h4><p><code>yield</code>表达式本身没有返回值，或者说总是返回 <code>undefined</code>。<code>next</code> 方法可以带一个参数，该参数就会被当作上一个<code>yield</code>表达式的返回值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token punctuation">(</span>y <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Object{value:6, done:false}</span>a<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Object{value:NaN, done:false}</span>a<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Object{value:NaN, done:true}</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value:6, done:false }</span>b<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment">// { value:8, done:false }</span>b<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token comment">// { value:42, done:true }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>for...of</code> 循环可以自动遍历 Generator 函数运行时生成的 <code>Iterator</code> 对象，且此时不再需要调用 <code>next</code> 方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 1 2 3 4 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li><p>Generator.prototype.throw()</p><ul><li>Generator 函数返回的遍历器对象，都有一个 <code>throw</code> 方法，可以在函数体外抛出错误，然后在 Generator 函数体内捕获。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">g</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">yield</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'内部捕获'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  i<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  i<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'外部捕获'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 内部捕获 a</span><span class="token comment">// 外部捕获 b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Generator.prototype.return()</p><ul><li>返回给定的值，并且终结遍历 Generator 函数。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// { value: 1, done: false }</span>g<span class="token punctuation">.</span><span class="token function">return</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span> <span class="token comment">// { value: "foo", done: true }</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// { value: undefined, done: true }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>next()、throw()、return() 的共同点：</strong><code>next()</code>、<code>throw()</code>、<code>return()</code> 这三个方法本质上是同一件事，可以放在一起理解。它们的作用都是让 Generator 函数恢复执行，并且使用不同的语句替换<code>yield</code>表达式。</p><ul><li><code>next()</code>是将 <code>yield</code> 表达式替换成一个值。</li><li><code>throw()</code>是将 <code>yield</code> 表达式替换成一个 <code>throw</code> 语句。</li><li><code>return()</code>是将 <code>yield</code> 表达式替换成一个 <code>return</code> 语句。</li></ul><p>yield* 表达式在 Generator 函数内部，调用另一个 Generator 函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token string">'x'</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token string">'y'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 等同于</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token string">'x'</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token string">'a'</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token string">'b'</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token string">'y'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 等同于</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token string">'x'</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">yield</span> v<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">yield</span> <span class="token string">'y'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// "x"</span><span class="token comment">// "a"</span><span class="token comment">// "b"</span><span class="token comment">// "y"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>yield*</code> 取出嵌套数组的所有成员：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">iterTree</span><span class="token punctuation">(</span><span class="token parameter">tree</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tree<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">iterTree</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">yield</span> tree<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> tree <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token keyword">of</span> <span class="token function">iterTree</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// a</span><span class="token comment">// b</span><span class="token comment">// c</span><span class="token comment">// d</span><span class="token comment">// e</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><p>（1）Generator 是实现状态机的最佳结构。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> ticking <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">clock</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ticking<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Tick!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Tock!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ticking <span class="token operator">=</span> <span class="token operator">!</span>ticking<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）Generator 函数是 ES6 对协程的实现，但属于不完全实现。Generator 函数被称为“半协程”（semi-coroutine），意思是只有 Generator 函数的调用者，才能将程序的执行权还给 Generator 函数。如果是完全执行的协程，任何函数都可以让暂停的协程继续执行。如果将 Generator 函数当作协程，完全可以将多个需要互相协作的任务写成 Generator 函数，它们之间使用<code>yield</code>表达式交换控制权。</p><p><strong>异步解决方案：</strong>yield 表达式可以暂停函数执行，next 方法用于恢复函数执行，这使得 Generator 函数非常适合将异步任务同步化。</p><h4 id="Generator-与上下文"><a href="#Generator-与上下文" class="headerlink" title="Generator 与上下文"></a>Generator 与上下文</h4><p>JavaScript 代码运行时，会产生一个全局的上下文环境（context，又称运行环境），包含了当前所有的变量和对象。然后，执行函数（或块级代码）的时候，又会在当前上下文环境的上层，产生一个函数运行的上下文，变成当前（active）的上下文，由此形成一个上下文环境的堆栈（context stack）。</p><p>这个堆栈是“后进先出”的数据结构，最后产生的上下文环境首先执行完成，退出堆栈，然后再执行完成它下层的上下文，直至所有代码执行完成，堆栈清空。</p><p>Generator 函数不是这样，它执行产生的上下文环境，一旦遇到 <code>yield</code> 命令，就会暂时退出堆栈，但是并不消失，里面的所有变量和对象会冻结在当前状态。等到对它执行<code>next</code>命令时，这个上下文环境又会重新加入调用栈，冻结的变量和对象恢复执行。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> g <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>  g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，第一次执行 <code>g.next()</code> 时，Generator 函数 <code>gen</code> 的上下文会加入堆栈，即开始运行 <code>gen</code> 内部的代码。等遇到 <code>yield 1</code> 时，<code>gen</code> 上下文退出堆栈，内部状态冻结。第二次执行 <code>g.next()</code> 时，<code>gen </code>上下文重新加入堆栈，变成当前的上下文，重新恢复执行。</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>协程（coroutine）是一种程序运行的方式，可以理解成“协作的线程”或“协作的函数”。协程既可以用单线程实现，也可以用多线程实现。前者是一种特殊的子例程，后者是一种特殊的线程。</p><p><strong>（1）协程与子例程的差异</strong></p><p>传统的“子例程”（subroutine）采用堆栈式“后进先出”的执行方式，只有当调用的子函数完全执行完毕，才会结束执行父函数。协程与其不同，多个线程（单线程情况下，即多个函数）可以并行执行，但是只有一个线程（或函数）处于正在运行的状态，其他线程（或函数）都处于暂停态（suspended），线程（或函数）之间可以交换执行权。也就是说，一个线程（或函数）执行到一半，可以暂停执行，将执行权交给另一个线程（或函数），等到稍后收回执行权的时候，再恢复执行。这种可以并行执行、交换执行权的线程（或函数），就称为协程。</p><p>从实现上看，在内存中，子例程只使用一个栈（stack），而协程是同时存在多个栈，但只有一个栈是在运行状态，也就是说，协程是以多占用内存为代价，实现多任务的并行。</p><p><strong>（2）协程与普通线程的差异</strong></p><p>不难看出，协程适合用于多任务运行的环境。在这个意义上，它与普通的线程很相似，都有自己的执行上下文、可以分享全局变量。它们的不同之处在于，同一时间可以有多个线程处于运行状态，但是运行的协程只能有一个，其他协程都处于暂停状态。此外，普通的线程是抢先式的，到底哪个线程优先得到资源，必须由运行环境决定，但是协程是合作式的，执行权由协程自己分配。</p><p>由于 JavaScript 是单线程语言，只能保持一个调用栈。引入协程以后，每个任务可以保持自己的调用栈。这样做的最大好处，就是抛出错误的时候，可以找到原始的调用栈。不至于像异步操作的回调函数那样，一旦出错，原始的调用栈早就结束。</p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ol><li>异步操作的同步化表达</li><li>控制流管理</li><li>部署 Iterator 接口</li><li>作为数据结构</li></ol><p><strong>参考：</strong><a href="https://es6.ruanyifeng.com/#docs/generator">Generator 函数的语法 - ECMAScript 6入门 (ruanyifeng.com)</a></p><hr><h3 id="async-await（重点）"><a href="#async-await（重点）" class="headerlink" title="async/await（重点）"></a>async/await（重点）</h3><p><code>async</code> 函数是 <code>Generator</code> 函数的一个语法糖，<code>async</code> 函数就是将 <code>Generator</code> 函数的星号（<code>*</code>）替换成 <code>async</code>，将 <code>yield</code> 替换成 <code>await</code> 相当于会自动执行 <code>Generator </code> 函数，不需要依赖 <code>.next()</code> 。</p><p><code>async</code> 函数对 Generator 函数的改进，体现在以下四点。</p><ol><li>内置执行器。<code>Generator</code> 函数的执行必须靠执行器，所以才有了<code>co</code> 模块，而 <code>async</code> 函数自带执行器。也就是说，<code>async </code>函数的执行，与普通函数一模一样，只要一行。</li><li>更好的语义。<code>async</code> 和 <code>await</code>，比起 <code>*</code> 和 <code>yield</code>，语义更清楚了。<code>async</code> 表示函数里有异步操作，<code>await</code> 表示紧跟在后面的表达式需要等待结果。</li><li>更广的适用性。<code>co</code> 模块约定，<code>yield</code> 命令后面只能是 Thunk 函数或 Promise 对象，而 <code>async</code> 函数的 <code>await</code> 命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 resolved 的 Promise 对象）。</li><li>返回值是 Promise。<code>async</code> 函数的返回值是 <code>Promise</code> 对象，这比 <code>Generator</code> 函数的返回值是 <code>Iterator</code> 对象方便多了。你可以用 <code>then</code> 方法指定下一步的操作。进一步说，<code>async</code> 函数完全可以看作多个异步操作，包装成的一个 <code>Promise</code> 对象，而 <code>await</code> 命令就是内部 <code>then</code> 命令的语法糖。</li></ol><p><code>async</code> 使用上更为简洁，将异步代码以同步的形式进行编写，是处理异步编程的最终方案</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 今日头条面试题async在js执行机制中的顺序</span><span class="token comment">//async 方法执行时，遇到 await 会立即执行紧跟的表达式，然后把表达式后面的代码（await 这行代码后面的代码）放到微任务队列里。</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 start'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 end'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'settimeout'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span class="token comment">/*输出顺序:script startasync1 startasync2promise1script endasync1 endpromise2settimeout*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 字节面试题 */</span><span class="token keyword">function</span> <span class="token function">getJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>     <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">getJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//事件循环机制  await 下面的代码会去到下一次事件循环机制</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">/**输出23*/</span><span class="token comment">/*当我们理解了 async/await 就是**语法糖**，它的本质还是 Promise，async 相当于 Promise.then(),await 相当于.then()括号里面的操作。所以翻译成 Promise 后就是下面这段代码:*/</span><span class="token comment">// async function testAsync() {</span>  <span class="token comment">//   await getJson()  </span>  <span class="token comment">//   console.log(3);</span>  <span class="token comment">// }</span>  <span class="token comment">//相当于：</span><span class="token keyword">function</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">getJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><ol><li><code>async</code> 函数返回一个 Promise 对象。<code>async</code> 函数内部 <code>return</code> 语句返回的值，会成为 <code>then</code> 方法回调函数的参数。</li><li><code>async </code>函数内部抛出错误，会导致返回的 Promise 对象变为 <code>reject</code> 状态。抛出的错误对象会被 <code>catch</code> 方法回调函数接收到。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">v</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolve'</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token parameter">e</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'reject'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//reject Error: 出错了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><code>async</code> 函数返回的 <code>Promise</code> 对象，必须等到内部所有 <code>await</code> 命令后面的 <code>Promise</code> 对象执行完，才会发生状态改变，除非遇到 <code>return</code> 语句或者抛出错误。任何一个 <code>await</code> 语句后面的 <code>Promise</code> 对象变为 <code>reject</code> 状态，那么整个 <code>async</code> 函数都会中断执行。</li><li>正常情况下，<code>await</code> 命令后面是一个 <code>Promise</code> 对象，返回该对象的结果。如果不是 <code>Promise</code> 对象，就直接返回对应的值。另一种情况是，<code>await</code> 命令后面是一个 <code>thenable</code> 对象（即定义了 <code>then</code> 方法的对象），那么 <code>await</code> 会将其等同于 Promise 对象。</li></ol><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>如果 <code>await</code> 后面的异步操作出错，那么等同于 <code>async</code> 函数返回的 Promise 对象被 <code>reject</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Error：出错了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>防止出错的方法，也是将其放在 <code>try...catch</code> 代码块之中。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">await</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="admonition warning"><p class="admonition-title">注意</p><p>（1）<code>await</code> 命令后面的 <code>Promise</code> 对象，运行结果可能是 <code>rejected</code>，所以最好把 <code>await</code> 命令放在 <code>try...catch</code> 代码块中。（2）多个 <code>await</code> 命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。（3）<code>await</code> 命令只能用在 <code>async</code> 函数之中，如果用在普通函数，就会报错。（4）<code>async</code> 函数可以保留运行堆栈。</p></div><h4 id="async-函数的实现原理"><a href="#async-函数的实现原理" class="headerlink" title="async 函数的实现原理"></a>async 函数的实现原理</h4><p>async 函数的实现原理，就是将 Generator 函数和自动执行器，包装在一个函数里。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token comment">// 等同于</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// spawn函数就是自动执行器。</span>  <span class="token keyword">return</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token parameter">genF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> gen <span class="token operator">=</span> <span class="token function">genF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token parameter">nextF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> next<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        next <span class="token operator">=</span> <span class="token function">nextF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">step</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">step</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> gen<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">step</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="顶层-await"><a href="#顶层-await" class="headerlink" title="顶层 await"></a>顶层 await</h4><p>从 <a href="https://github.com/tc39/proposal-top-level-await">ES2022</a> 开始，允许在模块的顶层独立使用 <code>await</code> 命令，使得下面那行代码不会报错了。它的主要目的是使用 <code>await</code> 解决模块异步加载的问题。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://api.example.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，顶层 <code>await</code> 只能用在 ES6 模块，不能用在 CommonJS 模块。这是因为 CommonJS 模块的 <code>require()</code> 是同步加载，如果有顶层 <code>await</code>，就没法处理加载了。</p><p>下面是顶层 <code>await</code> 的一些使用场景。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// import() 方法加载</span><span class="token keyword">const</span> strings <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/i18n/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>navigator<span class="token punctuation">.</span>language<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 数据库操作</span><span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">dbConnector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 依赖回滚</span><span class="token keyword">let</span> jQuery<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  jQuery <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'https://cdn-a.com/jQuery'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>  jQuery <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'https://cdn-b.com/jQuery'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="异步编程的发展历史："><a href="#异步编程的发展历史：" class="headerlink" title="异步编程的发展历史："></a>异步编程的发展历史：</h4><p>首先我们知道，<code>async/await</code> 是 <code>ES7</code> 中的异步语法，我们可以从<strong>异步编程的发展史</strong>开始和面试官聊。 因为 <code>JavaScript</code> 是<strong>单线程执行机制</strong>，所以为了提高效率我们使用异步编程。</p><ol><li><p>回调函数: 缺点是不利于代码的阅读维护，各部分之间高度耦合，流程会很乱。每个任务只能指定一个回调函数。不能捕获异常 （<code>try catch</code> 同步执行，回调函数会加入队列，无法捕获错误）</p></li><li><p>Promise: <code>Promise</code> 不仅可以避免回调地狱，还可以统一捕获失败的原因，目前也应用广泛。</p></li><li><p>Generator: 生成器是一个函数，需要加* ，可以用来生成迭代器。生成器函数和普通函数不一样，普通函数是一旦调用一定会执行完，但是生成器函数中间可以暂停。生成器和普通函数不一样，调用它并不会立即执行。它会返回此生成器的迭代器,迭代器是一个对象，每调用一次 <code>next</code> 就可以返回一个值对象。</p></li><li><p>co: 随着前端的迅速发展，大神们觉得要像同步代码一样写异步，<code>co</code> 问世了，<code>co</code> 是 TJ 大神结合了 <code>Promise</code> 和 <code>Generator</code> 的一个库，实际上还是帮助我们自动执行迭代器。</p></li><li><p>async/await: <code>async/await</code> 是语法糖，内部是 <code>Generator+Promise</code> 实现。 <code>async</code> 函数就是将 <code>Generator</code> 函数的星号（<code>*</code>）替换成 <code>async</code>，将 <code>yield</code> 替换成 <code>await</code>。</p></li></ol><h4 id="（回顾）事件执行机制：-EventLoop"><a href="#（回顾）事件执行机制：-EventLoop" class="headerlink" title="（回顾）事件执行机制： EventLoop"></a>（回顾）事件执行机制： EventLoop</h4><ol><li>首先会执行同步操作</li><li>执行完后查看执行栈是否为空</li><li>如果为空，查看是否有微任务需要执行，如果有放入执行栈</li><li>在查看是否有宏任务需要执行，如果有放入执行栈。</li></ol><p>宏任务有哪些：</p><ol><li>script(整体代码)</li><li>setTimeout</li><li>setInterval</li><li>I/O</li><li>UI交互事件</li><li>postMessage</li><li>MessageChannel</li><li>setImmediate(Node.js 环境)</li></ol><p> 微任务有哪些：</p><ol><li>Promise.then</li><li>Object.observe</li><li>MutaionObserver</li><li>process.nextTick(Node.js 环境)</li></ol><h4 id="References-1"><a href="#References-1" class="headerlink" title="References"></a>References</h4><p>👉<a href="https://juejin.cn/post/6952432857977618469">【字节面试题】有关async/await的理解 - 掘金 (juejin.cn)</a></p><p>👉<a href="https://juejin.cn/post/6973637298755731463">async/await原理剖析 - 掘金 (juejin.cn)</a></p><h4 id="setTimeout、Promise、Async-Await-的区别"><a href="#setTimeout、Promise、Async-Await-的区别" class="headerlink" title="setTimeout、Promise、Async/Await 的区别"></a>setTimeout、Promise、Async/Await 的区别</h4><ol><li><p>setTimeout</p><p><code>setTimeout</code> 的回调函数放到宏任务队列里，等到执行栈清空以后执行。</p></li><li><p>Promise</p><p><code>Promise</code> 本身是<strong>同步的立即执行函数</strong>， 当在 <code>executor</code> 中执行 <code>resolve</code> 或者 <code>reject</code> 的时候, 此时是异步操作， 会先执行 <code>then/catch</code> 等，当主栈完成后，才会去调用 <code>resolve/reject</code> 中存放的方法执行。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token keyword">let</span> promise1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1 end'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span class="token comment">// 输出顺序: script start-&gt;promise1-&gt;promise1 end-&gt;script end-&gt;promise2-&gt;setTimeout</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>async/await</p><p><code>async</code> 函数返回一个 <code>Promise</code> 对象，当函数执行的时候，一旦遇到 <code>await</code> 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 <code>async</code> 函数体。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 end'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span class="token comment">// 输出顺序：script start-&gt;async1 start-&gt;async2-&gt;script end-&gt;async1 end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传送门 ☞ <a href="https://juejin.cn/post/6999651011304357925"># JavaScript Promise 专题</a></p></li></ol><h4 id="async-await-如何通过同步的方式实现异步"><a href="#async-await-如何通过同步的方式实现异步" class="headerlink" title="async/await 如何通过同步的方式实现异步"></a>async/await 如何通过同步的方式实现异步</h4><p><code>async/await</code> 就是一个<strong>自执行</strong>的 <code>Generator</code> 函数。利用 <code>Generator</code> 函数的特性把异步的代码写成“同步”的形式，第一个请求的返回值作为后面一个请求的参数,其中每一个参数都是一个 <code>promise</code> 对象。</p><hr><h3 id="Set-Map（重点）"><a href="#Set-Map（重点）" class="headerlink" title="Set/Map（重点）"></a>Set/Map（重点）</h3><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p>ES6 提供的一个新的数据结构，本身是一个构造函数，类似于数组，允许你存任何类型的值，但成员值都是唯一的。</p><h5 id="实例的属性和方法"><a href="#实例的属性和方法" class="headerlink" title="实例的属性和方法"></a>实例的属性和方法</h5><p>Set 结构的实例有以下属性。</p><ul><li><code>Set.prototype.constructor</code>：构造函数，默认就是 <code>Set</code> 函数。</li><li><code>Set.prototype.size</code>：返回 <code>Set</code> 实例的成员总数。</li></ul><p>操作方法（用于操作数据）</p><ul><li><code>Set.prototype.add(value)</code>：添加某个值，返回 Set 结构本身。</li><li><code>Set.prototype.delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功。</li><li><code>Set.prototype.has(value)</code>：返回一个布尔值，表示该值是否为 <code>Set</code> 的成员。</li><li><code>Set.prototype.clear()</code>：清除所有成员，没有返回值。</li></ul><p>遍历方法（用于遍历成员）</p><ul><li><code>Set.prototype.keys()</code>：返回键名的遍历器（<code>Set</code> 没有键名，或者说键名和键值相同，因此 <code>Set</code> 的 <code>keys()</code> 和 <code>values()</code> 的行为完全一致）。</li><li><code>Set.prototype.values()</code>：返回键值的遍历器。</li><li><code>Set.prototype.entries()</code>：返回键值对的遍历器。</li><li><code>Set.prototype.forEach()</code>：使用回调函数遍历每个成员。</li></ul><p>Set 结构的实例默认可遍历，它的默认遍历器生成函数就是它的 <code>values</code> 方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Set</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token class-name">Set</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>values<span class="token comment">// true</span><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token keyword">of</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// red</span><span class="token comment">// green</span><span class="token comment">// blue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="admonition warning"><p class="admonition-title">注意</p><p>（1）往一个 <code>Set</code> 中添加两次 <code>NaN</code>，只有一个 <code>NaN</code> 被添加成功，因为 <code>Set</code> 认为 <code>NaN</code> 是相等的。但是严格相等操作符认为 NaN 是不一样的。（2）<code>Set</code> 的初始化可以传入任意具有 <code>Iterable</code> 接口的数据。（3）<code>Set</code> 的遍历顺序就是插入顺序。这个特性有时非常有用，比如使用 Set 保存一个回调函数列表，调用时就能保证按照添加顺序调用。</p></div><h5 id="Set-对象的作用"><a href="#Set-对象的作用" class="headerlink" title="Set 对象的作用"></a>Set 对象的作用</h5><p>1、数组去重与字符串去重：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>mySet<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1,2,3,5,4,6],使用扩展运算符（...）将对象解构为数组</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token string">'ababbc'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment">// "abc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、合并两个 Set 对象：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> mySetA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> mySetB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>mySetA<span class="token punctuation">,</span><span class="token operator">...</span>mySetB<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 5, 4, 6, 1, 2, 3, 5, 4, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、交集：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> mySetA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> mySetB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> intersect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>mySetA<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> mySetB<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>intersect<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[3, 5, 4, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4、差集（A 相对于 B）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> mySetA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> mySetB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> intersect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>mySetA<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token operator">!</span>mySetB<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>intersect<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Set-练习题"><a href="#Set-练习题" class="headerlink" title="Set 练习题"></a>Set 练习题</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> s<span class="token operator">=</span><span class="token function">newSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//答案：2</span><span class="token comment">//两个数组[1]并不是同一个值，他们分别定义的数组，在内存中分别对应着不同的存储地址，因此并不是相同的值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h4><p>WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别：</p><ol><li>WeakSet 的成员只能是<strong>对象</strong>，而不能是其他类型的值。</li><li>WeakSet 中的对象都是<strong>弱引用</strong>，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</li></ol><div class="admonition info"><p>（1）垃圾回收机制根据对象的可达性（reachability）来判断回收，如果对象还能被访问到，垃圾回收机制就不会释放这块内存。结束使用该值之后，有时会忘记取消引用，导致内存无法释放，进而可能会引发内存泄漏。<code>WeakSet</code> 里面的引用，都不计入垃圾回收机制，所以就不存在这个问题。因此，<code>WeakSet</code> 适合临时存放一组对象，以及存放跟对象绑定的信息。只要这些对象在外部消失，它在 <code>WeakSet</code> 里面的引用就会自动消失。（2）由于上面这个特点，<code>WeakSet</code> 的成员是不适合引用的，因为它会随时消失。另外，由于 <code>WeakSet</code> 内部有多少个成员，取决于垃圾回收机制有没有运行，运行前后很可能成员个数是不一样的，而垃圾回收机制何时运行是不可预测的，因此 <u>ES6 规定 <code>WeakSet</code> 不可遍历。</u>（3）<code>WeakSet</code> 的特点也适用于 <code>WeakMap</code>。</p></div><p>WeakSet 结构有以下三个方法。</p><ul><li><strong>WeakSet.prototype.add(value)：</strong>向 WeakSet 实例添加一个新成员。</li><li><strong>WeakSet.prototype.delete(value)：</strong>清除 WeakSet 实例的指定成员。</li><li><strong>WeakSet.prototype.has(value)：</strong>返回一个布尔值，表示某个值是否在 WeakSet 实例之中。</li></ul><div class="admonition warning"><p class="admonition-title">注意</p><p>没有遍历的方法。</p></div><hr><h4 id="Map："><a href="#Map：" class="headerlink" title="Map："></a>Map：</h4><p>JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。为了解决这个问题，ES6 提供了 <code>Map</code> 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。<code>Map</code> 是一种更完善的 Hash 结构实现。</p><div class="admonition warning"><p class="admonition-title">注意</p><p>（1）虽然 <code>NaN</code> 不严格相等于自身，但 <code>Map</code> 将其视为同一个键。（2）不仅仅是数组，任何具有 <code>Iterator</code> 接口、且每个成员都是一个双元素的数组的数据结构都可以当作 <code>Map</code> 构造函数的参数。</p></div><h5 id="Map-实例的属性和操作方法"><a href="#Map-实例的属性和操作方法" class="headerlink" title="Map 实例的属性和操作方法"></a>Map 实例的属性和操作方法</h5><p><strong>（1）size 属性</strong></p><p><code>size</code> 属性返回 Map 结构的成员总数。</p><p><strong>（2）Map.prototype.set(key, value)</strong></p><p><code>set</code> 方法设置键名 <code>key</code> 对应的键值为 <code>value</code>，然后返回整个 Map 结构。如果 <code>key</code> 已经有值，则键值会被更新，否则就新生成该键。</p><p><strong>（3）Map.prototype.get(key)</strong></p><p><code>get</code> 方法读取 <code>key</code> 对应的键值，如果找不到 <code>key</code>，返回 <code>undefined</code>。</p><p><strong>（4）Map.prototype.has(key)</strong></p><p><code>has</code> 方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</p><p><strong>（5）Map.prototype.delete(key)</strong></p><p><code>delete</code> 方法删除某个键，返回 <code>true</code>。如果删除失败，返回 <code>false</code>。</p><p><strong>（6）Map.prototype.clear()</strong></p><p><code>clear</code> 方法清除所有成员，没有返回值。</p><p><strong>Map遍历的方法：</strong></p><p>与 <code>Set</code> 相同。需要特别注意的是，Map 的遍历顺序就是插入顺序。Map 结构的默认遍历器接口（<code>Symbol.iterator</code>属性），就是 <code>entries</code> 方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">map<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">===</span> map<span class="token punctuation">.</span>entries<span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="Map与对象互换："><a href="#Map与对象互换：" class="headerlink" title="Map与对象互换："></a>Map与对象互换：</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>    obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// {a:111, b: 222}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Map-与-Set-的区别："><a href="#Map-与-Set-的区别：" class="headerlink" title="Map 与 Set 的区别："></a>Map 与 Set 的区别：</h5><p>​    1、<code>Set</code> 用于数据去重，<code>Map</code> 用于数据存储。</p><p>​    2、<code>Set</code> 是一种集合的数据结构，其中存储的是值，<code>Map</code> 是一种字典的数据结构，其中存储的是键值对。</p><p>​    3、<code>Set</code> 类似于数组，但是它里面每一项的值是唯一的，没有重复的值。</p><p>​          <code>Map</code> 类似于对象，也是键值对的集合，各种类型的值（包含对象）都可以当作键。其中键不允许重复。</p><hr><h4 id="WaekMap"><a href="#WaekMap" class="headerlink" title="WaekMap"></a>WaekMap</h4><p><code>WeakMap</code> 结构与 <code>Map</code> 结构类似，也是用于生成键值对的集合。<code>WeakMap</code> 与 <code>Map</code> 的区别有两点:</p><ol><li><code>WeakMap</code> 只接受<strong>对象</strong>作为键名（<code>null</code>除外），不接受其他类型的值作为键名。</li><li><code>WeakMap</code> 的键名所指向的对象，不计入垃圾回收机制。</li></ol><p><code>WeakMap</code> 的专用场合就是，它的键所对应的对象，可能会在将来消失。<code>WeakMap</code> 结构有助于防止内存泄漏。</p><hr><h3 id="ES6-为数组新加的方法"><a href="#ES6-为数组新加的方法" class="headerlink" title="ES6 为数组新加的方法"></a>ES6 为数组新加的方法</h3><p><strong>Array.from()</strong> 方法将一个类数组对象或者可遍历对象转换成一个真正的数组。</p><p><strong>Array.reduce((pre,cur) =&gt; {    },init)</strong> 方法对累加器和数组中的每个元素从左到右应用一个函数，将其减少为单个值。</p><hr><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//es5</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"lux"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//es6</span><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"lux"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//hello lux</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><p>ES6 允许为函数的参数设置默认值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">0</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//函数的参数是默认声明的，不需要使用 let 再次声明</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//x=1,y=0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><h3 id="Node-js-和浏览器-js-引擎的垃圾回收机制"><a href="#Node-js-和浏览器-js-引擎的垃圾回收机制" class="headerlink" title="Node.js 和浏览器 js 引擎的垃圾回收机制"></a>Node.js 和浏览器 js 引擎的垃圾回收机制</h3><p><strong>浏览器 JS 引擎的垃圾回收机制</strong></p><ol><li><p> 项目中，如果存在大量不被释放的内存（堆/栈/上下文），页面性能会变得很慢。当某些代码操作不能被合理释放，就会造成内存泄漏。我们尽可能减少使用闭包，因为它会消耗内存。</p></li><li><p>浏览器垃圾回收机制/内存回收机制:</p><p> 浏览器的 <code>Javascript</code> 具有自动垃圾回收机制（<code>GC:Garbage Collecation</code>），垃圾收集器会定期（周期性）找出那些不再继续使用的变量，然后释放其内存。</p></li></ol><h4 id="两种垃圾回收算法"><a href="#两种垃圾回收算法" class="headerlink" title="两种垃圾回收算法"></a>两种垃圾回收算法</h4><p><strong>引用计数法：</strong>当前内存被占用一次，计数累加1次，移除占用就减1，减到0时，浏览器就回收它。（IE 6,7）</p><ul><li>局限：如果存在循环引用则会导致内存泄漏。</li></ul><p><strong>标记清除：</strong>在 <code>js</code> 中，最常用的垃圾回收机制是标记清除。当变量进入执行环境时，被标记为“进入环境”，当变量离开执行环境时，会被标记为“离开环境”。垃圾回收器会销毁那些带标记的值并回收它们所占用的内存空间。</p><ul><li><p>这个算法假定设置一个叫做根（root）的对象（在 Javascript 里，根是全局对象）。垃圾回收器将定期从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……从根开始，垃圾回收器将找到所有可以获得的对象和收集所有不能获得的对象。</p></li><li><p>浏览器不定时去查找当前内存的引用，如果没有被占用了，浏览器会回收它；如果被占用，就不能回收</p></li><li><p>局限：那些无法从根对象查询到的对象都将被清除。尽管这是一个限制，但实践中我们很少会碰到类似的情况，所以开发者不太会去关心垃圾回收机制。</p></li><li><p>优化手段：内存优化 ; 手动释放：取消内存的占用即可。</p><p>（1）堆内存：fn = null 【null：空指针对象】</p><p>（2）栈内存：把上下文中，被外部占用的堆的占用取消即可。</p></li><li><p>内存泄漏</p><p>在 JS 中，常见的内存泄露主要有 4 种：全局变量、闭包、DOM 元素的引用、定时器。</p><p>（1）全局变量</p><p><strong>解决方法：严格模式。</strong>在非严格模式下，当引用一个未声明的变量时将创建一个全局变量。在浏览器中，全局对象是 window，这意味着这个未声明的变量将泄露到全局，并且无法被垃圾回收算法清除。如果一定要使用全局变量临时存储和处理大量信息，必须在使用完过后手动将其设置 <code>null</code>。</p><p>（2）闭包</p><p><strong>解决方法：手动将变量赋值为 <code>null</code>。</strong>闭包本身不存在内存泄露，使用不当才会导致内存泄漏的问题。闭包会维持函数内部局部变量，如果局部变量没有及时释放，则多次调用函数会导致内存占用不断升高。</p><p>（3）定时器</p><p><strong>解决方法：在定时器完成工作的时候，手动清除定时器。</strong>定时器的回调函数中引用的变量已经可以被收回，但是由于定时器的回调函数还存在，因此与之关联的数据对象就无法被回收。</p><p>（4）DOM 元素的引用</p><p><strong>解决方式：手动给 DOM 节点的引用赋值为 <code>null</code>。</strong>在引用某个 DOM 元素后从 DOM 中移除该节点后仍然能访问该 DOM 节点的引用。</p></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://vue3js.cn/interview/JavaScript/memory_leak.html">面试官：说说 JavaScript 中内存泄漏的几种情况？ | web前端面试 - 面试官系列 (vue3js.cn)</a></li><li><a href="https://ruanyifeng.com/blog/2017/04/memory-leak.html">JavaScript 内存泄漏教程 - 阮一峰的网络日志 (ruanyifeng.com)</a></li><li><a href="https://juejin.cn/post/6844903917986267143">彻底掌握js内存泄漏以及如何避免 - 掘金 (juejin.cn)</a></li></ul><hr><h2 id="手写代码"><a href="#手写代码" class="headerlink" title="手写代码"></a>手写代码</h2><h3 id="实现一个-sleep-函数"><a href="#实现一个-sleep-函数" class="headerlink" title="实现一个 sleep 函数"></a>实现一个 sleep 函数</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 1. promise 实现 */</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">time</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 这里进行操作</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 2. async await */</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">time</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sleepAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fuck the code'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 进行操作</span>  <span class="token punctuation">}</span>  <span class="token function">sleepAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 3. Generator */</span><span class="token punctuation">{</span>  <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">sleepGenerator</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">yield</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">sleepGenerator</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// 进行操作</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 4. ES5 */</span><span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">sleep</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="防抖节流"><a href="#防抖节流" class="headerlink" title="防抖节流"></a>防抖节流</h3><h4 id="原理介绍-应用场景"><a href="#原理介绍-应用场景" class="headerlink" title="原理介绍+应用场景"></a>原理介绍+应用场景</h4><p><code>节流（throttle）</code>：事件触发后，规定时间内，事件处理函数不能再次被调用。也就是说在规定的时间内，函数只能被调用一次，且是最先被触发调用的那次。顾名思义，可以减少一段时间内事件的触发频率。（王者荣耀英雄回城，监听鼠标移动的事件，监听滑轮滚动事件等—短时间内频发触发）</p><p><code>防抖</code>：多次触发事件，事件处理函数只能执行一次，并且是在触发操作结束时执行。也就是说，当一个事件被触发准备执行事件函数前，会等待一定的时间（这时间是码农自己去定义的，比如 1 秒），如果没有再次被触发，那么就执行，如果被触发了，那就本次作废，重新从新触发的时间开始计算，并再次等待 1 秒，直到能最终执行！（搜索框字段填写完成再请求）</p><p><strong>使用场景：</strong><br><code>节流</code>：滚动加载更多、搜索框的搜索联想功能、高频点击、表单重复提交……</p><ul><li>鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次；</li><li>懒加载时要监听计算滚动条的位置，但不必每次滑动都触发，可以降低计算的频率，而不必去浪费 CPU 资源；</li></ul><p><code>防抖</code>：搜索联想功能。</p><h4 id="手写节流函数"><a href="#手写节流函数" class="headerlink" title="手写节流函数"></a>手写节流函数</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** 防抖函数-（可以在第一次触发回调事件时执行 func）* @param { Function } func 延迟执行的函数* @param { Number } delay 延迟的时间* @returns 闭包---延迟执行的函数*/</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> immediate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>        args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ---新增部分 start---</span>    <span class="token comment">// immediate 为 true 表示第一次触发后执行</span>    <span class="token comment">// timer 为空表示首次触发</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>immediate <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// ---新增部分 end---</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// DEMO</span><span class="token keyword">const</span> betterFn <span class="token operator">=</span> <span class="token function">debounce1</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fn 防抖执行了'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> betterFn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*** 节流函数---时间戳实现（存在的问题：事件停止触发时无法响应回调）* @param { Function } func 需要执行的函数* @param { Number } delay 延迟执行的时间* @param { Number } wait 执行 func 的时间间隔* @returns 闭包---延迟执行的函数*/</span><span class="token keyword">function</span> <span class="token function">throttle1</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> startTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 上次执行的时间戳</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>        args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>    <span class="token keyword">let</span> curTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前时间戳</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>curTime <span class="token operator">-</span> startTime <span class="token operator">&gt;=</span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      startTime <span class="token operator">=</span> curTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*** 节流函数-定时器实现（存在的问题：即使事件停止触发也会执行回调）* @param {Function} func 需要节流执行的函数* @param {Number} wait 函数执行的间隔* @returns 节流处理后的函数*/</span><span class="token keyword">function</span> <span class="token function">throttle2</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>        args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*** 加强版节流函数-时间戳+定时器，当用户操作非常频繁时，wait 时间一到会执行一次 func* @param {Function} func 需要节流的函数* @param {Number} wait 等待执行的时间* @returns 节流后的函数*/</span><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 上一次执行 func 的时间</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>        args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>    <span class="token keyword">let</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前的时间戳</span>    <span class="token comment">// ------ 新增部分 start ------</span>    <span class="token comment">// 判断上次触发的时间和本次触发的时间差是否小于时间间隔</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous <span class="token operator">&lt;</span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        previous <span class="token operator">=</span> now<span class="token punctuation">;</span>        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// ------ 新增部分 end ------</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment">// 第一次执行</span>      <span class="token comment">// 或者时间间隔超出了设定的时间间隔，执行函数 func</span>      previous <span class="token operator">=</span> now<span class="token punctuation">;</span>      func<span class="token punctuation">.</span><span class="token function">aplly</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// DEMO</span><span class="token keyword">const</span> betterFn <span class="token operator">=</span> <span class="token function">throttle1</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fn 函数执行了'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span>betterFn<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="手写Ajax并用Promise封装"><a href="#手写Ajax并用Promise封装" class="headerlink" title="手写Ajax并用Promise封装"></a>手写Ajax并用Promise封装</h3><p>Ajax 的原理简单来说通过 <strong>XMLHttpRequest</strong> 对象来向服务器发送异步请求，从服务器获得数据，然后用 javascript 来操作 DOM 而更新页面。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 原生 Ajax 请求 */</span><span class="token keyword">const</span> httpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>httpRequest<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> doSomething<span class="token punctuation">;</span>httpRequest<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'http://www.example.org'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>httpRequest<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>httpRequest<span class="token punctuation">.</span>readyState <span class="token operator">===</span> XMLHttpRequest<span class="token punctuation">.</span><span class="token constant">DONE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>httpRequest<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>httpRequest<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/* ES6 Promise 封装 Ajax */</span><span class="token keyword">function</span> <span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> handler<span class="token punctuation">;</span>    client<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">'json'</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Accept'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> promise<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">'/posts.json'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Contents: '</span> <span class="token operator">+</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="手写promise串行请求"><a href="#手写promise串行请求" class="headerlink" title="手写promise串行请求"></a>手写promise串行请求</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">p1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">p2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">p3</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">p3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="手写-Promise-控制并发请求"><a href="#手写-Promise-控制并发请求" class="headerlink" title="手写 Promise 控制并发请求"></a>手写 Promise 控制并发请求</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  message<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">第 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 条数据</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">axiosGet</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>message<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncProcess</span><span class="token punctuation">(</span><span class="token parameter">max <span class="token operator">=</span> <span class="token number">10</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> task <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 并发池</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> cur <span class="token operator">=</span> <span class="token function">axiosGet</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> task<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 请求结束后将该 Promise 任务从并发池中移除</span>      task<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 每当并发池跑完一个任务，就再塞入一个任务</span>    task<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//利用 Promise.race 方法来获得并发池中某任务完成的信号</span>    <span class="token comment">//跟 await 结合当有任务完成才让程序继续执行,让循环把并发池塞满</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span>length <span class="token operator">===</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">asyncProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="数组相关"><a href="#数组相关" class="headerlink" title="数组相关"></a>数组相关</h3><h4 id="求数组中出现次数最多的数"><a href="#求数组中出现次数最多的数" class="headerlink" title="求数组中出现次数最多的数"></a>求数组中出现次数最多的数</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getMost</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    count <span class="token operator">?</span> map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>      max <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getMost</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><p>简单版：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 1. 遍历数组---保存到新数组 */</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> arr0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr0<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      arr0<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 2. 遍历数组（双循环）---删除重复的元素  */</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 如果相等，删除 j 位置的元素</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 删除 j 位置的元素</span>        arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 每删除一个元素，数组长度 -1，j 位置的元素继续与后面一个元素比较</span>        j<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 3. 利用set去重 */</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复杂情况：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 数组去重，考虑空对象的情况，还有NaN的情况.</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* */</span><span class="token keyword">const</span> <span class="token function-variable function">removeDuplicates</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 考虑更全面的情况 */</span><span class="token punctuation">{</span>  <span class="token comment">// 获取类型</span>  <span class="token keyword">const</span> getType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> class2type <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string-property property">'[object Boolean]'</span><span class="token operator">:</span> <span class="token string">'boolean'</span><span class="token punctuation">,</span>      <span class="token string-property property">'[object Number]'</span><span class="token operator">:</span> <span class="token string">'number'</span><span class="token punctuation">,</span>      <span class="token string-property property">'[object String]'</span><span class="token operator">:</span> <span class="token string">'string'</span><span class="token punctuation">,</span>      <span class="token string-property property">'[object Function]'</span><span class="token operator">:</span> <span class="token string">'function'</span><span class="token punctuation">,</span>      <span class="token string-property property">'[object Array]'</span><span class="token operator">:</span> <span class="token string">'array'</span><span class="token punctuation">,</span>      <span class="token string-property property">'[object Date]'</span><span class="token operator">:</span> <span class="token string">'date'</span><span class="token punctuation">,</span>      <span class="token string-property property">'[object RegExp]'</span><span class="token operator">:</span> <span class="token string">'regexp'</span><span class="token punctuation">,</span>      <span class="token string-property property">'[object Object]'</span><span class="token operator">:</span> <span class="token string">'object'</span><span class="token punctuation">,</span>      <span class="token string-property property">'[object Error]'</span><span class="token operator">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span>      <span class="token string-property property">'[object Symbol]'</span><span class="token operator">:</span> <span class="token string">'symbol'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> obj <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">// javascript高级程序设计中提供了一种方法,可以通用的来判断原始数据类型和引用数据类型</span>      <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'function'</span>        <span class="token operator">?</span> class2type<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">'object'</span>        <span class="token operator">:</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 判断两个元素是否相等   * @param {any} o1 比较元素   * @param {any} o2 其他元素   * @returns {Boolean} 是否相等   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">isEqual</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">o1<span class="token punctuation">,</span> o2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> t1 <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> t2 <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 比较类型是否一致</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">!==</span> t2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 类型一致</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">===</span> <span class="token string">'array'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 首先判断数组包含元素个数是否相等</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>o1<span class="token punctuation">.</span>length <span class="token operator">!==</span> o2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token comment">// 比较两个数组中的每个元素</span>      <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">// return item === target</span>        <span class="token keyword">return</span> <span class="token function">isEqual</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> o2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t2 <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// object类型比较类似数组</span>      <span class="token keyword">const</span> keysArr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>keysArr<span class="token punctuation">.</span>length <span class="token operator">!==</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token comment">// 比较每一个元素</span>      <span class="token keyword">return</span> keysArr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">k</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">isEqual</span><span class="token punctuation">(</span>o1<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> o2<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> o1 <span class="token operator">===</span> o2<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// 数组去重</span>  <span class="token keyword">const</span> <span class="token function-variable function">removeDuplicates</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> hasIndex <span class="token operator">=</span> accumulator<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span>        <span class="token function">isEqual</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> item<span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>hasIndex <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        accumulator<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> accumulator<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// 测试</span>  <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token number">123</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">'1'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'meili'</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [123, {a: 1}, a: {b: 1}, {a: "1"}, "meili", {a: 1, b: 2}]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 1. 递归 */</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 2. reduce 简化递归实现 */</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">preVal<span class="token punctuation">,</span> curVal</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> preVal<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>curVal<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flatten</span><span class="token punctuation">(</span>curVal<span class="token punctuation">)</span> <span class="token operator">:</span> curVal<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 3. 扩展运算符简化代码 */</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 4. ES6 新增的 API */</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="树形结构扁平化"><a href="#树形结构扁平化" class="headerlink" title="树形结构扁平化"></a>树形结构扁平化</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> tree <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>    <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span>        <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span>        <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'4'</span><span class="token punctuation">,</span>            <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 1. 递归---深度优先 */</span><span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">treeToArray</span><span class="token punctuation">(</span><span class="token parameter">tree</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> tree<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>i <span class="token punctuation">}</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>      <span class="token comment">// console.log(i)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>children <span class="token operator">&amp;&amp;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">treeToArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">treeToArray</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 2. reduce 简化递归 */</span><span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">treeToArray</span><span class="token punctuation">(</span><span class="token parameter">tree</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> tree<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>i <span class="token punctuation">}</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>        i<span class="token punctuation">,</span>        children <span class="token operator">&amp;&amp;</span> children<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token function">treeToArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">treeToArray</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="扁平化数组转树"><a href="#扁平化数组转树" class="headerlink" title="扁平化数组转树"></a>扁平化数组转树</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token literal-property property">pid</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 1. 递归 */</span><span class="token punctuation">{</span>  <span class="token comment">/**   * 扁平化的数组转换为树形结构   * @param {Array} items 扁平化的数组   * @returns 树形结构的嵌套数据   */</span>  <span class="token keyword">function</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token function-variable function">getChildren</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> pid</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>pid <span class="token operator">===</span> pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> newItem <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>item<span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>          res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newItem<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加到父节点中</span>          <span class="token function">getChildren</span><span class="token punctuation">(</span>newItem<span class="token punctuation">.</span>children<span class="token punctuation">,</span> newItem<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">getChildren</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// console.log(arrayToTree(items))</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 2. map */</span><span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span><span class="token parameter">items<span class="token punctuation">,</span> pid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>      map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">...</span>item<span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// console.log(map)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> newItem <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> parent <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newItem<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newItem<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">arrayToTree</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="打乱数组元素的顺序"><a href="#打乱数组元素的顺序" class="headerlink" title="打乱数组元素的顺序"></a>打乱数组元素的顺序</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">var</span> index<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>len <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>      temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      arr<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>      arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>      len<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">shuffle</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">shuffle</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组的子集判断、交集、并集、差集"><a href="#数组的子集判断、交集、并集、差集" class="headerlink" title="数组的子集判断、交集、并集、差集"></a>数组的子集判断、交集、并集、差集</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token comment">/* 子集判断---使用 every 和 includes，重复元素的情况无法判断 */</span>  <span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr2<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> arr1<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'==============================================='</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">{</span>   <span class="token comment">/* 子集判断---使用 Set */</span>  <span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">isSubset</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> lenB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>    <span class="token keyword">let</span> lenAB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>    <span class="token keyword">return</span> lenB <span class="token operator">===</span> lenAB<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'============================================'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">{</span>  <span class="token comment">/* 数组的并集 */</span>  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> setA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> setB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>setA<span class="token punctuation">,</span> <span class="token operator">...</span>setB<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'==========================================='</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">{</span>  <span class="token comment">/* 数组的交集 */</span>  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> setA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> setB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>setA<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> setB<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>res<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'==========================================='</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">{</span>  <span class="token comment">/* 数组的差集-a 相对于 b */</span>  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> setA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> setB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>setA<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>setB<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>res<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="手写-new"><a href="#手写-new" class="headerlink" title="手写 new"></a>手写 new</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName  <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getFullName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">_new</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> <span class="token operator">...</span>rest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">obj</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> rest<span class="token punctuation">)</span>  <span class="token comment">// console.log(result)</span>  <span class="token keyword">return</span> result <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> result<span class="token operator">:</span> newObj<span class="token punctuation">}</span><span class="token keyword">const</span> tb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'super'</span><span class="token punctuation">,</span> <span class="token string">'lee'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tb1<span class="token punctuation">)</span><span class="token keyword">const</span> tb2 <span class="token operator">=</span> <span class="token function">_new</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token string">'super'</span><span class="token punctuation">,</span> <span class="token string">'lee'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tb2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="手写-instanceof"><a href="#手写-instanceof" class="headerlink" title="手写 instanceof"></a>手写 instanceof</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> print <span class="token operator">=</span> console<span class="token punctuation">.</span>log<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">instance_of</span><span class="token punctuation">(</span><span class="token parameter">object<span class="token punctuation">,</span> constructor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>object <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">===</span> constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    object <span class="token operator">=</span> object<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">instance_of</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> Array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="手写-call"><a href="#手写-call" class="headerlink" title="手写 call"></a>手写 call</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// apply 的参数是 args</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token operator">=</span>window<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'type error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  context<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'lee'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="手写-map"><a href="#手写-map" class="headerlink" title="手写 map"></a>手写 map</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*** map本身可以传入两个参数, 第一个参数是一个函数, 第二个参数是传入执行 callback 函数时被用作this的值. * 如果第二个参数没有传入就是undefined, 而代码中所用的call方法如果第一个参数如果传入的是undefined的话就会默认是全局对象, * 这样逻辑就打通了, 也就是说如果map的第二个参数传入的话就会以传入的参数用作this调用函数, * 如果没有传入的话就会使用默认的全局对象调用函数*/</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myMap</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'[object Function]'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token string">'The first argument must be a function'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> currentArr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> currentArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> currentArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> currentArr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">myMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">++</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">++</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">myMap</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// console.log(arr.map.call({a: 3}))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="封装一个支持设置过期时间的-localStorage"><a href="#封装一个支持设置过期时间的-localStorage" class="headerlink" title="封装一个支持设置过期时间的 localStorage"></a>封装一个支持设置过期时间的 localStorage</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 约定缓存的存储格式为： * name: { *      value: # 缓存的值, *      expires:  # 过期时间 * } */</span><span class="token keyword">class</span> <span class="token class-name">MyLocalStorage</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>storageName <span class="token operator">=</span> <span class="token string">'expiredStorage'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * 获取缓存   * @param {string} name   */</span>  <span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> storages <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>      localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>storageName<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>storages<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 不存在</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'log====='</span><span class="token punctuation">,</span> storages<span class="token punctuation">.</span>expires <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> storages<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>expires<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 存在，但过期了</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> storages<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * 设置缓存   * @param {string} name 缓存名称   * @param {any} value 缓存的值   * @param {any} expires 缓存过期的时间（秒）   */</span>  <span class="token function">set</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> expires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> storages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    storages<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>      value<span class="token punctuation">,</span>      <span class="token literal-property property">expires</span><span class="token operator">:</span> storages<span class="token punctuation">[</span>name<span class="token punctuation">]</span>        <span class="token operator">?</span> storages<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>expires        <span class="token operator">:</span> expires <span class="token operator">===</span> <span class="token keyword">undefined</span>        <span class="token operator">?</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">365</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span>        <span class="token operator">:</span> expires <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>storageName<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>storages<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * 删除指定名称的缓存   * @param {string} name 缓存名称   */</span>  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> storages <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>      localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>storageName<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">delete</span> storages<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>storages<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'{}'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 缓存字段为空对象时，删除该字段</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>storages<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新缓存</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>storageName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="判断是否为-2-的-n-次幂"><a href="#判断是否为-2-的-n-次幂" class="headerlink" title="判断是否为 2 的 n 次幂"></a>判断是否为 2 的 n 次幂</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 通过二进制的方法可以判断一个数num是不是2的n次方幂， * 规律可知，只要是2的次方幂，必然是最高位为1，其余为0，当num-1时，则最高位是0，其余是1. * 按位与运算：  1&amp;1=1  0&amp;1=0 0&amp;0=0 1&amp;0=0 * @param {Number} num  * @returns  */</span><span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="解析-URL-参数"><a href="#解析-URL-参数" class="headerlink" title="解析 URL 参数"></a>解析 URL 参数</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getParams</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([^?&amp;=]+)=([^?&amp;=]+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    obj<span class="token punctuation">[</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'https://a.b.com/c?d=e&amp;f=g'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getParams</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="抽奖简单实现"><a href="#抽奖简单实现" class="headerlink" title="抽奖简单实现"></a>抽奖简单实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//一个从0到100的数组</span>  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//随机打乱这个数组</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="手写请求超时函数"><a href="#手写请求超时函数" class="headerlink" title="手写请求超时函数"></a>手写请求超时函数</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 提供了请求函数 */</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'timeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/* 未提供请求函数，手动实现 */</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">uploadTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求进行中...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'https://baidu.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>          xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span>          xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span>          xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span>        <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'请求失败了...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">uploadTimeout</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'请求超时...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="斐波那契数列的实现与优化"><a href="#斐波那契数列的实现与优化" class="headerlink" title="斐波那契数列的实现与优化"></a>斐波那契数列的实现与优化</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 1. 简单递归实现 * 时间复杂度：O(2^n) * 空间复杂度：O(n) * @param {Number} n * @returns */</span><span class="token keyword">function</span> <span class="token function">fibonacci1</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">fibonacci1</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci1</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 2. 递归 + 缓存 * 时间复杂度：O(n) * 空间复杂度：O(n) * 用first和second来记录当前相加的两个数值，此时就不用两次递归了。 * 因为每次递归的时候n减1，即只是递归了n次，所以时间复杂度是 O(n)。 * 同理递归的深度依然是n，每次递归所需的空间也是常数，所以空间复杂度依然是O(n)。 */</span><span class="token keyword">function</span> <span class="token function">fibonacci2</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> first<span class="token punctuation">,</span> second</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">fibonacci2</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> second<span class="token punctuation">,</span> first <span class="token operator">+</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 3. 循环 + 动态规划 */</span><span class="token keyword">function</span> <span class="token function">fibonacci3</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 4. 循环 + 空间复杂度优化 */</span><span class="token keyword">function</span> <span class="token function">fibonacci4</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> second <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum <span class="token operator">=</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span>    first <span class="token operator">=</span> second<span class="token punctuation">;</span>    second <span class="token operator">=</span> sum<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>拷贝后，新拷贝的对象内部的引用数据类型会随着源对象的变换而变化。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> print <span class="token operator">=</span> console<span class="token punctuation">.</span>log<span class="token punctuation">;</span><span class="token comment">/* 浅拷贝 */</span><span class="token keyword">let</span> a <span class="token operator">=</span>  <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>   <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"美食"</span><span class="token punctuation">,</span> <span class="token string">"音乐"</span><span class="token punctuation">,</span> <span class="token string">"篮球"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">let</span> b<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// for (const i in a) {</span><span class="token comment">//   b[i] = a[i];</span><span class="token comment">// }</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>hobby<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"打游戏"</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**输出 * { name: '李四', age: 23, hobby: [ '美食', '音乐', '打游戏' ] } * { name: '张三', age: 23, hobby: [ '美食', '音乐', '打游戏' ] } */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>拷贝后，新拷贝的对象内部所有数据都是独立存在的，引用类型的数据不会随着源对象的改变而改变。</p><p>两种实现方式：</p><ol><li>递归拷贝<ol><li>考虑ES6之后新增的数据类型；</li><li>当数据层级很深时存在栈溢出的问题；</li><li>无法避免循环引用的问题；</li></ol></li><li>利用JSON函数拷贝<ol><li>只适合拷贝简单的对象，如果拷贝的对象中存在JS原生对象如Date，RegExp、Error或者函数引用拷贝就有问题。</li></ol></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> print <span class="token operator">=</span> console<span class="token punctuation">.</span>log<span class="token punctuation">;</span><span class="token comment">/* 1. 递归拷贝 */</span><span class="token comment">/** * 存在的问题： * 1. 没有考虑ES6新增的数据类型 * 2. 存在栈溢出的风险 * 3. 无法处理循环引用 */</span><span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 类型检测</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> source <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> source <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> source<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 兼容数组类型</span>  <span class="token keyword">let</span> target <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> k <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 如果我们使用for in去遍历对象属性的话，这个对象的原型链上有我们自定义的其他构造函数，</span>    <span class="token comment">// 会将构造函数显示原型的属性也遍历出来。我们必须使用hasOwnProperty来查询是否是本身的元素。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> source<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        target<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        target<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 2. JSON转换 */</span><span class="token keyword">let</span> a <span class="token operator">=</span>  <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>   <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"美食"</span><span class="token punctuation">,</span> <span class="token string">"音乐"</span><span class="token punctuation">,</span> <span class="token string">"篮球"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>hobby<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"打游戏"</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**输出 * { name: '李四', age: 23, hobby: [ '美食', '音乐', '打游戏' ] } * { name: '张三', age: 23, hobby: [ '美食', '音乐', '篮球' ] } */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="References-2"><a href="#References-2" class="headerlink" title="References"></a>References</h4><ol><li><a href="https://blog.csdn.net/l_ppp/article/details/106281069">面试题被问到再也不慌，深究JavaScript中的深拷贝与浅拷贝_「零一」的博客-CSDN博客_js深拷贝和浅拷贝面试题</a></li><li><a href="https://juejin.cn/post/7047007027456901157">手撕面试题（1）——深拷贝 - 掘金 (juejin.cn)</a></li><li><a href="https://segmentfault.com/a/1190000016672263">深拷贝的终极探索（99%的人都不知道） - SegmentFault 思否</a></li></ol><hr><h3 id="输出当前的时间"><a href="#输出当前的时间" class="headerlink" title="输出当前的时间"></a>输出当前的时间</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getNowTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> year <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> month <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  month <span class="token operator">=</span> month <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> month <span class="token operator">:</span> month<span class="token punctuation">;</span>  <span class="token keyword">let</span> day <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  day <span class="token operator">=</span> day <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> day <span class="token operator">:</span> day<span class="token punctuation">;</span>  <span class="token keyword">let</span> week <span class="token operator">=</span> <span class="token string">'日一二三四五'</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> hour <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  hour <span class="token operator">=</span> hour <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> hour <span class="token operator">:</span> hour<span class="token punctuation">;</span>  <span class="token keyword">let</span> minute <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  minute <span class="token operator">=</span> minute <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> minute <span class="token operator">:</span> minute<span class="token punctuation">;</span>  <span class="token keyword">let</span> second <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  second <span class="token operator">=</span> second <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> second <span class="token operator">:</span> second<span class="token punctuation">;</span>  <span class="token keyword">let</span> nowTime <span class="token operator">=</span>    year <span class="token operator">+</span>    <span class="token string">'-'</span> <span class="token operator">+</span>    month <span class="token operator">+</span>    <span class="token string">'-'</span> <span class="token operator">+</span>    day <span class="token operator">+</span>    <span class="token string">' 星期'</span> <span class="token operator">+</span>    week <span class="token operator">+</span>    <span class="token string">' 时间'</span> <span class="token operator">+</span>    hour <span class="token operator">+</span>    <span class="token string">':'</span> <span class="token operator">+</span>    minute <span class="token operator">+</span>    <span class="token string">':'</span> <span class="token operator">+</span>    second<span class="token punctuation">;</span>  <span class="token keyword">return</span> nowTime<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getNowTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现call，apply，bind"><a href="#实现call，apply，bind" class="headerlink" title="实现call，apply，bind"></a>实现call，apply，bind</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 手写 call */</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token operator">=</span>window<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'type error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  context<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bindFn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 判断是否为函数</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">'must be a function'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// 存储函数本身</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取出传入的参数</span>  <span class="token keyword">const</span> <span class="token function-variable function">bound</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> boundArgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拿到传入 bind 返回的函数的参数</span>    <span class="token keyword">return</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>boundArgs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 修改 this 指向并执行</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> bound<span class="token punctuation">;</span> <span class="token comment">// 返回 bind 的函数</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'lee'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">original</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// console.log(this.name);</span>  <span class="token comment">// console.log([a, b]);</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// original {}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'typeof this'</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> b<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// original {name: 2}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 2</span><span class="token punctuation">}</span><span class="token keyword">const</span> bound <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">bindFn</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// bound(2);</span><span class="token keyword">const</span> newBoundResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bound</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new 调用导致 this 失效</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newBoundResult<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="任意进制之间的转换"><a href="#任意进制之间的转换" class="headerlink" title="任意进制之间的转换"></a>任意进制之间的转换</h3><p><a href="https://blog.csdn.net/LilyNothing/article/details/123324362">Ref</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 任意进制转 10 进制 * A进制转换为10进制： 从低位到高位（即从右往左）计算，第0位的权值是A的0次方， * 第1位的权值是A的1次方，第2位的权值A的2次方，依次递增下去， * 把最后的结果相加的值就是十进制的值 * @param {Number} inputValue 当前进制数字的值 * @param {Number} srcBit 当前进制(2进制,3进制,...16进制) * @returns 10 进制的值，Number 类型 */</span><span class="token keyword">function</span> <span class="token function">toDecimal</span><span class="token punctuation">(</span><span class="token parameter">inputValue<span class="token punctuation">,</span> srcBit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> inputValue<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> inputValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'F'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">+=</span>        <span class="token punctuation">(</span>inputValue<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>inputValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> inputValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'f'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">+=</span>        <span class="token punctuation">(</span>inputValue<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      result <span class="token operator">+=</span>        <span class="token punctuation">(</span>inputValue<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    count <span class="token operator">*=</span> srcBit<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 10 进制转任意进制 * 10进制转为B进制：除B取余法，即每次将整数部分除B，余数为该位权上的数， * 而商继续除B，余数又为上一个位权上的数，这个步骤一直持续下去，直到商为0为止， * 最后读数时候，从最后一个余数起，一直到最前面的一个余数。 * @param {Number} number 当前进制数字的值 * @param {Number} targetBit 目标进制(2进制,3进制,...16进制) * @returns 目标进制的值 */</span><span class="token keyword">function</span> <span class="token function">decimalToOther</span><span class="token punctuation">(</span><span class="token parameter">number<span class="token punctuation">,</span> targetBit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    current <span class="token operator">=</span> number <span class="token operator">%</span> targetBit<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>targetBit <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> current <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      current <span class="token operator">=</span> current <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      current <span class="token operator">=</span> current <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    number <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>number <span class="token operator">/</span> targetBit<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 不同进制数字的相互转换 * @param inputValue 当前进制数字的值 * @param srcBit 当前进制(2进制,3进制,...16进制) * @param targetBit 目标进制(2进制,3进制,...16进制) * @return 目标进制的值 */</span><span class="token keyword">function</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token parameter">inputValue<span class="token punctuation">,</span> srcBit<span class="token punctuation">,</span> targetBit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>srcBit <span class="token operator">===</span> targetBit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> inputValue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token function">toDecimal</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">,</span> srcBit<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&gt;=</span> targetBit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'进制转换错误，请检查输入是否合法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">decimalToOther</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> targetBit<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">'0011'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><p>匹配字符串中格式为“yyyy-MM-dd’T’HH:mm:ss”的日期</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span>\d<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token operator">-</span>\d<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">-</span>\d<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span>\w\d<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">:</span>\d<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">:</span>\d<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h3><p><a href="https://zhaoda.net/webpack-handbook/module-system.html">模块系统 | Webpack 中文指南 (zhaoda.net)</a></p><h3 id="循环依赖问题"><a href="#循环依赖问题" class="headerlink" title="循环依赖问题"></a>循环依赖问题</h3><h4 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h4><p><strong>require 加载原理：</strong><code>require</code> 命令第一次加载某个脚本时会执行整个脚本，然后在内存生成一个对象，之后在其他位置再次 require 相同的文件就直到内存中对象的 <code>export</code> 属性上取值。</p><p><strong>循环加载的解决方式：</strong> 一旦出现某个模块被“循环加载”，就只输出已经执行的部分，还未执行的部分不会输出。require 是动态导入，执行到 require 语句时再到对应的文件里面去执行。</p><p><strong>Demo</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* require-a.js */</span>exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'在 a.js 之中，b.done = %j'</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a.js 执行完毕'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* require-b.js */</span>exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./require-a.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'在 b.js 之中，a.done = %j'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b.js 执行完毕'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* CommonJS require 的循环依赖问题 */</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./require-a.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./require-b.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'在 main.js 之中, a.done=%j, b.done=%j'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>done<span class="token punctuation">,</span> b<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在 b.js 之中，a.done = false</span><span class="token comment">// b.js 执行完毕</span><span class="token comment">// 在 a.js 之中，b.done = true</span><span class="token comment">// a.js 执行完毕</span><span class="token comment">// 在 main.js 之中, a.done=true, b.done=true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="ES6-Module"><a href="#ES6-Module" class="headerlink" title="ES6 Module"></a>ES6 Module</h4><p>遇到模块加载命令import时，不会去执行模块，而是只生成一个引用。等到真的需要用到时，再到模块里面去取值。因此，ES6模块是动态引用，不存在缓存值的问题，而且模块里面的变量，绑定其所在的模块。</p><p><a href="https://www.ruanyifeng.com/blog/2015/11/circular-dependency.html">JavaScript 模块的循环加载 - 阮一峰的网络日志 (ruanyifeng.com)</a></p><h3 id="各种打包工具"><a href="#各种打包工具" class="headerlink" title="各种打包工具"></a>各种打包工具</h3><p><a href="http://webpack.wuhaolin.cn/1%E5%85%A5%E9%97%A8/1-2%E5%B8%B8%E8%A7%81%E7%9A%84%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E5%8F%8A%E5%AF%B9%E6%AF%94.html"> 常见的构建工具及对比 · 深入浅出 Webpack (wuhaolin.cn)</a></p><hr><h2 id="token-和-cookie"><a href="#token-和-cookie" class="headerlink" title="token 和 cookie"></a>token 和 cookie</h2><p>【CORS 详解】：<a href="https://www.ruanyifeng.com/blog/2016/04/cors.html">跨域资源共享 CORS 详解 - 阮一峰的网络日志 (ruanyifeng.com)</a></p><p>【cookie 详解】：<a href="https://zh.javascript.info/cookie">Cookie，document.cookie (javascript.info)</a></p><p>【跨域方式详解】：<a href="https://segmentfault.com/a/1190000015597029">javascript - 不要再问我跨域的问题了_个人文章 - SegmentFault 思否</a></p><ol><li>token 放在 localStorage 或 sessionStorage 中<ul><li>缺点：由于 localStorage 和 sessionStorage 都可以被 javascript 访问，所以容易受到 XSS 攻击。尤其是项目中用到很多第三方的 Javascript 类库。<br>另外，需要应用程序来保证 token 只在 https 下传输。</li></ul></li><li>token 放在 cookie 中<ul><li>优点：可以指定 httponly，来防止被 Javascript 读取，也可以指定 secure，来保证 token 只在 https 下传输。</li><li>缺点：<ol><li>不符合Restful 最佳实践。</li><li>容易遭受CSRF攻击 （可以在服务器端检查 Refer 和 Origin）</li></ol></li></ul></li></ol><h3 id="JWT-的使用"><a href="#JWT-的使用" class="headerlink" title="JWT 的使用"></a>JWT 的使用</h3><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息 Authorization 字段里面（Authorization: Bearer）。另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。token 放在 localStorage 或 sessionStorage 中比放在 cookie 中更容易遭到 XSS 攻击；放在 cookie 中可以设置 httpOnly 防止 cookie 被 Javascript 脚本读取，指定 secure 保证 token 只在 https 下传输。</p><p>参考：</p><ol><li><a href="https://restfulapi.cn/page/jwt">JWT 认证 - RESTful API 一种流行的 API 设计风格</a></li><li><a href="https://blog.csdn.net/java_tang_shi_wen/article/details/115027687">session和token认证方式，cookie和localStorage存储，Web安全 ——总结_疯狂踩坑人的博客-CSDN博客_token存储在localstore安全吗</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 基础</title>
      <link href="/2022/08/15/ji-zhu-chen-dian/qian-duan-ji-chu/css/"/>
      <url>/2022/08/15/ji-zhu-chen-dian/qian-duan-ji-chu/css/</url>
      
        <content type="html"><![CDATA[<h2 id="1-布局"><a href="#1-布局" class="headerlink" title="1. 布局"></a>1. 布局</h2><blockquote><ol><li>响应式布局，媒体查询 + 百分比布局 + rem，以及 rem 和 em 的区别</li><li>流式布局 </li><li>知道栅格布局吗？原理是什么？</li><li>flex布局, flex-direction flex-grow  flex-shrink  flex flex-wrap</li><li>做过移动端吗？用到什么适配方法？</li><li>flex布局的意义，再详细介绍</li><li>CSS实现中间自适应，两边固定300px(手写代码)</li><li>flex：1 表示什么？</li></ol></blockquote><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><p>随着互联网时代的发展，我们对网页布局有了新的要求，例如我们可能是通过手机或者电脑来看网页的，而手机和电脑的大小和分辨率都是不一样的，那么就要要求页面能够在不同的设备上呈现相同的效果。因此，一个全新的概念—响应式布局应运而生。<br> 响应式网页设计是一种网页设计的技术做法，该设计可以使网站在不同的设备上浏览时对应不同分辨率都有适合的呈现，减少用户进行缩放，平移等操作。真正的响应式设计方法不仅仅是根据可视化区域的大小改变网页布局，而是要从整体上颠覆当前网页的设计方法，是针对任意设备的网页进行完美布局的一种显示机制，用一套代码解决几乎所有设备的页面展示问题。</p><blockquote><p><strong>标准文档流</strong>（padding+margin+负margin）+浮动 float +定位</p><p>定义：标准文档流就是元素排版过程中，元素会默认的自动从左往右，从上往下的 流式排列方式。前面内容发生了变化，后面的内容位置也会随着发生变化。</p><p><strong>像素：</strong></p><p>像素分为两种类型：css 像素和物理像素。</p><ul><li>css像素：在js或者css代码中使用的px单位就是指的是css像素；</li><li>物理像素：只与设备的硬件密度有关，任何设备的物理像素都是固定的；</li></ul><p><strong>视口：</strong></p><p>（1）布局视口</p><p>布局视口定义了 pc 网页在移动端的默认布局行为，因为通常 pc 的分辨率较大，布局视口默认为 980px。也就是说在不设置网页的 viewport 的情况下，pc 端的网页默认会以布局视口为基准，在移动端进行展示。因此我们可以明显看出来，默认为布局视口时，根植于 pc 端的网页在移动端展示很模糊。</p><p>（2）视觉视口</p><p>视觉视口表示浏览器内看到的网站的显示区域，用户可以通过缩放来查看网页的显示内容，从而改变视觉视口。视觉视口的定义，就像拿着一个放大镜分别从不同距离观察同一个物体，视觉视口仅仅类似于放大镜中显示的内容，因此视觉视口不会影响布局视口的宽度和高度。</p><p>（3）理想视口</p><p>理想视口或者应该全称为“理想的布局视口”，在移动设备中就是指设备的分辨率。换句话说，理想视口或者说分辨率就是给定设备物理像素的情况下，最佳的“布局视口”。</p><p><strong>单位转换</strong></p><p>在不缩放的情况下，CSS 像素=物理像素/分辨率（也叫 DPR（Device pixel ratio，设备像素比））</p><p>1rem = font-size(HTML 元素)</p><p>vw: 相对于视窗的宽度（视窗宽度为 100 vw）</p><p>vh: 相对于视窗的高度（视窗高度为 100 vh）</p><p>vmin：相对于视口*较小尺寸的 1％</p><p>vmax：相对于视口*较大尺寸的 1％</p><p>%：相对于父元素（一般情况下）</p><p>1px = (1/布局视口) * 100 vw</p><p>Reference👉<a href="https://blog.csdn.net/zsl15039718107/article/details/104430854">几种常用的响应式布局解决方案对比(媒体查询、百分比、rem和vw/vh）_zsl888822的博客-CSDN博客</a></p></blockquote><p>实现方案：</p><p><strong>（1）媒体查询</strong></p><p>使用 @media 媒体查询可以针对不同的媒体类型定义不同的样式，特别是响应式页面，可以针对不同屏幕的大小，编写多套样式，从而达到自适应的效果。</p><p><strong>缺点：</strong></p><p>在浏览器大小改变时，需要改变的样式太多，多套样式代码改起来很繁琐。</p><p><strong>（2）百分比布局</strong>（流式布局）</p><p>通过百分比单位 “ % “ 来实现响应式的效果。通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。</p><p> 直观的理解，我们可能会认为子元素的百分比完全相对于直接父元素，height 百分比相 对于 height，width 百分比相对于 width。 padding、border、margin 等等不论是垂直方向还是水平方向，都相对于直接父元素的 width。 除了 border-radius 外，还有比如 translate、background-size 等都是相对于自身的。</p><p><strong>缺点</strong>：</p><p>（1）计算困难，如果我们要定义一个元素的宽度和高度，按照设计稿，必须换算成百分比单位。；<br>（2）各个属性中如果使用百分比，相对父元素的属性并不是唯一的。造成我们使用百分比单位容易使布局问题变得复杂。</p><p><strong>（3）rem布局</strong></p><p>首先 rem 相对于根（html）的 font-size 大小来计算。简单的说它就是一个相对单例 如：<code>font-size: 10px;</code>,那么（1rem = 10px）了解计算原理后首先解决怎么在不同设备上设置 html 的 font-size 大小。其实 rem 布局的本质是等比缩放，一般是基于宽度。</p><p><strong>优点</strong>：可以快速适用移动端布局，字体，图片高度</p><p><strong>缺点</strong>：</p><p>①目前 ie 不支持，对 pc 页面来讲使用次数不多；<br>②数据量大：所有的图片，盒子都需要我们去给一个准确的值才能保证不同机型的适配；<br>③在响应式布局中，必须通过 js 来动态控制根元素 font-size 的大小。也就是说 css 样式和 js 代码有一定的耦合性。且必须将改变 font-size 的代码放在 css 样式之前。</p><p><strong>（4）通过vw/vh来实现自适应</strong></p><p>css3 中引入了一个新的单位 vw/vh，与视图窗口有关，vw 表示相对于视图窗口的宽度，vh 表示相对于视图窗口高度。</p><p><strong>（5）flex 布局</strong></p><p>布局的传统解决方案，基于盒状模型，依赖 display 属性 + position 属性 + float 属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性，指定容器 display: flex 即可。 简单的分为容器属性和元素属性。</p><p><strong>容器的属性：</strong></p><ul><li>  <code>flex-direction</code>：决定主轴的方向（即子 item 的排列方法）flex-direction: row | row-reverse | column | column-reverse;</li><li>  <code>flex-wrap</code>：决定换行规则 flex-wrap: nowrap | wrap | wrap-reverse;</li><li>  flex-flow： .box { flex-flow: || ; }</li><li>  <code>justify-content</code>：对齐方式，水平主轴对齐方式</li><li>  <code>align-items</code>：交叉轴上子项的对齐方式；</li><li>  align-content：针对交叉轴上每一行的子项整体的对齐方式；</li></ul><p><strong>项目的属性（元素的属性）</strong>：</p><ul><li>  order 属性：定义项目的排列顺序，顺序越小，排列越靠前，默认为 0。</li><li>  <code>flex-grow</code> 属性：这个属性规定了 <code>flex-grow</code> 项在 flex 容器中分配剩余空间的相对比例，默认为 0。</li><li>  <code>flex-shrink </code>属性：指定了 flex 元素的收缩规则。flex 元素仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据 flex-shrink 的值。</li><li>  flex-basis 属性：指定了 flex 元素在主轴方向上的初始大小。</li><li>  flex：是 flex-grow 和 flex-shrink、flex-basis 的简写，默认值为 0 1 auto。</li><li>  align-self：允许单个项目与其他项目不一样的对齐方式，可以覆盖。</li><li>  align-items，默认属 性为 auto，表示继承父元素的 align-items 比如说，用 flex 实现圣杯布局。</li></ul><p>（5） <strong>rem 和 em 的区别</strong></p><p>em 和 rem 相对于 px 更具有灵活性，他们是相对长度单位，意思是长度不是定死了的，更适用于响应式布局。</p><p>对于 em 和 rem 的区别一句话概括：<code>em 相对于父元素，rem 相对于根元素</code>。</p><hr><h3 id="grid-栅格布局"><a href="#grid-栅格布局" class="headerlink" title="grid 栅格布局"></a>grid 栅格布局</h3><p>定义：gird 布局即网格布局，一种新的 css 布局模型，擅长将一个页面划分为几个主要的区域，以及定义这些区域的大小位置，层次等关系，是 css 唯一的二维布局。</p><p><strong><code>flex</code> 布局是一维布局，<code>Grid</code> 布局是二维布局</strong>。<code>flex</code> 布局一次只能处理一个维度上的元素布局，一行或者一列。<code>Grid</code> 布局是将容器划分成了“行”和“列”，产生了一个个的网格，我们可以将网格元素放在与这些行和列相关的位置上，从而达到我们布局的目的。</p><p>使用： 我们通过在元素上声明 display:grid 或者 display:inline-grid 来创建一个网格容器，这个元素所有的直系子元素将会成为网格项目。网格轨道：<code>grid-template-columns</code> 和 <code>grid-template-rows</code> 属性来定义网格中的行和列。<code>grid-row-gap</code> 属性、<code>grid-column-gap</code> 属性分别设置行间距和列间距。<code>grid-gap</code> 属性是两者的简写形式。<code>grid-auto-flow</code> 属性控制着自动布局算法怎么样运行，精确指定在网格中被自动布局的元素怎么样排列，默认的放置顺序是先行后列。<code>justify-items</code> 属性设置单元格的内容的水平位置，<code>align-items</code> 设置单元格的垂直位置</p><p><strong>References：</strong></p><ul><li>👉<a href="https://juejin.cn/post/6986645219290644517#heading-6">12～18k的前端面试会问个啥？（答案版上） - 掘金 (juejin.cn)</a></li><li>👉<a href="https://juejin.cn/post/6854573220306255880">最强大的 CSS 布局 —— Grid 布局 - 掘金 (juejin.cn)</a></li></ul><ul><li><input disabled="" type="checkbox"> 如何给图片设置一个兜底图</li><li><input disabled="" type="checkbox"> utf-8 编码 -&gt; 常见的汉字字符占几个字节</li><li><input disabled="" type="checkbox"> 知道样式穿透吗</li><li><input disabled="" type="checkbox"> scss 你是怎么用的</li></ul><h2 id="2-垂直水平居中方式"><a href="#2-垂直水平居中方式" class="headerlink" title="2. 垂直水平居中方式"></a>2. 垂直水平居中方式</h2><blockquote><p>行内元素：</p><ul><li>可以很多个元素在一行显示，不可以设置宽高、边距；</li><li>高度一般由元素内部的字体大小决定，宽度由内容的长度控制；</li><li>a, img, span</li></ul><p>块级元素：</p><ul><li>独占一行</li><li>元素的高度、宽度、行高和边距都是可以设置的。 元素的宽度如果不设置的话，默认为父元素的宽度（父元素宽度100%）。</li><li>h1~6, div, p</li></ul><p>行内块级元素（inline-block）</p><ul><li>可以设置宽高、边距</li><li>可以和其他行内块级元素或行内元素放在一行</li></ul><ol><li>如果已经给一个div的position设置了absolute，如何使他变得水平居中？ （left: 50%, margin-left: -width or transform: translateX(-50%)）</li><li>margin:0 auto是用来做什么的？—水平居中</li><li>一个容器里只有一个元素，怎么让它右对齐？（浮动、绝对定位、flex）</li></ol></blockquote><ul><li><p><strong>水平居中</strong></p><ul><li><p>  对于 行内元素 : <code>text-align: center</code>;</p></li><li><p>对于==确定宽度==的块级元素：</p><p>  （1）width和margin实现。<code>margin: 0 auto</code>;</p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">.father</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.son</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  （2）<code>父元素relative, 子元素absolute，left: 50%, margin-left: -(宽度/2)</code></p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">         <span class="token comment">/* 子绝父相 */</span>        <span class="token selector">.wrap</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.inner</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> sandybrown<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token comment">/* top: 50%; */</span>            <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token comment">/* transform: translate(-50%, -50%); */</span>           <span class="token comment">/* margin-top: -50px; */</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对于宽度未知的块级元素</p><p>  （1）<code>table标签配合margin左右auto实现水平居中</code>。使用table标签（或直接将块级元素设值为 display:table），再通过给该标签添加左右margin为auto。</p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">.big</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 900px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #d72e2e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.one</span> <span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>big<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>子元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  （2）inline-block实现水平居中方法。display：inline-block和text-align:center实现水平居中。</p><p>  （3）<code>绝对定位+transform</code>，translateX可以移动本身元素的50%。</p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">            <span class="token comment">/* 子绝父相 */</span>            <span class="token selector">.big</span> <span class="token punctuation">{</span>                <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>                <span class="token property">width</span><span class="token punctuation">:</span> 900px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> #d72e2e<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">.one</span> <span class="token punctuation">{</span>                <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>                <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token comment">/* transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。*/</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>big<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>子元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  （4）flex布局使用<code>justify-content:center</code></p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">            <span class="token selector">*</span> <span class="token punctuation">{</span>                <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">.father</span><span class="token punctuation">{</span>                <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>                <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>                <span class="token comment">/* align-items: center; */</span> <span class="token comment">/*   */</span>                <span class="token property">min-height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>                <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">.son</span> <span class="token punctuation">{</span>                <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>子元素的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>  ​    </p></li><li><p><strong>垂直居中</strong></p><p>  （1）利用 <code>line-height</code> 实现居中，这种方法适合纯文字类</p><p>  （2）通过设置父容器 <code>相对定位 </code>，子级设置 <code>绝对定位</code>，通过margin实现自适应居中</p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- css 样式 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">.father</span> <span class="token punctuation">{</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.son</span> <span class="token punctuation">{</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- html 结构 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      margin: auto;元素垂直居中    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  （3）弹性布局 flex :父级设置display: flex，子级设置margin为auto实现自适应居中；或者利用flex布局的属性实现水平垂直居中。</p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">.father</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.son</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>flex垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>/* flex布局的属性 */<span class="token comment">&lt;!-- css 样式 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token comment">/* 利用 flex 布局 不需要盒子本身宽高 但需要父级盒子高度*/</span><span class="token selector">.container</span> <span class="token punctuation">{</span>     <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>     <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token comment">/* 垂直居中 */</span>     <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment">/* 水平居中 */</span>     <span class="token property">height</span><span class="token punctuation">:</span>100vh<span class="token punctuation">;</span> <span class="token comment">/* 父元素高度需设置 */</span> <span class="token punctuation">}</span> <span class="token selector">.container div</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span> <span class="token comment">/* 宽高可以不设置 */</span>     <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> greenyellow<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- html 结构 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>利用 flex 布局进行水平垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  （4）父级设置<code>相对定位</code>，子级设置<code>绝对定位</code>，并且通过位移 transform 实现</p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- css 样式 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.div</span> <span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token comment">/* 相对定位或绝对定位均可 */</span>     <span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>     <span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>     <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>     <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>     <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- html 结构 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>利用 transform 进行垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  （5）<code>table 布局</code>，父级通过转换成表格形式，<code>然后子级设置 vertical-align 实现</code>。（需要注意的是：vertical-align: middle使用的前提条件是内联元素以及display值为table-cell的元素）。</p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- css 样式 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token comment">/* table-cell 不需要盒子本身宽高*/</span><span class="token selector">.table-cell</span> <span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token selector">.table-cell div</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span>skyblue<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- html 结构 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table-cell<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">&gt;</span></span>利用 table-cell 进行水平垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>传送门 👉 <a href="https://juejin.cn/post/7008348524530106381"># 图解CSS水平垂直居中常见面试方法</a></p><hr><h2 id="3-移动端适配方式"><a href="#3-移动端适配方式" class="headerlink" title="3. 移动端适配方式"></a>3. 移动端适配方式</h2><blockquote><ol><li>做过移动端吗？用到什么适配方法？</li></ol></blockquote><h3 id="1-媒体查询"><a href="#1-媒体查询" class="headerlink" title="1. 媒体查询"></a>1. 媒体查询</h3><p>通过 CSS 的 @media 媒体查询设置不同的 style。通过媒体查询，我们可以根据不同屏幕设置不同样式，这样就可以实现不同屏幕的适配。</p><p>link 元素中的 CSS 媒体查询，不同屏幕加载不同样式文件：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(max-width: 500px)<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mobile.css<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(min-width: 980px)<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc.css<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>CSS 样式表中的媒体查询：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 414px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>  <span class="token selector">html</span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 64px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 375px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>  <span class="token selector">html</span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 58px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 360px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>  <span class="token selector">html</span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 56px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 320px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>  <span class="token selector">html</span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-动态rem方案"><a href="#2-动态rem方案" class="headerlink" title="2. 动态rem方案"></a>2. 动态rem方案</h3><p> rem是一个相对长度单位，其大小由根元素字体大小决定。</p><p>我们可以采用 rem 为单位设置元素大小。对于不同屏幕，我们只需要动态修改根元素字体大小，元素大小就会同比例改变，从而做到页面的自动适配效果。例如，假设设计稿宽度为 750px，元素A宽度为 300px，在屏幕宽度为 375pt 的屏幕中，设置根元素字体大小为 75px，则元素A宽度为 4rem；在屏幕宽度为 750pt 的屏幕中，只需将根元素字体大小改为 150px，不需要改变元素A的大小，就可以做到页面适配。<a href="https://link.juejin.cn/?target=https://github.com/amfe/article/issues/17">手淘团队的 flexible 方案</a>就是根据以上原理实现的</p><p>根据不同屏幕修改根元素 font-size 大小，一般设置为屏幕宽度的十分之一。</p><h3 id="3-Viewport-方案（推荐）"><a href="#3-Viewport-方案（推荐）" class="headerlink" title="3. Viewport 方案（推荐）"></a>3. Viewport 方案（推荐）</h3><p>上面介绍的动态 rem 方案，其本质是让页面元素大小跟随屏幕宽度的变化成比例缩放。CSS Viewport units （视口单位）正是一种相对于屏幕宽高的一种长度单位，并且兼容性越来越好。视口单位有：vw、vh、vmin和vmax。vw 单位表示根元素宽度的百分比，1vw 等于视口宽度的1%。</p><p>**References: **👉<a href="https://juejin.cn/post/6953091677838344199">移动端适配的5种方案 - 掘金 (juejin.cn)</a></p><hr><h2 id="4-CSS选择器"><a href="#4-CSS选择器" class="headerlink" title="4. CSS选择器"></a>4. CSS选择器</h2><blockquote><ol><li>CSS选择器、选择器优先级、子选择器：选第n个child应该怎么写？</li><li>选择器优先级</li><li></li></ol></blockquote><p><strong>选择器</strong></p><ul><li><p>  通配符选择器(*)</p></li><li><p>  id选择器(#myid)</p></li><li><p>  标签选择器(div, h1,p)</p></li><li><p>标签属性选择器(a[rel=”external”])</p><ul><li><p>根据一个元素上的某个标签的属性的存在以选择元素的不同方式</p>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a[title]</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token selector">a[href="https://example.com"]</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>  类选择器(.myclass)</p></li><li><p>伪类选择器(a:hover, li:nth-child)</p><ul><li><p>:nth-child(<em>n</em>) 选择器匹配属于其父元素的第 N 个子元素，不论元素的类型。</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">p</span><span class="token operator">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>  相邻兄弟选择器（h1 + p）</p></li><li><p>子选择器(ul &gt; li)</p><ul><li>  ul的第一个后代中的li</li></ul></li><li><p>后代选择器(li a)</p><ul><li>  li的所有后代中的a</li></ul></li></ul><p><strong>优先级：</strong></p><ul><li>  <code>!important</code></li><li>  内联样式（1000）</li><li>  ID选择器（0100）</li><li>  类选择器/属性选择器/伪类选择器（0010）</li><li>  元素选择器/伪元素选择器（0001）</li><li>  关系选择器/通配符选择器（0000）</li></ul><p>带!important 标记的样式属性优先级最高； 样式表的来源相同时：<br><code>!important &gt; 行内样式&gt;ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</code></p><hr><h2 id="5-CSS-position属性"><a href="#5-CSS-position属性" class="headerlink" title="5. CSS position属性"></a>5. CSS position属性</h2><blockquote><ol><li><p>css各种定位，每种定位相对于哪，每种定位的特点</p></li><li><p>position有几种常见的属性？</p></li><li><p>css position属性有哪些？区别是什么？详细说说fixed的定位方式？</p></li></ol></blockquote><h3 id="position-属性的值有哪些及其区别"><a href="#position-属性的值有哪些及其区别" class="headerlink" title="position 属性的值有哪些及其区别"></a>position 属性的值有哪些及其区别</h3><p><strong>固定定位 fixed</strong>： 元素的位置相对于浏览器窗口是固定位置，即使窗口是滚动的它也不会移动。Fixed 定位使元素的位置与文档流无关，因此==不占据空间==。 Fixed 定位的元素和其他元素重叠。</p><p><strong>相对定位 relative</strong>： 如果对一个元素进行相对定位，它将出现在它所在的位置上。然后，可以通过设置垂直 或水平位置，让这个元素“相对于”它的起点进行移动。 在使用相对定位时，无论是 否进行移动，元素仍然==占据原来的空间==。因此，<u>移动元素会导致它覆盖其它框。</u></p><p><strong>绝对定位 absolute</strong>： 绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于&lt;html&gt;。absolute 定位使元素的位置与文档流无关，因此==不占据空间==。 absolute 定位的元素和其他元素重叠。</p><p><strong>粘性定位 sticky</strong>： 元素先按照普通文档流定位，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。而后，元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。</p><ul><li>粘性定位的元素是依赖于用户的滚动，在<strong>position:relative</strong> 与 <strong>position:fixed</strong> 定位之间切换。它的行为就像 <strong>position:relative;</strong> 而当页面滚动超出目标区域时，它的表现就像 **position:fixed;**，它会固定在目标位置。</li></ul><p><strong>默认定位 Static</strong>： 默认值。没有定位，元素出现在正常的流中（静态定位的元素不会受到 top, bottom, left, right影响。）。 inherit: 规定应该从父元素继承 position 属性的值。</p><hr><h2 id="6-CSS盒子模型"><a href="#6-CSS盒子模型" class="headerlink" title="6. CSS盒子模型"></a>6. CSS盒子模型</h2><blockquote><ol><li>css两种盒子模型的宽度。</li></ol></blockquote><p><a href="https://vue3js.cn/interview/css/box.html#%E4%B8%80%E3%80%81%E6%98%AF%E4%BB%80%E4%B9%88">面试官：说说你对盒子模型的理解? | web前端面试 - 面试官系列 (vue3js.cn)</a></p><hr><h2 id="7-CSS画三角形，画圆"><a href="#7-CSS画三角形，画圆" class="headerlink" title="7. CSS画三角形，画圆"></a>7. CSS画三角形，画圆</h2><blockquote><ol><li><strong>css实现三角形</strong>！（我答的transform: rotate(45deg)然后在父元素overflow: hidden，插问了rotate的旋转中心怎么确定。总之是没答到正解border的点子上）</li><li></li></ol></blockquote><h3 id="7-1-画三角形"><a href="#7-1-画三角形" class="headerlink" title="7.1 画三角形"></a>7.1 画三角形</h3><p>（1）<code>border</code></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*记忆口诀：盒子宽高均为零，三面边框皆透明。 */</span><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    <span class="token property">border-right</span><span class="token punctuation">:</span> 100px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> 100px solid #ff0<span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> 100px solid transparent<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 100px solid transparent<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）<code>clip-path裁剪</code></p><blockquote><p>clip-path的语法有4种：</p><ul><li>inset（定义矩形）</li><li>circle（定义圆）</li><li>ellipse（定义椭圆）</li><li>polygon（定义多边形）</li></ul></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.triangle</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>      <span class="token comment">/* 对应三角形的三个顶点 */</span>      <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 100%<span class="token punctuation">,</span> 50% 0<span class="token punctuation">,</span> 100% 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-画圆"><a href="#7-2-画圆" class="headerlink" title="7.2 画圆"></a>7.2 画圆</h3><p>（1）<code>border-radius</code></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.circle</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> cyan<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）<code>clip-path</code></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.circle</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>      <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">circle</span><span class="token punctuation">(</span>50%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="8-CSS动画"><a href="#8-CSS动画" class="headerlink" title="8. CSS动画"></a>8. CSS动画</h2><hr><h2 id="9-单行文本省略，多行文本省略分情况实现"><a href="#9-单行文本省略，多行文本省略分情况实现" class="headerlink" title="9. 单行文本省略，多行文本省略分情况实现"></a>9. 单行文本省略，多行文本省略分情况实现</h2><h3 id="1-单行文本省略"><a href="#1-单行文本省略" class="headerlink" title="1 单行文本省略"></a>1 单行文本省略</h3><p>文本在一行内显示，超出部分以省略号的形式展现。</p><p>实现方式涉及的css属性：</p><ul><li>text-overflow：规定当文本溢出时，显示省略符号来代表被修剪的文本</li><li>white-space：设置文字在一行显示，不能换行</li><li>overflow：文字长度超出限定宽度，则隐藏超出的内容</li></ul><p><code>overflow</code>设为<code>hidden</code>，普通情况用在块级元素的外层，隐藏内部溢出元素，或者配合下面两个属性实现文本溢出省略</p><p><code>white-space:nowrap</code>，作用是设置文本不换行，是<code>overflow:hidden</code>和<code>text-overflow：ellipsis</code>生效的基础</p><p><code>text-overflow</code>属性值有如下：</p><ul><li>clip：当对象内文本溢出部分裁切掉</li><li>ellipsis：当对象内文本溢出时显示省略标记（…）</li></ul><p><code>text-overflow</code>只有在设置了<code>overflow:hidden</code>和<code>white-space:nowrap</code>才能够生效的</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">p</span><span class="token punctuation">{</span>        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span>400px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span>40px<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span>1px solid red<span class="token punctuation">;</span>        <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>        <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> 这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-多行文本省略"><a href="#2-多行文本省略" class="headerlink" title="2 多行文本省略"></a>2 多行文本省略</h3><p>多行文本溢出的时候，我们可以分为两种情况：</p><ul><li>基于高度截断</li><li>基于行数截断</li></ul><h4 id="基于高度截断"><a href="#基于高度截断" class="headerlink" title="#基于高度截断"></a><a href="https://vue3js.cn/interview/css/single_multi_line.html#%E5%9F%BA%E4%BA%8E%E9%AB%98%E5%BA%A6%E6%88%AA%E6%96%AD">#</a>基于高度截断</h4><h4 id="伪元素-定位"><a href="#伪元素-定位" class="headerlink" title="#伪元素 + 定位"></a><a href="https://vue3js.cn/interview/css/single_multi_line.html#%E4%BC%AA%E5%85%83%E7%B4%A0-%E5%AE%9A%E4%BD%8D">#</a>伪元素 + 定位</h4><p>核心的<code>css</code>代码结构如下：</p><ul><li><code>position: relative</code>: 为伪元素绝对定位</li><li><code>overflow: hidden</code>: 文本溢出限定的宽度就隐藏内容）</li><li><code>position: absolute</code>: 给省略号绝对定位</li><li><code>line-height: 20px</code>：结合元素高度,高度固定的情况下,设定行高, 控制显示行数</li><li><code>height: 40px</code>：设定当前元素高度</li><li><code>::after {} </code>：设置省略号样式</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">.demo</span> <span class="token punctuation">{</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>      <span class="token property">line-height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.demo::after</span> <span class="token punctuation">{</span>      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"..."</span><span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> 0 20px 0 10px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>demo<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>    力拔山兮气盖世⑵，时不利兮骓不逝⑶。骓不逝兮可奈何⑷，虞兮虞兮奈若何⑸！  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现原理很好理解，就是通过伪元素绝对定位到行尾并遮住文字，再通过 <code>overflow: hidden</code> 隐藏多余文字</p><p>这种实现具有以下优点：</p><ul><li>兼容性好，对各大主流浏览器有好的支持</li><li>响应式截断，根据不同宽度做出调整</li></ul><p>一般文本存在英文的时候，可以设置<code>word-break: break-all</code>使一个单词能够在换行时进行拆分</p><h4 id="基于行数截断"><a href="#基于行数截断" class="headerlink" title="基于行数截断"></a>基于行数截断</h4><p>纯<code>css</code>实现也非常简单，核心的<code>css</code>代码如下：</p><ul><li><code>-webkit-line-clamp: 2</code>：用来限制在一个块元素显示的文本的行数，为了实现该效果，它需要组合其他的WebKit属性）</li><li><code>display: -webkit-box</code>：和1结合使用，将对象作为弹性伸缩盒子模型显示</li><li><code>-webkit-box-orient: vertical</code>：和1结合使用 ，设置或检索伸缩盒对象的子元素的排列方式</li><li><code>overflow: hidden</code>：文本溢出限定的宽度就隐藏内容</li><li><code>text-overflow: ellipsis</code>：多行文本的情况下，用省略号“…”隐藏溢出范围的文本</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">  <span class="token selector">p</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>    <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>    <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>  这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本  这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，上述使用了<code>webkit</code>的<code>CSS</code>属性扩展，所以兼容浏览器范围是<code>PC</code>端的<code>webkit</code>内核的浏览器，由于移动端大多数是使用<code>webkit</code>，所以移动端常用该形式</p><p>需要注意的是，如果文本为一段很长的英文或者数字，则需要添加<code>word-wrap: break-word</code>属性</p><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p>👉<a href="https://vue3js.cn/interview/css/single_multi_line.html#%E4%BA%8C%E3%80%81%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F">面试官：如何实现单行／多行文本溢出的省略样式？ | web前端面试 - 面试官系列 (vue3js.cn)</a></p><hr><h2 id="10-BFC-块级格式化上下文"><a href="#10-BFC-块级格式化上下文" class="headerlink" title="10 BFC(块级格式化上下文)"></a>10 BFC(块级格式化上下文)</h2><blockquote><ol><li>外边距塌陷产生的原因 -&gt; 如何解决</li></ol></blockquote><p><strong>BFC的概念</strong></p><p><code>BFC</code> 是 <code>Block Formatting Context </code>的缩写，即块级格式化上下文。<code>BFC</code>是CSS布局的一个概念，是一个独立的渲染区域，规定了内部box如何布局， 并且这个区域的子元素不会影响到外面的元素，其中比较重要的布局规则有内部 box 垂直放置，计算 BFC 的高度的时候，浮动元素也参与计算。</p><p><strong>BFC的原理布局规则</strong></p><ul><li>  内部的Box会在<code>垂直方向</code>，一个接一个地放置</li><li>  Box<code>垂直方向的距离由margin决定</code>。<strong>属于同一个BFC的两个相邻Box的margin会发生重叠</strong></li><li>  每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反</li><li>  BFC的区域<code>不会与float box重叠</code></li><li>  BFC是一个独立容器，容器里面的<code>子元素不会影响到外面的元素</code></li><li>  计算BFC的高度时，<code>浮动元素也参与计算高度</code></li><li>  元素的类型和<code>display属性，决定了这个Box的类型</code>。不同类型的Box会参与不同的<code>Formatting Context</code>。</li></ul><p><strong>如何创建BFC？</strong></p><ul><li>  根元素，即HTML元素</li><li>  float的值不为none</li><li>  position为absolute或fixed</li><li>  display的值为inline-block、table-cell、table-caption</li><li>  overflow的值不为visible</li></ul><p><strong>BFC的使用场景</strong></p><ul><li>  去除边距重叠现象</li><li>  清除内部浮动（让父元素的高度包含子浮动元素）</li><li>  避免某元素被浮动元素覆盖</li></ul><p><a href="https://vue3js.cn/interview/css/BFC.html#%E4%B8%80%E3%80%81%E6%98%AF%E4%BB%80%E4%B9%88">面试官：谈谈你对BFC的理解？ | web前端面试 - 面试官系列 (vue3js.cn)</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web性能的商业案例</title>
      <link href="/2022/07/27/ji-zhu-chen-dian/qian-duan-jin-jie/web-xing-neng-de-shang-ye-an-li/"/>
      <url>/2022/07/27/ji-zhu-chen-dian/qian-duan-jin-jie/web-xing-neng-de-shang-ye-an-li/</url>
      
        <content type="html"><![CDATA[<div class="admonition info"><p>本文翻译自<a href="https://developer.mozilla.org/en-US/docs/Learn/Performance/business_case_for_performance">MDN</a>。</p></div><h1 id="web性能的商业案例"><a href="#web性能的商业案例" class="headerlink" title="web性能的商业案例"></a>web性能的商业案例</h1><p>我们已经讨论了web性能的重要性。您已经了解了需要做什么来优化web性能。但是，你如何说服你的客户和/或管理层对性能进行优先排序和投资？在本节中，我们将讨论创建一个明确的商业案例，以说服决策者进行投资。</p><hr><h2 id="将性能作为业务重点"><a href="#将性能作为业务重点" class="headerlink" title="将性能作为业务重点"></a>将性能作为业务重点</h2><p>我们已经讨论了优先考虑性能如何改善用户体验，从而提高收入。我们知道，不优先考虑web性能可能会导致业务收入损失。本文讨论了某些业务指标如何与用户的web性能体验直接相关，以及如何应用服务设计来提升用户的web性能体验。它强调了理解累积体验如何影响转化率和保留率的重要性。</p><hr><h3 id="性能预算"><a href="#性能预算" class="headerlink" title="性能预算"></a>性能预算</h3><p>设置 web 性能预算可以帮助您确保团队保持网站正常运行，并有助于防止倒退。性能预算是一组限制，用于指定必须维护的限制，例如允许的最大 HTTP 请求数、所有组合资源的最大总大小、特定设备上允许的最小 FPS 等。预算可以应用于单个文件、文件类型、页面上加载的所有文件、特定指标或一段时间内的阈值。预算反映了可实现的目标；无论是基于时间、数量还是基于规则。</p><p>定义和推广预算有助于性能支持者在竞争利益（如营销、销售，甚至其他可能想要添加视频、第三方脚本甚至框架的开发人员）面前获得良好的用户体验。性能预算有助于开发团队保护用户的最佳性能，同时使企业能够开拓新市场并提供定制体验。</p><hr><h2 id="关键性能指标（-Key-Performance-Indicators-）"><a href="#关键性能指标（-Key-Performance-Indicators-）" class="headerlink" title="关键性能指标（ Key Performance Indicators ）"></a>关键性能指标（ Key Performance Indicators ）</h2><p>将关键绩效指标（KPI）设置为目标可以突出同时也是业务目标的绩效目标。KPI可以是一组重要的业务指标，用于衡量用户体验和性能对业务一线的影响，也可以是一种展示性能优先级优势的方法。以下是需要考虑的一些关键绩效指标：</p><p><strong>转换率</strong> （<strong>Conversion Rate</strong>）</p><p>采取预期行动的流量的百分比，例如完成购买或注册新闻稿。当业务站点运行缓慢时，可能会阻止用户完成预期的任务。这可能导致较低的转换率。</p><p><strong>现场时间</strong> （<strong>Time on Site</strong>）</p><p>您的用户在您的网站上总共花费的平均时间。当一个网站的性能缓慢，用户更有可能放弃网站过早，这可能导致低时间的网站指标。</p><p><strong>Net Promotion Score</strong></p><p>Net Promotion Score (NPS) 是评估公司品牌、产品或服务的顾客忠诚度的指标。糟糕的用户表现体验可以与糟糕的品牌声誉相提并论。</p><p>设置转化率，现场时间，和/或净推广得分作为 KPI 给予财务和其他业务目标价值的网络绩效工作，并得到帮助促进买入，与指标证明的努力值得。</p>]]></content>
      
      
      <categories>
          
          <category> 技术沉淀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS性能特点</title>
      <link href="/2022/07/27/ji-zhu-chen-dian/qian-duan-jin-jie/css-xing-neng-te-dian/"/>
      <url>/2022/07/27/ji-zhu-chen-dian/qian-duan-jin-jie/css-xing-neng-te-dian/</url>
      
        <content type="html"><![CDATA[<div class="admonition info"><p>本文翻译自<a href="https://developer.mozilla.org/en-US/docs/Learn/Performance/CSS">MDN</a>。中文<a href="https://developer.mozilla.org/zh-CN/docs/Learn/Performance/CSS">MDN</a>。</p></div><h1 id="CSS性能优化"><a href="#CSS性能优化" class="headerlink" title="CSS性能优化"></a>CSS性能优化</h1><p>绘制未设置样式的页面，然后在解析样式后重新绘制，这将是一种糟糕的用户体验。因此，CSS 是渲染阻塞，除非浏览器知道当前不需要 CSS。一旦下载了 CSS 并构建了 CSS 对象模型，浏览器就可以绘制页面。浏览器遵循特定的渲染路径：绘制仅在布局后发生，而布局是在创建渲染树后发生的，而渲染树又需要 DOM 树和 CSSOM 树。要优化 CSSOM 构造，请删除不必要的样式，缩小、压缩和缓存它，并将页面加载时不需要的 CSS 拆分为其他文件，以减少 CSS 渲染阻塞。</p><hr><h2 id="优化渲染块"><a href="#优化渲染块" class="headerlink" title="优化渲染块"></a>优化渲染块</h2><p>CSS 可以通过媒体查询将样式范围扩展到特定条件。媒体查询对于快速响应的 web 设计非常重要，可以帮助我们优化关键的渲染路径。浏览器会阻止渲染，直到解析所有这些样式，但不会阻止对其知道不会使用的样式（例如打印样式表）的渲染。通过基于媒体查询将CSS拆分为多个文件，可以防止在下载未使用的 CSS 时出现渲染阻塞。要创建非阻塞 CSS 链接，请将未立即使用的样式（如打印样式）移动到单独的文件中，在 HTML 标记中添加一个链接，并添加一个媒体查询，在本例中表示它是一个打印样式表。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"styles.css"</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> blocking <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"print.css"</span> media<span class="token operator">=</span><span class="token string">"print"</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> not blocking <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"mobile.css"</span> media<span class="token operator">=</span><span class="token string">"screen and (max-width: 480px)"</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> not blocking on large screens <span class="token operator">--</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>默认情况下，浏览器假设每个指定的样式表都是渲染块。通过在<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries">媒体查询</a>中添加属性，告诉浏览器何时应用样式表。当浏览器看到样式表时，它知道它只需要将其应用于特定场景，它仍会下载样式表，但不会渲染块。通过将CSS分离为多个文件，在本例中，主渲染块文件要小得多，从而减少了渲染被阻塞的时间。<code>media styles.CSS</code></p><hr><h2 id="在GPU上设置动画"><a href="#在GPU上设置动画" class="headerlink" title="在GPU上设置动画"></a>在GPU上设置动画</h2><p>浏览器经过优化，可以处理 CSS 动画，并且可以很好地处理不触发回流（因此也可以重新绘制）的动画属性。为了提高性能，可以将正在设置动画的节点从主线程移动到 GPU 上。导致合成的属性包括3D变换（<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform">transform:translateZ()</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotate3d">rotate3d()</a>等）、animating transform 和 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/opacity"><code>opacity</code></a>、 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position"><code>position: fixed</code></a>，<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/will-change"><code>will-change</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/filter"><code>filter</code></a>。一些元素，包括<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video"><code>&lt;video&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas"><code>&lt;canvas&gt;</code></a> 和  <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe"><code>&lt;iframe&gt;</code></a>，也在它们自己的层上。当元素升级为层（也称为合成层）时，将在 GPU 中对变换属性设置动画，从而提高性能，尤其是在移动设备上。</p><hr><h2 id="will-change-属性"><a href="#will-change-属性" class="headerlink" title="will-change 属性"></a>will-change 属性</h2><p>CSS 的 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/will-change">will-change</a> 属性告知浏览器元素的预期更改方式。浏览器可能会在实际更改元素之前进行优化。这些类型的优化可以通过在实际需要之前进行潜在的昂贵工作来提高页面的响应能力。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">will-change</span><span class="token punctuation">:</span> opacity<span class="token punctuation">,</span> transform<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="admonition info"><p>注：<code>will-change</code> 旨在作为解决现有性能问题的最后手段。它不应用于预测性能问题。</p></div><hr><h2 id="font-display-属性"><a href="#font-display-属性" class="headerlink" title="font-display 属性"></a>font-display 属性</h2><p>应用于 @font-face 规则，字体显示属性定义了浏览器加载和显示字体文件的方式，允许在加载字体或无法加载字体时，文本以回退字体显示。这通过使文本可见而不是空白屏幕来提高性能，取舍是闪烁未设置样式的文本。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> someFont<span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/path/to/fonts/someFont.woff<span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> 400<span class="token punctuation">;</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token property">font-display</span><span class="token punctuation">:</span> fallback<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="contain-属性"><a href="#contain-属性" class="headerlink" title="contain 属性"></a>contain 属性</h2><p><code>contain</code> CSS 属性允许作者指示元素及其内容尽可能独立于文档树的其余部分。这允许浏览器为 DOM 的有限区域而不是整个页面重新计算布局、样式、绘制、大小或它们的任何组合。</p><hr><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2>]]></content>
      
      
      <categories>
          
          <category> 技术沉淀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML性能特点</title>
      <link href="/2022/07/27/ji-zhu-chen-dian/qian-duan-jin-jie/html-xing-neng-te-dian/"/>
      <url>/2022/07/27/ji-zhu-chen-dian/qian-duan-jin-jie/html-xing-neng-te-dian/</url>
      
        <content type="html"><![CDATA[<div class="admonition info"><p>本文翻译自<a href="https://developer.mozilla.org/en-US/docs/Learn/Performance/HTML">MDN</a>。</p></div><h1 id="HTML性能特点"><a href="#HTML性能特点" class="headerlink" title="HTML性能特点"></a>HTML性能特点</h1><p>默认情况下，HTML是快速且可访问的。作为开发人员，我们的工作是确保在创建或编辑 HTML 代码时保留这两个属性。例如，当<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video"><code>&lt;video&gt;</code></a>嵌入的文件大小太大，或者网页未针对移动设备进行优化时，可能会发生复杂情况。本模块旨在引导您完成可以大大提高网页质量的关键HTML性能功能。</p><hr><h2 id="影响性能的元素和属性"><a href="#影响性能的元素和属性" class="headerlink" title="影响性能的元素和属性"></a>影响性能的元素和属性</h2><ul><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture">The `` Element</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video">The `` Element</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source">The `` Element</a></p></li><li><p>The <code>&lt;img&gt; srcset</code> attribute</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images">Responsive images</a></li></ul></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload">Preloading content with <code>rel="preload"</code></a> - <a href="https://w3c.github.io/preload/">(https://w3c.github.io/preload/</a>)</p></li><li><p><code>async</code> / <code>defer</code> attributes</p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe"><code>&lt;iframe&gt;</code></a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object"><code>&lt;object&gt;</code></a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script"><code>script</code></a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel"><code>rel</code> attribute</a></p></li></ul><hr><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2>]]></content>
      
      
      <categories>
          
          <category> 技术沉淀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript性能</title>
      <link href="/2022/07/27/ji-zhu-chen-dian/qian-duan-jin-jie/javascript-xing-neng/"/>
      <url>/2022/07/27/ji-zhu-chen-dian/qian-duan-jin-jie/javascript-xing-neng/</url>
      
        <content type="html"><![CDATA[<div class="admonition info"><p>本文翻译自<a href="https://developer.mozilla.org/en-US/docs/Learn/Performance/JavaScript">MDN</a>。</p></div><h1 id="JavaScript性能"><a href="#JavaScript性能" class="headerlink" title="JavaScript性能"></a>JavaScript性能</h1><p>虽然图像和视频占了平均网站下载字节数的70% 以上，但是 JavaScript 对性能有更大的负面影响。本文将介绍由脚本引起的性能问题，并介绍为 Web 性能优化 JavaScript 的技巧和窍门。</p><p>与图像和视频类似，提高性能的最佳方法是省略实际上不必要的内容。但并非所有下载的字节都具有相同的影响。必须下载、解析和执行 JavaScript 字节。JavaScript 影响下载性能。我们将介绍一些技巧和窍门，以尽量减少对下载的影响。但是 JavaScript 也会消耗主线程、 CPU 和电池。它可以使用户界面感觉没有反应或者很糟糕。我们还将介绍处理这个问题的概念。</p><hr><h2 id="下载的影响"><a href="#下载的影响" class="headerlink" title="下载的影响"></a>下载的影响</h2><p>Web 应用程序包含很多 JavaScript。许多应用程序都是使用 JavaScript 框架或多个框架构建的，还有一些附加的依赖项。通常会添加第三方脚本和 API，包括 A/B 测试、跟踪像素以及地图和支持特性等特性。所有这些 JavaScript 都必须下载。最终会的。</p><p>性能优化应包括：</p><ul><li><strong>减少所需的 JavaScript 数量。</strong>一些需要复杂JavaScript的功能可以通过几行JavaScript来完成。需要一个用于其他功能的库可能会改善开发人员的体验，但这一切都需要JavaScript吗？有更轻的重量或自制的解决方案吗？有些功能可能不是必需的，尽管它们可能会增加一些闪光点，但就性能而言，该功能的成本值得吗？</li><li><strong>删除未使用的代码。</strong></li><li><strong>将 JavaScript 拆分为较小的文件。</strong>将 JavaScript 代码拆分为关键部分和非关键部分。像webpack这样的模 module bundlers 支持代码拆分。</li><li><strong>优化这些较小的文件。</strong><a href="https://developer.mozilla.org/en-US/docs/Glossary/minification">Mnification</a> 减少了文件中的字符数，从而减少了 JavaScript 的字节数或占比。<a href="https://developer.mozilla.org/en-US/docs/Glossary/GZip_compression">Gzipping</a> 会进一步压缩文件，即使您不缩小，也应该使用。<a href="https://developer.mozilla.org/en-US/docs/Glossary/brotli_compression">Brotli</a> 类似于 Gzip，通常优于 Gzip 的压缩。</li></ul><hr><h2 id="渲染效果"><a href="#渲染效果" class="headerlink" title="渲染效果"></a>渲染效果</h2><p>Web 应用程序包含大量的 JavaScript。许多应用程序都是使用一个或多个 JavaScript 框架构建的，并具有几个额外的依赖项。通常会添加第三方脚本和 API，包括 A/B 测试、跟踪像素以及地图和支持功能等功能。</p><hr><h2 id="Battery-impact"><a href="#Battery-impact" class="headerlink" title="Battery impact"></a>Battery impact</h2><hr><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>虽然优化媒体文件和脚本将使您在Web性能优化方面走得很远，但触及网页的所有内容都会影响性能。在下一篇文章中，我们将介绍一些可能影响性能的 HTML 功能，包括一些专门为提高性能而创建的属性。</p>]]></content>
      
      
      <categories>
          
          <category> 技术沉淀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多媒体-图像与影片</title>
      <link href="/2022/07/26/ji-zhu-chen-dian/qian-duan-jin-jie/duo-mei-ti-tu-xiang-yu-ying-pian/"/>
      <url>/2022/07/26/ji-zhu-chen-dian/qian-duan-jin-jie/duo-mei-ti-tu-xiang-yu-ying-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="多媒体：图像与影片"><a href="#多媒体：图像与影片" class="headerlink" title="多媒体：图像与影片"></a>多媒体：图像与影片</h1><p>媒体，换句话说就是图像跟影片，平均占了网站超过 70%的下载流量。以下载的效能来考虑的话，减少媒体数量和档案大小是一个简单可以实现的目标。 这篇文章聚焦在优化图像跟影片来改善网站的效能。</p><div class="admonition info"><p class="admonition-title">备注</p><p>这是一篇进阶的在 web 上优化多媒体的介绍，包含基本的原则还有技巧，想了更多的话，可以看 <a href="https://images.guide/">https://images.guide</a>。</p></div><hr><h2 id="为什么要优化你的多媒体"><a href="#为什么要优化你的多媒体" class="headerlink" title="为什么要优化你的多媒体"></a>为什么要优化你的多媒体</h2><p>对于平均的网站, <a href="https://discuss.httparchive.org/t/state-of-the-web-top-image-optimization-strategies/1367">51% 的频宽消耗来自图像, 而影像则是 25%</a>，所以我们可以说处理和优化你的多媒体是很重要的。</p><p>你必须考虑流量的使用. 很多的人都是使用流量有限制的上网方案， 或是用多少付多少的上网方案，也就是根据用了多少 MB 来付费。这样的问题不是只发生在新兴国家的市场. 在 2018 年, <a href="https://www.ofcom.org.uk/__data/assets/pdf_file/0021/113169/Technology-Tracker-H1-2018-data-tables.pdf">英国仍有 24% 在使用「用多少付多少」的方案</a>。</p><p>你还需要考虑记忆体的问题，因为许多移动设备的 RAM 都有限。有一件很重要的事你必须要记住，下载的图像是被储存在记忆体裡的。</p><hr><h2 id="优化图像传输"><a href="#优化图像传输" class="headerlink" title="优化图像传输"></a>优化图像传输</h2><p>儘管是频宽的最大消耗者，但因为图像是非同步载入的，所以访问者可以在下载的同时看到页面。因此，它们对<a href="https://developer.mozilla.org/en-US/docs/Learn/Performance/Perceived_performance">感知性能的影响</a>远低于许多人的预期。 然而，图像在内容中很常被使用，因此，重要的应该是让访问者尽快地看到它们，以获得良好的体验。</p><h3 id="载入策略"><a href="#载入策略" class="headerlink" title="载入策略"></a>载入策略</h3><p>对于大多数网站来说，最大改进之一是将不在视窗裡的图像做 lazy-loading ，而不是在初始页面载入时就全部下载下来，不管访问者是否之后会往下滚动查看它们。 许多 JavaScript 函式库都可以为你实现这个功能，例如说 lazysize，并且浏览器的供应商也正在着手原生的 <code>lazyload</code> 属性，然而目前还处于实验阶段。</p><p>除了载入图像的子集之外，接下来您还应该研究一下图像本身的格式：</p><ul><li>你是否正在载入最佳格式？ （见下文）</li><li>你载入的尺寸正确吗？</li><li>你已经压缩图像了吗？ (查看 <a href="https://imageoptim.com/">ImageOptim</a>)</li></ul><h3 id="最佳格式"><a href="#最佳格式" class="headerlink" title="最佳格式"></a>最佳格式</h3><p>这非常值得用一个章节来介绍。因为为图像选择正确的格式可能很棘手。格式通常取决于图像的用途：</p><ul><li><strong>Progressive JPEG</strong>—不需要移动卷轴就能看到的网页图像。</li><li><strong>WebP / JPEG-XR / JPEG2000</strong>—往下移动卷轴才能看到网页图像。</li><li><strong>PNG / WebP</strong>—有透明度的图像。</li><li><strong>SVG</strong>—向量图, 图示 (备注： SVGs 比 icon fonts 还要好得多！).</li></ul><p>优先在不需要移动卷轴就能看到的网页区域使用 Progressive JPEG 的原因是因为它们会逐渐地进行渲染（因此得名），这意味着用户可以先看到低解析度的版本，然后再逐渐地变得清晰。而不是从顶部一行一行的以最高解析度来载入图像，或甚至只有在完全下载好后才显示。</p><h3 id="控制下载图像的优先级别（和顺序）"><a href="#控制下载图像的优先级别（和顺序）" class="headerlink" title="控制下载图像的优先级别（和顺序）"></a>控制下载图像的优先级别（和顺序）</h3><p>将最重要的图像更早地呈现在访问者面前，可以改善感知性能。</p><p>第一件要确认的事情是，你的前景图像标籤 <code>&lt;img /&gt;</code> 跟你定义在 CSS 裡 <code>background-image</code> 的背景图像 — 前景图像比背景图像被赋予更高的优先级别。</p><p>其次，通过采用优先级别提示，你可以在图像标籤中添加<code>importance</code> 属性来进一步控制优先级别。轮播是一个在图像上使用优先级别提示的例子，它的第一个图像的优先级高于其他的图像。</p><h3 id="渲染策略"><a href="#渲染策略" class="headerlink" title="渲染策略"></a>渲染策略</h3><p>由于图像是非同步载入的，并且会在第一次渲染后继续载入，因此，如果在载入之前未定义尺寸的话，则可能会导致页面内容的重新编排。比如说，当图像载入时，文字内容可能会被挤压到下面。所以， 很重要的是，定义 <code>width</code> 跟 <code>height</code> 或是新的 <code>intrinsicsize</code> 属性。</p><p>对于任何的背景图像，设置 <code>background-color</code> 的值非常重要，因为在图像下载之前，它能让上面的内容是能够被阅读的。</p><h2 id="优化影像传送"><a href="#优化影像传送" class="headerlink" title="优化影像传送"></a>优化影像传送</h2><p>为了确保您不会将不必要的大文件发送给用户，最好<a href="https://developer.mozilla.org/zh-TW/docs/Learn/Performance/Multimedia#compress"> 压缩所有你要传输的影像</a>，<a href="https://developer.mozilla.org/zh-TW/docs/Learn/Performance/Multimedia#omptimize">优化<code>&lt;source&gt;</code> 顺序</a>, 设定 <a href="https://developer.mozilla.org/en-US/docs/Learn/Performance/Multimedia#video_autoplay">autoplay</a>, <a href="https://developer.mozilla.org/zh-TW/docs/Learn/Performance/Multimedia#muted">移除静音影像的声音</a>, <a href="https://developer.mozilla.org/en-US/docs/Learn/Performance/Multimedia#video_preload">优化影像预载</a>, 还有 <a href="https://developer.mozilla.org/en-US/docs/Learn/Performance/Multimedia#consider_streaming">考虑串流</a> 这部影像。</p><h3 id="压缩所有影像"><a href="#压缩所有影像" class="headerlink" title="压缩所有影像"></a>压缩所有影像</h3><p>大多数的影像压缩工作都包含，比较影像裡的相邻帧，并删除原始帧和后续帧中相同的细节。你想同时压缩影像并将其汇出为多种影像格式, 包含 WebM，MPEG-4/H.264，以及 Ogg/Theora.</p><p>你用来创建影像的软体可能包含优化档案大小的功能。如果没有的话，那么可以考虑几种线上工具，像是之后篇章会讨论的 <a href="https://www.ffmpeg.org/">FFmpeg</a>，他可以协助编码，解码，转换，以及呈现其他神奇的功能。</p><h3 id="优化-lt-source-gt-顺序"><a href="#优化-lt-source-gt-顺序" class="headerlink" title="优化 <source> 顺序"></a>优化 &lt;source&gt; 顺序</h3><p>从最小到最大来排序影像的来源。例如说，给定三个压缩影像，分别为 10 MB，12MB，以及 13MB, 把最小的摆在第一个，最大的摆在最后一格。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- WebM: 10 MB --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video.webm<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/webm<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- MPEG-4/H.264: 12 MB --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- Ogg/Theora: 13 MB --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video.ogv<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/ogv<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就顺序的角度来说，浏览器会下载它看到的第一个影像来源，因此先让他载入一个较小的影像。就＂最小＂的角度来说，要确认你的压缩影响仍然看起来不会太糟。有几个演算法可能会让你的影像看起来像是个会动的 gif 。虽然 128 Kb 的影像可能在用户体验上会比 10 MB 的影像好，可是把看起来像是 gif 粒状的影像放在内容后面，也可能会对你的品牌产生负面影响。</p><p>查看 <a href="http://caniuse.com/#search=video">CanIUse.com</a> 来确认现今浏览器对于影像以及不同媒体格式的支持。</p><h3 id="影像自动播放"><a href="#影像自动播放" class="headerlink" title="影像自动播放"></a>影像自动播放</h3><p>为了确保循环播放背景影像，你需要向影像标籤裡添加多个属性： <code>autoplay</code>, <code>muted</code>, 以及 <code>playsinline.</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">autoplay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">loop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">muted</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">playsinline</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>backgroundvideo.mp4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>虽然属性 <code>loop</code> 和 <code>autoplay</code> 在对于影像的循环跟自动播放很合理，可是 <code>muted</code> 属性在行动装置的浏览器裡是必须添加的。</p><p><code>Playsinline</code> 在行动装置裡的 Safari 是必须的，他让影像可以在不需要全萤幕的模式下被播放。</p><h3 id="移除静音影像的声音"><a href="#移除静音影像的声音" class="headerlink" title="移除静音影像的声音"></a>移除静音影像的声音</h3><p>如果你有一个 <code>hero-video</code> 或是其他静音影片, 请将声音从影像中移除。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">autoplay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">loop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">muted</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">playsinline</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hero-video<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>banner_video.webm<span class="token punctuation">"</span></span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>video/webm; codecs=<span class="token punctuation">"</span>vp8, vorbis<span class="token punctuation">"</span><span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>web_banner.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段 <code>hero-video</code> 代码, 常出现在许多研讨会网站以及公司的主页， 它是个包括自动播放，循环播放和静音的影像。它不包含任何控制选单，因此无法收听声音。通常它是没有声音的，但仍然存在音轨，因此它仍会消耗频宽。然而，我们没有理由将频宽分给静音影像的声音。移除声音可以节省 20% 的频宽。这代表，如果你的影像是 10 MB，则节省了 2 MB。</p><p>根据您的影像创作软体，你也许可以在汇出和压缩过程中删除声音。 如果没有，那么有一个免费的工具 <a href="https://www.ffmpeg.org/">FFmpeg</a> ，可以使用以下指令来为你完成此任务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg -i original.mp4 -an -c:v copy audioFreeVersion.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>FFmpeg</code> 称自己为＂用于记录，转换和串流音频和影像的完整，跨平台解决方案＂。</p><h3 id="影像预载"><a href="#影像预载" class="headerlink" title="影像预载"></a>影像预载</h3><p>preload 属性具有 3 个可用选项：<code>auto</code>|<code>metadata</code>|<code>none</code>。预设选项是 <code>metadata</code>.</p><p>将选项更改为 <code>auto</code> 会告诉浏览器自动下载整个影像。仅有在极有可能播放时才应该执行此操作，否则会浪费大量的频宽。</p><p><code>preload="metadata"</code> 最多可让 3％ 的影像在页面加载时被下载。 然后对于较大的影像来说，这可能或是大量的频宽。</p><p><code>preload="none"</code> 不会在播放之前下载任何的影像。 这会延迟影像的啟动时间，但能够为播放可能性较低的影像保存大量的频宽。</p><h3 id="考虑串流"><a href="#考虑串流" class="headerlink" title="考虑串流"></a>考虑串流</h3><p><a href="https://www.smashingmagazine.com/2018/10/video-playback-on-the-web-part-2/">串流影像让适当的影像大小和频宽</a> (根据网路速度) 被传递给用户。 就像使用响应式图像一样，正确大小的影像将被传递到浏览器，从而确保用户的快速影像啟动、低缓衝以及优化的播放。</p>]]></content>
      
      
      <categories>
          
          <category> 技术沉淀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web性能的衡量</title>
      <link href="/2022/07/26/ji-zhu-chen-dian/qian-duan-jin-jie/web-xing-neng-de-heng-liang/"/>
      <url>/2022/07/26/ji-zhu-chen-dian/qian-duan-jin-jie/web-xing-neng-de-heng-liang/</url>
      
        <content type="html"><![CDATA[<div class="admonition info"><p>本文翻译自<a href="https://developer.mozilla.org/en-US/docs/Learn/Performance/Measuring_performance">MDN</a>。</p></div><h1 id="web性能的衡量"><a href="#web性能的衡量" class="headerlink" title="web性能的衡量"></a>web性能的衡量</h1><p>衡量性能提供了一个重要的指标来帮助您评估应用程序、站点或 Web 服务的成功。</p><p>例如，您可以使用性能指标来确定您的应用程序如何执行与竞争对手相比，或者您可以比较您的应用程序的性能跨版本。您选择度量的指标应该与您的用户、站点和业务目标相关。应该以一致的方式收集和测量它们，并以非技术涉众可以使用和理解的格式进行分析。</p><p>本文介绍了 Web 性能指标，您可以使用这些指标来衡量和优化站点的性能。</p><hr><h2 id="Performance-APIs"><a href="#Performance-APIs" class="headerlink" title="Performance APIs"></a>Performance APIs</h2><p>在为 Web 编写代码时，可以使用大量的 Web API 来创建自己的性能度量工具。</p><p>您可以使用导航定时 API 来衡量客户端 Web 性能; 包括卸载前一页所需的时间、域查找所需的时间、执行窗口的加载处理程序所花的总时间等等。您可以将 API 用于与下图中显示的所有导航事件相关的度量。</p><p><img src="https://developer.mozilla.org/en-US/docs/Learn/Performance/Measuring_performance/navigationtimingapi.jpg" alt="浏览器导航事件"></p><p>Performance API 提供对当前页的性能相关信息的访问，包括 Performance Timeline API、导航计时 API、用户计时 API 和资源计时 API。这些接口允许精确测量 JavaScript 任务完成所需的时间。</p><p>PerformanceEntry 对象是性能时间线的一部分。性能条目可以通过在应用程序的显式点上创建性能标记或度量(例如通过调用 mark ()方法)来直接创建。性能条目也是以间接的方式创建的; 例如加载资源，比如图像。</p><p>PerformanceObserver API 可以用来观察性能测量事件，当新的性能条目记录在浏览器的性能时间表中时，它可以通知您。</p><p>虽然本文不深入讨论如何使用这些 API，但了解它们的存在是很有用的。您还可以参考导航和计时文章，以获得有关使用性能 WebAPI 的进一步示例。</p><hr><h2 id="Tools-and-metrics"><a href="#Tools-and-metrics" class="headerlink" title="Tools and metrics"></a>Tools and metrics</h2><p>有许多不同的工具可以帮助您提高性能。一般可分为两类:</p><ul><li>指示或衡量性能的工具，例如 <a href="https://pagespeed.web.dev/">PageSpeed Insights</a> 或 Firefox <a href="https://firefox-source-docs.mozilla.org/devtools-user/network_monitor/index.html">Network Monitor</a> 和 <a href="https://firefox-source-docs.mozilla.org/devtools-user/performance/index.html">Performance Monitor</a>。这些工具可显示 Web 应用或网站加载的速度或速度。它们还指示可以改进以优化 Web 应用的区域。</li><li>用于更新代码以使您的 Web 应用或网站性能更好的工具。例如，捆绑工具将代码打包到单个文件中，以减少 HTTP 请求的数量，或者从代码中删除所有空格以使文件变小的缩微器。</li></ul><p>我们将在本课程中讨论这两个类别。除了讨论性能指标，我们当然还会讨论用来衡量网站性能是否有所提高的指标。</p><hr><h3 id="General-performance-reporting-tools"><a href="#General-performance-reporting-tools" class="headerlink" title="General performance reporting tools"></a>General performance reporting tools</h3><p>像 PageSpeed Insights 这样的工具可以衡量网站的性能。您可以输入一个 URL 并在几秒钟内得到一个性能报告。该报告包含有关您的网站如何执行的分数，无论是在移动和桌面。这是一个很好的开始，让你了解你已经做得很好的地方和可以改进的地方。</p><p>在撰写本文时，MDN 的业绩报告摘要与下列内容类似:</p><p><img src="https://developer.mozilla.org/en-US/docs/Learn/Performance/Measuring_performance/pagespeed-insight-mozilla-homepage.png" alt="MDN网站的性能表现"></p><p>性能报告包含诸如用户在页面上显示任何内容之前需要等待多长时间、显示页面需要下载多少字节等信息。它还让您知道测量值被认为是好的还是坏的。</p><p>Webpagetest.org 是自动测试站点并返回有用指标的工具的另一个例子。</p><p>现在试着在 webpagetest.org 和 PageSpeed Insights 上运行你最喜欢的网站，看看得分是多少。</p><hr><h3 id="Network-tools"><a href="#Network-tools" class="headerlink" title="Network tools"></a>Network tools</h3><p>大多数浏览器都有可用的工具，您可以使用这些工具来对加载的页面运行并确定它们的执行情况。例如，Firefox 网络监视器返回从网络下载的所有资产的详细信息，以及显示每个资产下载所用时间的时间图。</p><p><img src="https://developer.mozilla.org/en-US/docs/Learn/Performance/Measuring_performance/network-monitor.png" alt="浏览器的网络工具示例"></p><p>当您执行不同的操作时，您还可以使用 Performance Monitor 来度量 Web 应用程序或站点的用户界面的性能。这表明可能会减慢你的网络应用程序或网站的功能。</p><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>本文提供了 Web 性能指标的简要概述，以帮助您了解在 Web 应用程序或站点上可以衡量什么。接下来，您将了解感知性能和一些技术，以使不可避免的性能损害对用户显得不那么严重，或者完全掩盖它们。</p>]]></content>
      
      
      <categories>
          
          <category> 技术沉淀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感知性能</title>
      <link href="/2022/07/26/ji-zhu-chen-dian/qian-duan-jin-jie/gan-zhi-xing-neng/"/>
      <url>/2022/07/26/ji-zhu-chen-dian/qian-duan-jin-jie/gan-zhi-xing-neng/</url>
      
        <content type="html"><![CDATA[<div class="admonition info"><p class="admonition-title">info</p><p>本文翻译自<a href="https://developer.mozilla.org/zh-CN/docs/Learn/Performance/Perceived_performance">MDN</a>。</p></div><h1 id="感知性能"><a href="#感知性能" class="headerlink" title="感知性能"></a>感知性能</h1><p>​        <a href="https://developer.mozilla.org/en-US/docs/Glossary/Perceived_performance"><strong>感知性能 (en-US)</strong></a>是用户对网站速度的感受。用户如何看待性能与任何客观统计数据一样重要，甚至更重要，但它是主观的，并且不易测量。感知性能是用户视角，而不是指标。</p><p>​        本文简要介绍了感知性能，着眼于用户的感知，以及可以使用哪些客观工具来衡量这类主观因素。</p><p>​        性能是关于用户视角的。网站加载和渲染的速度比网站实际加载和渲染的速度对用户体验的影响更大。即使一个操作需要很长时间(因为延迟或者主线程不可用) ，在用户等待的时候，通过显示加载旋转器，或者一系列有用的提示和技巧(或者笑话，或者其他你认为合适的东西) ，也可以让用户保持忙碌。这种方法比什么都不显示要好得多，因为这会让用户感觉花费的时间长得多，并可能导致用户认为它已经坏了并放弃使用。</p><p>​        了解您的网站加载速度以及对用户交互的响应程度至关重要;更重要的是实际下载时间，但难以量化。您网站的某些区域可能无法更快地完成，但即使othser部分中讨论的指标无法改进，您也可以使其<em>感觉</em>更快。</p><p>​        没有独角兽度量标准可以衡量用户的感受，但是度量标准在衡量改进(和回归)方面是有用的。相关的测量包括第一次有意义的绘制(FMP) ，最大满意度绘制(LCP) ，交互时间(TTI) ，渲染开始，DOM 交互和速度指数。</p><p>​        浏览器会报告第一次绘制，并提供页面开始变化的时间(以毫秒为单位) ; 但这种变化可以是简单的背景颜色更新，或者是更不明显的变化。它不表示完整性，并且可能报告没有绘制任何可见内容的时间。First Contentful Paint (FCP)报告了浏览器第一次渲染任何重要内容的时间，包括文本、前景或背景图像、画布或 SVG; 捕捉了加载体验的开始。但是，仅仅因为有内容，并不意味着它是有用的内容或者用户有内容可以消费。第一个有意义的绘制，或 FMP，是当内容出现在屏幕上，实际上是有意义的; 这是一个更好的衡量用户感知加载体验，但仍然不理想。最大内容绘图(LCP)度量，在最大内容绘图 API 中定义，报告在 viewport 中可见的最大内容元素的呈现时间。</p><p>​        速度指数还用于近似感知性能: 它测量可见屏幕上要绘制的像素的平均时间。它没有考虑到抖动，也没有权衡哪些内容对用户更重要，所以它不是一个完美的度量。</p><p>​        这些指标与初始负载和渲染有关。同样重要的是，一旦用户开始与站点交互，要确保站点感觉快速。因此，交互时间是一个很好的度量标准; 它是加载过程的最后一个长任务完成的时刻，UI 可用于用户交互，但有延迟。</p><p>​        用户界面缺乏或响应能力不足和恶搞都会损害感知性能。尽管一项任务可能需要很长的时间，但是有很多方法可以让它看起来更快。有几个提高感知性能的技巧。</p><h2 id="提高感知性能"><a href="#提高感知性能" class="headerlink" title="提高感知性能"></a>提高感知性能</h2><p>​        了解网络、浏览器的工作原理、用户对时间的感知等，可以帮助您更好地理解如何改进用户交互。然而，你并不需要知道一切事物的来龙去脉，包括人类大脑是如何工作的，来提高对速度的感知。</p><p>​        感觉某件事发生的快慢很大程度上取决于用户是主动还是被动地等待这件事发生。等待可以有一个主动和被动阶段。当用户处于活动状态——移动鼠标、思考、被入侵时，他们处于活动状态。被动阶段发生在用户被动地等待时，就像盯着单色屏幕一样。如果被动和主动等待时间在客观上相等，用户会估计被动等待时间长于主动等待时间。如果不能客观地进一步减少加载、呈现或响应时间，那么将等待转换为主动等待而不是被动等待可以使其感觉更快。</p><p>​        这里有一些技巧和窍门可以遵循。如果你想深入研究，这些快速提示中的一些有完整的文章。</p><p>​        尽可能快地显示内容，或者至少显示页面的某些部分，指示内容正在加载，对于提高感知性能至关重要。例如，因为页面渲染是通过加载和解析 CSS 和 JavaScript 来阻塞的，所以最小化需要加载的 CSS 和 JS 的数量将对提高感知性能产生重大影响。尽管字节可能是相同的，但是不阻止页面呈现会使加载感觉更快。</p><p>​        这里有一些技巧有助于提升性能：</p><h3 id="最小化初始加载"><a href="#最小化初始加载" class="headerlink" title="最小化初始加载"></a>最小化初始加载</h3><p>​        要提升可感知性能，请最小化页面初始加载。换句话说，首先下载将实际显示的所有内容，但仅下载实际使用的内容，然后下载其余内容。因为最终要下载所有资源，所以实际上资源总量并没有改善——实际上还需要增加一些代码。但因为暂不需要的资源被延后加载了，所以用户并不会感知资源量的增加，而会感受到页面加载更快了。</p><p>​        为了最大程度地<a href="https://onilab.com/blog/perceived-performance-vs-actual-load-time-5-secrets-of-lightning-fast-magento-store/">减少初始加载资源</a>，请从内容中分离交互式功能，以便优先加载初始化时所需的可见内容——文本、样式和图像。延迟加载其余资源。</p><p>​        不要加载初始页面未使用或看不到的图像或脚本，而在页面可用后延时加载，或在需要使用时按需加载。 在初始页面加载之后加载其他资源可提高感知性能。 在初始请求中加载基本数据，并仅根据需要逐步加载功能部件和数据，有助于改善低带宽和低规格硬件的体验。</p><p>​        此外，您应该优化需加载的资源。图片和视频应以最佳格式、压缩后的大小和正确尺寸进行投放。</p><h3 id="防止内容跳转和其他重排"><a href="#防止内容跳转和其他重排" class="headerlink" title="防止内容跳转和其他重排"></a>防止内容跳转和其他重排</h3><p>​        图片或其他资产导致内容被下推或跳转到不同的位置，如加载第三方广告，可以使页面感觉它仍在加载，并对感知性能有害。当不由用户交互启动时，内容重流对用户体验尤其不利。如果某些资产的加载速度比其他资产慢，在其他内容已经绘制到屏幕上之后加载元素，提前计划并在布局中为它们留出空间，这样内容就不会跳跃或调整大小，特别是在网站变得交互性之后。</p><h3 id="避免字体文件延迟"><a href="#避免字体文件延迟" class="headerlink" title="避免字体文件延迟"></a>避免字体文件延迟</h3><p>​        字体的使用既有助于用户体验，也有害于用户体验。选择正确的字体是一种艺术形式，可以大大改善用户体验。字体也可能损害用户体验，特别是如果使用的字体需要导入，如果导入不是最佳的，或者如果使用 Comic Sans (开玩笑)。无样式文本的闪烁和文本丢失都会损害性能。</p><p>​        使备用字体的大小和效果相同，以便当字体加载页面变化不太明显。</p><h3 id="交互类元素是可交互的"><a href="#交互类元素是可交互的" class="headerlink" title="交互类元素是可交互的"></a>交互类元素是可交互的</h3><p>​        确保可见的交互元素始终是交互式和响应式的。如果输入元素是可见的，那么用户应该能够毫无延迟地与它们进行交互。当用户花费超过50毫秒的时间做出反应时，他们会感到某些东西滞后。当内容重新绘制的速度低于16.67 ms (或60帧率)或者重新绘制的时间间隔不均匀时，他们会觉得页面很糟糕。</p><h3 id="使任务启动器显得更具交互性"><a href="#使任务启动器显得更具交互性" class="headerlink" title="使任务启动器显得更具交互性"></a>使任务启动器显得更具交互性</h3><p>​        在按下按键而不是等待按键弹起时发出请求，可以使感知的内容加载减少 200 毫秒。在 KEYUP 后添加一个有趣但不显眼的 200 毫秒动画，甚至可以再降低 200 毫秒的加载感知。您并没有节省 400 毫秒的时间，但是用户直到真正等待内容时，才感觉到他们在等待内容。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        通过将尽可能多的下载、渲染和等待时间转换为主动阶段，并减少任何被动等待，即使客观测量保持不变，用户也会感觉内容下载、渲染和响应更快。现在我们知道了应该加快什么，让我们看看一些度量标准，并了解如何度量这些事件。</p>]]></content>
      
      
      <categories>
          
          <category> 技术沉淀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web性能</title>
      <link href="/2022/07/26/ji-zhu-chen-dian/qian-duan-jin-jie/web-xing-neng/"/>
      <url>/2022/07/26/ji-zhu-chen-dian/qian-duan-jin-jie/web-xing-neng/</url>
      
        <content type="html"><![CDATA[<div class="admonition info"><p>本文翻译自<a href="https://developer.mozilla.org/en-US/docs/Learn/Performance/What_is_web_performance">MDN</a>。</p></div><h1 id="web性能"><a href="#web性能" class="headerlink" title="web性能"></a>web性能</h1><p>​        Web 性能就是让网站变得更快，包括让缓慢的过程看起来更快。网站是否加载迅速，允许用户快速开始与其交互，并且如果某些东西需要花时间加载(例如加载微调器) ，是否能提供令人放心的反馈？滚动和动画是否流畅？这篇文章提供了一个客观的，可测量的网络性能的简要介绍 * ，看看什么技术，技术和工具涉及到网络优化。</p><p>* 相对于主观的，感知的表现，将在下一篇文章中讨论。</p><h2 id="什么是网络性能？"><a href="#什么是网络性能？" class="headerlink" title="什么是网络性能？"></a>什么是网络性能？</h2><p>Web 性能是对网站或应用程序的客观测量和感知用户体验。这包括以下主要领域:</p><ul><li><strong>减少整体负载时间</strong>：呈现网站所需的文件需要多长时间才能下载到用户的计算机上？这往往会受到<a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Understanding_latency">延迟</a>，文件有多大，文件数量以及其他因素的影响。一般的策略是使文件尽可能小，尽可能减少HTTP请求的数量，并采用巧妙的加载技术（如<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload">预加载</a>）来使文件更快地可用。</li><li><strong>使网站尽快可用：</strong>这基本上意味着以合理的顺序加载您的网站资源，以便用户可以非常快速地开始实际使用它。当用户继续执行主要任务时，任何其他资产都可以继续在后台加载，有时我们只在实际需要时才加载资产（这称为<a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Lazy_loading">延迟加载</a>）。<u>测量网站在开始加载后需要多长时间才能达到可用开始的时间称为<a href="https://developer.mozilla.org/en-US/docs/Glossary/Time_to_interactive">交互时间</a>。</u></li><li><strong>流畅性和互动性</strong>：应用程序使用起来是否可靠和愉快？滚动是否流畅？按钮是可点击的吗？弹出窗口是否快速打开，它们是否在打开时会顺利地制作动画？在使应用程序感觉流畅时，需要考虑许多最佳实践，例如使用CSS动画而不是JavaScript进行动画，并最大限度地减少由于DOM中的更改而导致的UI所需的重绘次数。</li><li><a href="https://developer.mozilla.org/en-US/docs/Learn/Performance/Perceived_performance"><strong>感知性能</strong></a>：一个网站在用户看来有多快，对用户体验的影响比网站实际上有多快更大。用户如何看待您的性能与任何客观统计数据一样重要，甚至可能更重要，但这是主观的，不容易衡量。感知性能是用户视角，而不是度量标准。即使一个操作需要很长时间(因为延迟或其他原因) ，在用户等待的时候，通过显示一个加载旋转器，或者一系列有用的提示和技巧(或者笑话，或者其他你认为合适的东西) ，也可以让用户保持忙碌。这种方法比什么都不显示要好得多，因为这会让用户感觉花费的时间长得多，并可能导致用户认为它已经坏了并放弃使用。</li><li><a href="https://developer.mozilla.org/en-US/docs/Learn/Performance/Measuring_performance"><strong>性能测量</strong></a>：Web 性能涉及测量应用程序的实际速度和感知速度，在可能的情况下进行优化，然后监视性能，以确保优化的内容保持优化。这涉及许多指标（可以指示成功或失败的可衡量指标）和用于衡量这些指标的工具，我们将在本模块中讨论这些指标。</li></ul><p>总之，许多特性会影响性能，包括延迟、应用程序大小、 DOM 节点的数量、发出的资源请求的数量、 JavaScript 性能、 CPU 负载等等。重要的是尽量减少加载和响应时间，并添加额外的功能来隐藏延迟，使体验尽可能可用和交互，尽快，同时异步加载在较长的尾部部分的体验。</p><div class="admonition warning"><p class="admonition-title">注意</p><p>Web 性能既包括加载时间、每秒帧数和<a href="https://developer.mozilla.org/en-US/docs/Glossary/Time_to_interactive">交互时间</a>等客观度量，也包括加载内容所花费多长时间的主观体验。</p></div><hr><h2 id="内容的呈现方式"><a href="#内容的呈现方式" class="headerlink" title="内容的呈现方式"></a>内容的呈现方式</h2><p>​        为了有效地理解Web性能，其背后的问题以及我们上面提到的主要主题领域，您确实应该了解有关浏览器如何工作的一些细节。这包括：</p><ul><li><strong>浏览器的工作原理</strong>。当您请求URL并点击/时，浏览器会找出保存该网站文件的服务器的位置，建立与该网站的连接并请求文件。有关详细概述<a href="https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work">，请参阅填充页面：浏览器的工作原理</a>。</li><li><strong>源顺序</strong>。HTML 索引文件的源顺序会显著影响性能。从索引文件链接到的其他资源的下载通常是顺序的，基于源顺序，但这可以纵并且绝对应该优化，意识到某些资源会阻止其他下载，直到其内容被解析和执行。</li><li><strong>关键路径</strong>。这是浏览器在从服务器下载文件后用来构造 Web 文档的过程。浏览器遵循一组明确定义的步骤，优化关键呈现路径以优先显示与当前用户操作相关的内容，将显著缩短内容呈现时间。有关详细信息<a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Critical_rendering_path">，请参阅关键渲染路径</a>。</li><li><strong>文档对象模型</strong>。文档对象模型 （DOM） 是一种树结构，它将 HTML 的内容和元素表示为节点树。这包括所有 HTML 属性和节点之间的关系。加载页面后进行广泛的 DOM 操作（例如，添加、删除或移动节点）可能会影响性能，因此有必要了解如何使用 DOM，以及如何缓解此类问题。有关详细信息，请参阅<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">文档对象模型</a>。</li><li><strong>延迟</strong>。我们之前简要提到了这一点，但简而言之，延迟是您的网站资源从服务器传输到用户计算机所需的时间。建立TCP和HTTP连接涉及开销，并且在网络上来回推送请求和响应字节时存在一些不可避免的延迟，但是有一些方法可以减少延迟（例如，通过下载更少的文件来减少HTTP请求的数量，使用<a href="https://developer.mozilla.org/en-US/docs/Glossary/CDN">CDN</a>使您的网站在全球范围内更加普遍地执行， 并使用 HTTP/2 从服务器更有效地提供文件）。您可以在<a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Understanding_latency">了解延迟</a>中阅读有关此主题的所有信息。</li></ul><hr><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>到此为止，我们希望我们对 Web 性能主题的简要概述能够帮助您了解它的全部内容，并使您对学习更多内容感到兴奋。接下来，我们将看看感知性能，以及如何使用一些聪明的技术，使一些不可避免的性能损害对用户显得不那么严重，或者完全掩盖它们。</p>]]></content>
      
      
      <categories>
          
          <category> 技术沉淀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渲染页面：浏览器的工作原理</title>
      <link href="/2022/07/26/ji-zhu-chen-dian/qian-duan-jin-jie/liu-lan-qi-yuan-li/"/>
      <url>/2022/07/26/ji-zhu-chen-dian/qian-duan-jin-jie/liu-lan-qi-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器工作原理"><a href="#浏览器工作原理" class="headerlink" title="浏览器工作原理"></a>浏览器工作原理</h1>]]></content>
      
      
      <categories>
          
          <category> 技术沉淀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器工作原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码阅读之虚拟DOM</title>
      <link href="/2022/07/23/ji-zhu-chen-dian/qian-duan-jin-jie/xu-ni-dom/vue-xu-ni-dom/"/>
      <url>/2022/07/23/ji-zhu-chen-dian/qian-duan-jin-jie/xu-ni-dom/vue-xu-ni-dom/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue虚拟DOM"><a href="#Vue虚拟DOM" class="headerlink" title="Vue虚拟DOM"></a>Vue虚拟DOM</h1><p>函数柯里化</p>]]></content>
      
      
      <categories>
          
          <category> 技术沉淀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>snabbdom源码总结</title>
      <link href="/2022/07/23/ji-zhu-chen-dian/qian-duan-jin-jie/xu-ni-dom/snabbdom/"/>
      <url>/2022/07/23/ji-zhu-chen-dian/qian-duan-jin-jie/xu-ni-dom/snabbdom/</url>
      
        <content type="html"><![CDATA[<h1 id="snabbdom"><a href="#snabbdom" class="headerlink" title="snabbdom"></a>snabbdom</h1><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><p>1、init: 使用模块初始化一个patch function；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span>styleModule<span class="token punctuation">,</span> eventListenersModule<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、创建一个vnode；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div#container.demo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'cyan'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">click</span><span class="token operator">:</span> eventHandler <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'pppppp'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">,</span> <span class="token string">'sdsdsd'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、选择一个容器，将vnode patch到容器中；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4、生成一个新的vnode；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> newVnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>  <span class="token string">"div#container.two.classes"</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">click</span><span class="token operator">:</span> anotherEventHandler <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>    <span class="token function">h</span><span class="token punctuation">(</span>      <span class="token string">"span"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">"normal"</span><span class="token punctuation">,</span> <span class="token literal-property property">fontStyle</span><span class="token operator">:</span> <span class="token string">"italic"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">"This is now italic type"</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">" and this is still just normal text"</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">"/bar"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"I'll take you places!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、将旧vnode更新为新vnode；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">patch</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="init模块"><a href="#init模块" class="headerlink" title="init模块"></a>init模块</h2><p>包含的关键函数：</p><ul><li><strong>createElm</strong>：根据传入的vnode递归创建一颗真实DOM树；</li><li><strong>updateChildren</strong>：递归比较新传入的新旧节点以及子节点的差异（diff算法）；</li><li><strong>patchVnode</strong>：比较新老节点的差异（比较是否有子节点以及文本内容，新旧节点都有子节点时调用updateChildren）；</li><li><strong>patch</strong>：init模块导出的函数</li></ul><hr><h2 id="patch函数"><a href="#patch函数" class="headerlink" title="patch函数"></a>patch函数</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span>  <span class="token parameter"><span class="token literal-property property">oldVnode</span><span class="token operator">:</span> VNode <span class="token operator">|</span> Element <span class="token operator">|</span> DocumentFragment<span class="token punctuation">,</span>  <span class="token literal-property property">vnode</span><span class="token operator">:</span> VNode</span><span class="token punctuation">)</span><span class="token operator">:</span> VNode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220723003046.png" alt="patch函数"></p><hr><h2 id="patchVnode"><a href="#patchVnode" class="headerlink" title="patchVnode"></a>patchVnode</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">patchVnode</span><span class="token punctuation">(</span>  <span class="token parameter"><span class="token literal-property property">oldVnode</span><span class="token operator">:</span> VNode<span class="token punctuation">,</span>  <span class="token literal-property property">vnode</span><span class="token operator">:</span> VNode<span class="token punctuation">,</span>  <span class="token literal-property property">insertedVnodeQueue</span><span class="token operator">:</span> VNodeQueue</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220723003753.png" alt="patchVnode函数"></p><hr><h2 id="updateChildren"><a href="#updateChildren" class="headerlink" title="updateChildren"></a>updateChildren</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span>  <span class="token parameter"><span class="token literal-property property">parentElm</span><span class="token operator">:</span> Node<span class="token punctuation">,</span>  <span class="token literal-property property">oldCh</span><span class="token operator">:</span> VNode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">newCh</span><span class="token operator">:</span> VNode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">insertedVnodeQueue</span><span class="token operator">:</span> VNodeQueue</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220723003903.png" alt="updateChildren"><h3 id="Diff算法的核心"><a href="#Diff算法的核心" class="headerlink" title="Diff算法的核心"></a>Diff算法的核心</h3><p>四种更新策略，按比较的先后顺序排列，依次为：</p><p>（1）旧前与新前；</p><p>（2）旧后与新后；</p><p>（3）旧前与新后；</p><p>（4）旧后与新前；</p><p><strong>（1）旧前与新前；</strong></p><p><strong>（2）旧后与新后</strong></p><p><strong>（3）旧前与新后</strong></p><p><strong>（4）旧后与新前</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术沉淀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端进阶</title>
      <link href="/2022/07/23/ji-zhu-chen-dian/qian-duan-jin-jie/jin-jie/"/>
      <url>/2022/07/23/ji-zhu-chen-dian/qian-duan-jin-jie/jin-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="进阶内容"><a href="#进阶内容" class="headerlink" title="进阶内容"></a>进阶内容</h1><h2 id="Vue原理"><a href="#Vue原理" class="headerlink" title="Vue原理"></a>Vue原理</h2><h3 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h3><hr><h2 id="浏览器原理"><a href="#浏览器原理" class="headerlink" title="浏览器原理"></a>浏览器原理</h2><hr><h2 id="Web安全"><a href="#Web安全" class="headerlink" title="Web安全"></a>Web安全</h2><hr><h2 id="JavaScript引擎"><a href="#JavaScript引擎" class="headerlink" title="JavaScript引擎"></a>JavaScript引擎</h2><hr><h2 id="项目工程化"><a href="#项目工程化" class="headerlink" title="项目工程化"></a>项目工程化</h2><h3 id="Mock-js的使用"><a href="#Mock-js的使用" class="headerlink" title="Mock.js的使用"></a>Mock.js的使用</h3><hr><h3 id="打包构建"><a href="#打包构建" class="headerlink" title="打包构建"></a>打包构建</h3><p>webpack</p><p>babel</p><p>Sass</p><hr><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><hr><h2 id="招聘要求"><a href="#招聘要求" class="headerlink" title="招聘要求"></a>招聘要求</h2><p>精通HTML、CSS、JS，熟悉页面架构和布局，熟悉HTML5/CSS3等常用技术，，具备浏览器兼容处理能力；</p><p>能熟练掌握至少一种主流前端框架React、Vue、Angular等，并了解其特性原理，有移动端App开发经验者优先  </p><ul><li>深入应用并深入理解其设计原理</li></ul><p>具备跨浏览器、跨终端的前端开发经验</p><p>UI框架：</p><ul><li>bootstrap</li><li>pure</li><li>kendo</li></ul><p>构建工具：</p><ul><li>Grunt</li><li>Gulp</li><li>Webpack</li><li>Rollup</li></ul><p>NodeJS：</p><ul><li>Koa</li></ul><p>Server端语言</p><ul><li>Node.JS</li><li>PHP</li><li>Python</li><li>Java</li><li>Ruby</li><li>C</li><li>C++</li><li>C#</li></ul><hr><p>加分项：</p><ul><li>对编程语言设计有了解，对抽象语法树（AST）有一定的认知</li><li>对网站性能优化有所研究，在实际项目中有经验者优先</li><li>熟练掌握基于 Node.js 的 SSR技术及原理，对 Node.js 的性能调优，问题诊断有经验者优先</li><li>有 Flutter 的开发经验，在 Web 与 Native 技术的融合上有自己的探索</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术沉淀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入坑指南 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法思维总结</title>
      <link href="/2022/07/22/suan-fa/suan-fa-si-wei-zong-jie/"/>
      <url>/2022/07/22/suan-fa/suan-fa-si-wei-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="算法题技巧总结"><a href="#算法题技巧总结" class="headerlink" title="算法题技巧总结"></a>算法题技巧总结</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ol><li>确定递归函数的参数和返回值：确定每次递归中需要处理的参数，并且要想清楚每次递归的返回值来确定递归函数的返回值类型；</li><li>确定终止条件：递归在什么条件下停止并返回；</li><li>确定单层递归的逻辑：确定每一层递归需要处理的信息，这里是递归重复调用的代码。</li></ol><hr><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h3><h4 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment">/** * @param {TreeNode} root * @return {number[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">preorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 递归</span>    <span class="token keyword">let</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token comment">// 前序遍历位置</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 中序遍历位置</span>      <span class="token comment">// result.push(node.val);</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 后序遍历位置</span>      <span class="token comment">// result.push(node.val);</span>    <span class="token punctuation">}</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><p>（1）前序遍历</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">preorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/* 迭代法实现 */</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 注意入栈顺序是先右孩子再左孩子，这样出栈就是根-&gt;左-&gt;右</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）中序遍历</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">inorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> inorder <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 遍历左子树，压栈</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 中节点出栈</span>            <span class="token keyword">let</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            inorder<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 遍历右子树,压栈</span>            root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> inorder<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）后序遍历</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">postorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> postOrder <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> postOrder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        postOrder<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 只改变了前序遍历左右子树的入栈顺序（中--》出栈--》左---》右）---出栈顺序变成了中右左</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 这里颠倒数组顺序就变成了左右中</span>    postOrder<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> postOrder<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="迭代遍历（统一模板）"><a href="#迭代遍历（统一模板）" class="headerlink" title="迭代遍历（统一模板）"></a>迭代遍历（统一模板）</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">orderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> preOrder <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// inorder, postorder</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> preOrder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 这里体现遍历顺序---入栈的顺序和遍历顺序相反（出栈）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 右</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//左</span>            <span class="token punctuation">}</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 中</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 标记要放入结果集的节点</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preOrder<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> preOrder<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="子问题"><a href="#子问题" class="headerlink" title="子问题"></a>子问题</h3><h4 id="层序遍历的子问题"><a href="#层序遍历的子问题" class="headerlink" title="层序遍历的子问题"></a>层序遍历的子问题</h4><ul><li>最基础的层序遍历，遍历序列存储在一个数组里；<ul><li><a href="https://www.nowcoder.com/practice/7fe2212963db4790b57431d9ed259701?tpId=13&amp;tqId=23280&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">从上往下打印二叉树_牛客题霸_牛客网 (nowcoder.com)</a></li></ul></li><li>每一层的遍历结果存储在一个数组中，最后的结果是一个二维数组；<ul><li><a href="https://www.nowcoder.com/practice/445c44d982d04483b04a54f298796288?tpId=13&amp;tqId=23453&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">把二叉树打印成多行_牛客题霸_牛客网 (nowcoder.com)</a></li></ul></li><li>每一层的遍历结果存储在一个数组中，但遍历顺序有变化（第一层从左向右，下一层从右向左，一直这样交替）；<ul><li><a href="https://www.nowcoder.com/practice/91b69814117f4e8097390d107d2efbe0?tpId=13&amp;tqId=23454&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">按之字形顺序打印二叉树_牛客题霸_牛客网 (nowcoder.com)</a></li></ul></li></ul><h4 id="二叉树的深度与高度"><a href="#二叉树的深度与高度" class="headerlink" title="二叉树的深度与高度"></a>二叉树的深度与高度</h4><ul><li>深度：从根节点到该节点的最长简单路径边的条数（题目中一般指的是节点数）。<ul><li><a href="https://www.nowcoder.com/practice/435fb86331474282a3499955f0a41e8b?tpId=13&amp;tqId=23294&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">二叉树的深度_牛客题霸_牛客网 (nowcoder.com)</a></li></ul></li><li>高度：从该节点到叶子结点的最长简单路径边的条数（题目中一般指的是节点数）。<ul><li><a href="https://www.nowcoder.com/practice/8b3b95850edb4115918ecebdf1b4d222?tpId=13&amp;tqId=23250&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">判断是不是平衡二叉树_牛客题霸_牛客网 (nowcoder.com)</a></li></ul></li></ul><h4 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h4><ul><li>镜像二叉树，交换左右节点。<ul><li><a href="https://www.nowcoder.com/practice/a9d0ecbacef9410ca97463e4a5c83be7?tpId=13&amp;tqId=1374963&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">二叉树的镜像_牛客题霸_牛客网 (nowcoder.com)</a></li></ul></li><li>判断一颗二叉树是否是对称的，外侧和内侧分别判断。<ul><li><a href="https://www.nowcoder.com/practice/ff05d44dfdb04e1d83bdbdab320efbcb?tpId=13&amp;tqId=23452&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">对称的二叉树_牛客题霸_牛客网 (nowcoder.com)</a></li></ul></li></ul><h4 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h4><ul><li>给定一个二叉树 root 和一个值 sum，判断是否有从根节点到叶子节点的节点值之和等于 sum 的路径。<ul><li>DFS</li><li><a href="https://www.nowcoder.com/practice/508378c0823c423baa723ce448cbfd0c?tpId=13&amp;tqId=634&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">二叉树中和为某一值的路径(一)_牛客题霸_牛客网 (nowcoder.com)</a></li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">curNode<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>输入一颗二叉树的根节点 root 和一个整数 expectNumber，找出二叉树中结点值的和为 expectNumber 的所有路径。<ul><li>DFS，回溯</li><li><a href="https://www.nowcoder.com/practice/b736e784e3e34731af99065031301bca?tpId=13&amp;tqId=23276&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">二叉树中和为某一值的路径(二)_牛客题霸_牛客网 (nowcoder.com)</a></li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">curNode<span class="token punctuation">,</span> result<span class="token punctuation">,</span> path<span class="token punctuation">,</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>给定一个二叉树root和一个整数值 sum ，求该树有多少路径的的节点值之和等于 sum 。（<u>该题路径定义不需要从根节点开始，也不需要在叶子节点结束，但是一定是从父亲节点往下到孩子节点</u>）</p><ul><li>==这道题需要好好理解。==</li><li>解法 1：深度优先搜索（主函数中也有递归的逻辑，遍历每个节点，以每个节点作为路径起点计算满足路径和为 target 的路径数量）</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">rootSum</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> targetSum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>解法 2：前缀和（也是递归，计算每个并存储每个节点的前缀和）。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> curSum<span class="token punctuation">,</span> targetSum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="构建二叉树"><a href="#构建二叉树" class="headerlink" title="构建二叉树"></a>构建二叉树</h4><ul><li>给定节点数为 n 的二叉树的前序遍历和中序遍历结果，请重建出该二叉树并返回它的头结点。<ul><li>确定子树的索引范围，然后递归。</li><li><a href="https://www.nowcoder.com/practice/8a19cbe657394eeaac2f6ea9b0f6fcf6?tpId=13&amp;tqId=23282&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">重建二叉树_牛客题霸_牛客网 (nowcoder.com)</a></li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">reBuild</span> <span class="token punctuation">(</span><span class="token parameter">preOrder<span class="token punctuation">,</span> inOrder<span class="token punctuation">,</span> preStart<span class="token punctuation">,</span> preEnd<span class="token punctuation">,</span> inStart<span class="token punctuation">,</span> inEnd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="判断能否构成一颗二叉树（BST）"><a href="#判断能否构成一颗二叉树（BST）" class="headerlink" title="判断能否构成一颗二叉树（BST）"></a>判断能否构成一颗二叉树（BST）</h4><ul><li>输入两棵二叉树 A，B，判断 B 是不是 A 的子结构。<ul><li>需要遍历整棵树 A，每个节点都可能是 B 的根节点。</li><li> <a href="https://www.nowcoder.com/practice/6e196c44c7004d15b1610b9afca8bd88?tpId=13&amp;tqId=23293&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">树的子结构_牛客题霸_牛客网 (nowcoder.com)</a></li></ul></li><li>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则返回 true，否则返回 false 。<ul><li>递归分治法：从后序遍历区分出左子树序列的索引范围和右子树的索引范围，然后分别判断左子树和右子树是否满足 BST 的条件。</li><li><a href="https://www.nowcoder.com/practice/a861533d45854474ac791d90e447bafd?tpId=13&amp;tqId=23289&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">二叉搜索树的后序遍历序列_牛客题霸_牛客网 (nowcoder.com)</a></li><li>辅助单调栈：根据后序遍历序列的倒序的特点，没理解。</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">traverse</span> <span class="token punctuation">(</span><span class="token parameter">sequence<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h4 id="二叉树中的搜索"><a href="#二叉树中的搜索" class="headerlink" title="二叉树中的搜索"></a>二叉树中的搜索</h4><ul><li><p>给定一个二叉树其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的 next 指针。</p><ul><li>解法 1：先找到根节点，然后中序遍历整棵树，最后匹配目标节点；解法 2：分析中序遍历的特点，分组判断。</li><li>解法 2（有点绕）：<ol><li>节点的右子树不为空，找到该节点右子树最左边的节点并返回；</li><li>节点右子树为空，且该节点是其父节点的左节点，直接返回其父节点；</li><li>节点右子树为空，该节点是其父节点的右节点，则该节点一直沿着next指针往上走，直到指针指向的节点的左子节点是指针上一次指向的节点，返回当前指针的 next；</li></ol></li><li><a href="https://www.nowcoder.com/practice/9023a0c988684a53960365b889ceaf5e?tpId=13&amp;tqId=23451&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">二叉树的下一个结点_牛客题霸_牛客网 (nowcoder.com)</a></li></ul></li><li><p>给定一棵结点数为 n 的二叉搜索树，请找出其中的第 k 小的 TreeNode 的结点值。</p><ul><li>BST 中序遍历是有序的（升序），在中序遍历位置进行统计。</li><li><a href="https://www.nowcoder.com/practice/57aa0bab91884a10b5136ca2c087f8ff?tpId=13&amp;tqId=2305268&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">二叉搜索树的第k个节点_牛客题霸_牛客网 (nowcoder.com)</a></li></ul></li><li><p>给定一棵二叉树(保证非空)以及这棵树上的两个节点对应的 val 值 o1 和 o2，请找到 o1 和 o2 的最近公共祖先节点。</p><ul><li>后序遍历位置，分别在左右子树上搜索，需要搜索整棵树。</li><li><a href="https://www.nowcoder.com/practice/e0cc33a83afe4530bcec46eba3325116?tpId=13&amp;tqId=1024325&amp;ru=/practice/965fef32cae14a17a8e86c76ffe3131f&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">在二叉树中找到两个节点的最近公共祖先_牛客题霸_牛客网 (nowcoder.com)</a></li></ul></li><li><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><ul><li>利用 BST 遍历顺序的特点，在前序遍历位置，只搜索某一条边，在某一条边找到 cur.val 在 区间 [p.val, q.val]（或者 [q.val, p.val]），则返回 cur，不需要遍历整棵树。</li><li><a href="https://www.nowcoder.com/practice/d9820119321945f588ed6a26f0a6991f?tpId=13&amp;tqId=2290592&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">二叉搜索树的最近公共祖先_牛客题霸_牛客网 (nowcoder.com)</a></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 搜索一条边的写法：</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">递归函数</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token keyword">return</span> <span class="token operator">...</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">递归函数</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span>  <span class="token keyword">return</span> <span class="token operator">...</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 搜索整个树写法：</span><span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">递归函数</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">递归函数</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// left与right的逻辑处理;</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li>请实现两个函数，分别用来序列化和反序列化二叉树，不对序列化之后的字符串进行约束，但要求能够根据序列化之后的字符串重新构造出一棵与原二叉树相同的树。<ul><li>前序遍历和层序遍历更好理解（注意细节）；</li><li><a href="https://www.nowcoder.com/practice/cf7e25aa97c04cc1a68c8f040e71fb84?tpId=13&amp;tqId=23455&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">序列化二叉树_牛客题霸_牛客网 (nowcoder.com)</a></li></ul></li><li>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。<ul><li>中序遍历位置使用 pre 和 cur 指针记录前一个访问的节点和当前访问的节点；</li><li><a href="https://www.nowcoder.com/practice/947f6eb80d944a84850b0538bf0ec3a5?tpId=13&amp;tqId=23253&amp;ru=/practice/947f6eb80d944a84850b0538bf0ec3a5&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">二叉搜索树与双向链表_牛客题霸_牛客网 (nowcoder.com)</a></li></ul></li></ul><hr><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><hr><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><div class="admonition info"><p>有 <code>n</code> 件物品和一个最多能背重量为 <code>w</code> 的背包。第 <code>i</code> 件物品的重量是 <code>weight[i]</code>，得到的价值是 <code>value[i]</code> 。<strong>每件物品只能用一次</strong>，求解将哪些物品装入背包里物品价值总和最大。</p></div><p>二维 <code>dp</code> 数组：</p><ul><li><p><code>dp[i][j]</code> 表示从下标 <code>[0, i]</code> 的物品里任意取，放进容量为 <code>j</code> 的背包，价值总和最大为 <code>dp[i][j]</code>。</p></li><li><p>递推公式：$dp[i][j]=max(dp[i-1][j], dp[i-1][j-weight[i]]+value[i])$；</p><ul><li>不放物品 <code>i</code> 时的最大价值：$dp[i-1][j]$；</li><li>放物品 <code>i</code> 时的最大价值：$dp[i-1][j-weight[i]]+value[i]$；</li></ul></li><li><p>从前往后遍历</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// weight数组的大小 就是物品个数</span><span class="token keyword">for</span><span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> weight<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历物品</span><span class="token comment">// 从前往后遍历</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>int j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> bagweight<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历背包容量</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><div class="admonition warning"><p>二维 dp 数组的两个 for 遍历的先后顺序可以颠倒，一维 dp 数组的两个 for 循环先后顺序一定是先遍历物品，再遍历背包容量。</p></div><p>一维 dp 数组：</p><ul><li><p><code>dp[j]</code> 表示：容量为 <code>j</code> 的背包，所背的物品价值最大为 <code>dp[j]</code>；</p></li><li><p>递推公式：$dp[j]=max(dp[j], dp[j-weight[i]]+value[i])$；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> weight<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历物品</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>int j <span class="token operator">=</span> bagWeight<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历背包容量-从后往前遍历</span>        dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>从后往前遍历，保证物品只放入一次；</p></li></ul><h4 id="01-背包的子问题"><a href="#01-背包的子问题" class="headerlink" title="01 背包的子问题"></a>01 背包的子问题</h4><p>（1）物品能否装满背包问题（最多能装多少物品）</p><hr><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><div class="admonition info"><p>有 <code>n</code> 件物品和一个最多能背重量为 <code>w</code> 的背包。第 <code>i</code> 件物品的重量是 <code>weight[i]</code>，得到的价值是 <code>value[i]</code> 。<strong>每件物品都有无限个（也就是可以放入背包多次）</strong>，求解将哪些物品装入背包里物品价值总和最大。<u><strong>完全背包和 01 背包问题唯一不同的地方就是，每种物品有无限件</strong>。</u></p></div><p>==01 背包和完全背包唯一不同就是体现在遍历顺序上。==</p><p>01 背包内嵌的循环是从大到小遍历，为了保证每个物品仅被添加一次。而完全背包的物品是可以添加多次的，所以要从小到大去遍历，即：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 先遍历物品，再遍历背包</span><span class="token keyword">for</span><span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> weight<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历物品</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>int j <span class="token operator">=</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> bagWeight <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历背包容量</span>    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="admonition warning"><p>在完全背包中，对于一维 dp 数组来说，遍历顺序可以交换。<strong>如果求组合数就是外层 for 循环遍历物品，内层 for 遍历背包</strong>，<strong>如果求排列数就是外层 for 遍历背包，内层 for 循环遍历物品</strong>。为什么是这样的？因为如果在先遍历物品的话，那么物品放入背包的顺序是固定的；而内层遍历物品则会出现同样的物品，放入顺序不同。</p></div><h4 id="完全背包问题的子问题"><a href="#完全背包问题的子问题" class="headerlink" title="完全背包问题的子问题"></a>完全背包问题的子问题</h4><p>一、装满背包至少需要多少个物品的问题</p><ol><li>dp[j]: 装满容量为j的背包至少需要的物品个数；</li><li>递推公式：dp[j] = min(dp[j], dp[j - weight[i]] + 1);</li><li> 初始化：dp[0] = 1；（这是一般情况，具体需要结合题意）</li><li> 遍历顺序：都可以。</li></ol><p>题目：<a href="https://leetcode.cn/problems/coin-change/">322. 零钱兑换 - 力扣（LeetCode）</a>、<a href="https://leetcode.cn/problems/perfect-squares/">279. 完全平方数 - 力扣（LeetCode）</a></p><p>二、装满背包有多少种方法的问题</p><ol><li>dp[i]: 装满容量为 i 的背包有 dp[i] 种方法；</li><li>递推公式：dp[i] += dp[i - weight[j]]；</li><li>初始化：dp[0] = 1;</li><li>遍历顺序：外层物品内层背包求组合数，外层背包内层物品求排列数；</li></ol><p>题目：<a href="https://leetcode.cn/problems/combination-sum-iv/">377. 组合总和 Ⅳ - 力扣（LeetCode）</a></p><p>三、物品能否装满背包的问题</p><ol><li>dp[i]: 利用已有的物品可以装满容量为 i 的背包；</li><li>递推公式：dp[i] = true；（判断什么条件下可以装满背包需要结合题意）</li><li>初始化：dp[0] = true；</li><li>遍历顺序：如果装满背包对放入物品的顺序有要求，那么外层背包内层物品，否则一般是外层物品内层背包；</li></ol><p>题目：<a href="https://leetcode.cn/problems/word-break/">139. 单词拆分 - 力扣（LeetCode）</a></p><hr><h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h3><p>有 <code>n</code> 种物品和一个容量为 <code>v</code> 的背包。第 <code>i</code> 种物品最多有 <code>mi</code> 件可用，每件耗费的空间是 <code>ci </code>，价值是 <code>wi</code> 。求解将哪些物品装入背包可使这些物品的耗费的空间 总和不超过背包容量，且价值总和最大。</p><p>将不同数量的物品展开，多重背包问题就转换成 01 背包问题了。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">=</span> amountArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>amountArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      weightArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>weightArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      valueArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>valueArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      amountArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> goodsNum<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> weightArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">const</span> dp<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>bagSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 遍历物品</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> goodsNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 遍历背包容量</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> bagSize<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> weightArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> weightArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> valueArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h2><p>栈（stack）是一个先进后出的数据结构，队列（queue）是一个先进先出的数据结构。</p><p>可以用两个栈模拟队列，一个栈存储数据，另一个栈用来临时保存主栈中的数据（删除数据时，临时保存数据）；</p><p><strong>关于栈的子问题：</strong></p><p>（1）使用辅助栈</p><ul><li><a href="https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&amp;tqId=23281&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">栈模拟队列</a></li><li><a href="https://www.nowcoder.com/practice/d77d11405cc7470d82554cb392585106?tpId=13&amp;tqId=23290&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">栈的压入、弹出序列</a></li><li><a href="https://www.nowcoder.com/practice/4c776177d2c04c2494f2555c9fcc1e49?tpId=13&amp;tqId=23268&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">包含min函数的栈</a></li></ul><p>（2）利用栈解决匹配问题</p><ul><li><a href="https://leetcode.cn/problems/valid-parentheses/">有效括号</a></li><li><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">删除字符串中的所有相邻重复项</a></li><li><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">逆波兰表达式求值</a><ul><li>人类日常使用的是中缀表达式，如（2 + 1）* 3；波兰表达式又叫前缀表达式，写作 + 1 2 * 3；逆波兰表达式又叫后缀表达式，写作 1 2 + 3 *；波兰表达式和逆波兰表达式去掉括号后不影响表达式的正确性。</li><li>逆波兰表达式非常适合使用栈来计算。</li><li><a href="https://www.zhihu.com/question/41103160">参考</a></li></ul></li></ul><p><strong>关于队列的子问题：</strong></p><p>（1）使用辅助队列</p><ul><li><a href="https://leetcode.cn/problems/implement-stack-using-queues/">用队列实现栈</a></li></ul><p><strong>栈和队列的结合：</strong></p><ul><li><p><a href="https://leetcode.cn/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/">剑指 Offer 59 - I. 滑动窗口的最大值</a></p><ul><li>关键是将“在窗口内找到最大值”这个操作的复杂度降低至 $O(1)$。空间换时间，于是构建一个非严格递减的双端队列 <code>Dequeue</code>，队头始终是窗口内的最大值。</li><li><code>Dequeue</code> 的操作包括：<ul><li>pop：每次弹出的时候，比较当前要弹出的数值是否等于队首元素的数值，如果相等则弹出。</li><li>push：如果 push 的数值大于队尾元素的数值，那么就将队尾的数值弹出，直到 push 的数值小于等于队尾元素的数值为止。</li><li>front：返回队首元素的值—窗口中的最大值。</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 双端队列 */</span><span class="token keyword">function</span> <span class="token function">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 每次弹出的时候，比较当前要弹出的数值是否等于队首元素的数值，如果相等则弹出。</span><span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pop</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> value <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 如果push的数值大于队尾元素的数值，那么就将队尾的数值弹出，直到push的数值小于等于队尾元素的数值为止。</span><span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> value <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 返回队首元素的值---窗口中的最大值</span><span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">front</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="虚拟头节点"><a href="#虚拟头节点" class="headerlink" title="虚拟头节点"></a>虚拟头节点</h3><p>定义一个虚拟头节点 <code>dummy</code> 和一个遍历链表的指针 <code>cur</code>。<code>dummy</code> 的 <code>next </code> 指针指向<code>head </code> ，即<code>dummy.next = head</code> ，<code>cur</code> 指针初始化为 <code>cur = dummy</code>。这样就不用考虑更新头节点后，头节点改变的情况（比如，头节点被删除了）。</p><ul><li><a href="https://www.nowcoder.com/practice/d8b6b4358f774294a89de2a6ac4d9337?tpId=13&amp;tags=&amp;title=&amp;difficulty=0&amp;judgeStatus=0&amp;rp=0&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">合并两个排序的链表_牛客题霸_牛客网 (nowcoder.com)</a></li><li><a href="https://www.nowcoder.com/practice/f9f78ca89ad643c99701a7142bd59f5d?tpId=13&amp;tqId=2273171&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">删除链表的节点_牛客题霸_牛客网 (nowcoder.com)</a></li><li><a href="https://www.nowcoder.com/practice/fc533c45b73a41b0b44ccba763f866ef?tpId=13&amp;tqId=23450&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">删除链表中重复的结点_牛客题霸_牛客网 (nowcoder.com)</a></li></ul><hr><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><ul><li><a href="https://www.nowcoder.com/practice/6ab1d9a29e88450685099d45c9e31e46?tpId=13&amp;tqId=23257&amp;ru=/practice/d8b6b4358f774294a89de2a6ac4d9337&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">两个链表的第一个公共结点_牛客题霸_牛客网 (nowcoder.com)</a></li><li><a href="https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4?tpId=13&amp;tqId=23449&amp;ru=/practice/6ab1d9a29e88450685099d45c9e31e46&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">链表中环的入口结点_牛客题霸_牛客网 (nowcoder.com)</a><ul><li>快慢指针：<code>fast</code> 和 <code>slow</code>，<code>fast</code> 指针每次移动 2 个位置，<code>slow</code> 指针每次移动 1 个位置；</li><li><code>fast</code> 和 <code>slow</code> 指针第一次相遇后，将 <code>fast</code> 指针重新指向 <code>head</code>，此时 <code>fast</code>  和 <code>slow</code> 同时移动 1个位置，再次相遇时指向的节点就是环的入口节点。</li></ul></li></ul><hr><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="双指针-1"><a href="#双指针-1" class="headerlink" title="双指针"></a>双指针</h3><ul><li><a href="https://leetcode.cn/problems/reverse-string/">344. 反转字符串 - 力扣（LeetCode）</a></li><li><a href="https://leetcode.cn/problems/reverse-string-ii/">541. 反转字符串 II - 力扣（LeetCode）</a><ul><li>left 每次移动 2k 个位置；</li></ul></li></ul><h3 id="JavaScript-常用字符串操作"><a href="#JavaScript-常用字符串操作" class="headerlink" title="JavaScript 常用字符串操作"></a>JavaScript 常用字符串操作</h3><p><code>String.prototype.includes(searchString[, position])</code>：判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。</p><p><code>String.prototype.indexOf(searchValue [, fromIndex])</code>：**<code>indexOf()</code>** 方法返回调用它的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String"><code>String</code></a> 对象中第一次出现的指定值的索引，从 <code>fromIndex</code> 处进行搜索。如果未找到该值，则返回 -1。</p><p><code>String.prototype.match(regexp)</code>：检索返回一个字符串匹配正则表达式的结果。</p><p><code>String.prototype.matchAll(regexp)</code>：返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。</p><p><code>String.prototype.repeat(count)</code>：构造并返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本。</p><p><code>String.prototype.replace(egexp|substr, newSubStr|function)</code>：**<code>replace()</code>** 方法返回一个由替换值（<code>replacement</code>）替换部分或所有的模式（<code>pattern</code>）匹配项后的新字符串。模式可以是一个字符串或者一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp">正则表达式</a>，替换值可以是一个字符串或者一个每次匹配都要调用的回调函数。<strong>如果<code>pattern</code>是字符串，则仅替换第一个匹配项。</strong></p><ul><li>在进行全局的搜索替换时，正则表达式需包含 <code>g</code> 标志。</li></ul><p><code>String.prototype.replaceAll(regexp|substr, newSubstr|function)</code>：**<code>replaceAll()</code>** 方法返回一个新字符串，新字符串所有满足 <code>pattern</code> 的部分都已被<code>replacement</code> 替换。<code>pattern</code>可以是一个字符串或一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp"><code>RegExp</code></a>， <code>replacement</code>可以是一个字符串或一个在每次匹配被调用的函数。</p><ul><li>当使用一个 <code>regex</code>时，您必须设置全局（“ g”）标志</li></ul><p><code>String.prototype.split([separator[, limit])</code>：**<code>split()</code>** 方法使用指定的分隔符字符串将一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String"><code>String</code></a>对象分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置。</p><p><code>String.prototype.substring(indexStart[, indexEnd])</code>：**<code>substring()</code>** 方法返回一个字符串在开始索引到结束索引之间的一个子集，或从开始索引直到字符串的末尾的一个子集。</p><p><code>String.prototype.toLowerCase()</code>：**<code>toLowerCase()</code>** 会将调用该方法的字符串值转为小写形式，并返回。</p><p><code>String.prototype.toUpperCase()</code>：**<code>toUpperCase()</code>** 方法将调用该方法的字符串转为大写形式并返回（如果调用该方法的值不是字符串类型会被强制转换）。</p><p><code>String.prototype.trim()</code>：**<code>trim()</code> **方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符（如 LF，CR 等）。</p><hr><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><hr><h2 id="JavaScript-中的常用操作"><a href="#JavaScript-中的常用操作" class="headerlink" title="JavaScript 中的常用操作"></a>JavaScript 中的常用操作</h2><hr><h2 id="常用数学公式及概念"><a href="#常用数学公式及概念" class="headerlink" title="常用数学公式及概念"></a>常用数学公式及概念</h2><h3 id="排列组合"><a href="#排列组合" class="headerlink" title="排列组合"></a>排列组合</h3><p>排列数：$A_{n}^{m}=n(n-1)(n-2) \ldots(n-m+1)=\frac{n !}{(n-m) !}$；</p><p>组合数：$C_{n}^{m}=\frac{A_{n}^{m}}{m !}=\frac{n !}{(n-m) ! m !}$</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode热门100题刷题笔记(JavaScript实现)</title>
      <link href="/2022/07/07/suan-fa/leetcode-re-men-100-ti/"/>
      <url>/2022/07/07/suan-fa/leetcode-re-men-100-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode热门100题刷题笔记"><a href="#Leetcode热门100题刷题笔记" class="headerlink" title="Leetcode热门100题刷题笔记"></a>Leetcode热门100题刷题笔记</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="96-不同的二叉搜索树"><a href="#96-不同的二叉搜索树" class="headerlink" title="96. 不同的二叉搜索树"></a>96. 不同的二叉搜索树</h3><p>题解：</p><ol><li><a href="https://mp.weixin.qq.com/s/kcwz2lyRxxOsC3n11qdVSw">递归</a></li><li><a href="https://leetcode.cn/problems/unique-binary-search-trees/solution/hua-jie-suan-fa-96-bu-tong-de-er-cha-sou-suo-shu-b/">动态规划</a></li></ol><p>【提示】</p><p>（1）递归：将数组在节点<code>i</code>处划分为两部分<code>low and high</code>，数组中不同的数都可以作为根节点。不同BST的个数<code>= count(low, i - 1) * count(i + 1, high)</code>;</p><p>==递归函数写在主函数内会超时，暂时没弄清楚怎么回事，写在外面可以。==</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">count</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">low<span class="token punctuation">,</span> high</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 退出条件，空节点也算一种情况</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&gt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 穷举</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> low<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> high<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>      res <span class="token operator">+=</span> left <span class="token operator">*</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）动态规划：</p><p>dp: n 个节点存在二叉排序树的个数是 dp[n]，令 f(i) 为以 i 为根的二叉搜索树的个数，则</p><p>$G(n)=f(1)+f(2)+f(3)+f(4)+…+f(n)$</p><p>$f(i) = f(i -1) * f(n - i)$</p><p>dp数组要初始化为0</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">numTrees</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// console.log(dp)</span>  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98. 验证二叉搜索树"></a>98. 验证二叉搜索树</h3><p><a href="https://leetcode.cn/problems/validate-binary-search-tree/">leetcode</a></p><p>【提示】BST的中序遍历时按升序排列的；中序遍历递归比较前一个数与当前数的大小，当前节点的左右子树也要是BST。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>maxVal <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  maxVal <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101. 对称二叉树"></a>101. 对称二叉树</h3><p><a href="https://leetcode.cn/problems/symmetric-tree/">leetcode</a></p><p>【提示】两种思路：递归和迭代。</p><p>（1）递归</p><p>将整棵树分为左右两侧的子树，比较每个节点的<strong>外侧</strong>和<strong>内侧</strong>节点是否相同。<strong>前序位置递归</strong>，处理每一个节点然后接着往下递归。退出条件是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> rightNode <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> rightNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> rightNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode<span class="token punctuation">.</span>val <span class="token operator">!==</span> rightNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）迭代（暂时未实现，没有思路）</p><p>栈或队列都可以，一层一层的对比两侧子树的外侧节点和内侧节点</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 取出栈顶的两个节点</span>  <span class="token keyword">let</span> leftNode <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> rightNode <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果这两个节点都为null，说明这一侧的节点都是对称的</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> rightNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 如果这两个节点其中一个为null而另一个不为null或者这两个节点的值不相等，则不对称</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>leftNode <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> rightNode <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>leftNode <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> rightNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>leftNode<span class="token punctuation">.</span>val <span class="token operator">!==</span> rightNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 外侧的节点</span>  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leftNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rightNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 内侧的节点</span>  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leftNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rightNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a>102. 二叉树的层序遍历</h3><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">leetcode</a></p><p>【提示】两层循环</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">let</span> perLevel <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 遍历一层的节点</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>size<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104. 二叉树的最大深度"></a>104. 二叉树的最大深度</h3><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">leetcode</a></p><p>【提示】（前序遍历-递归、层序遍历-迭代）当root不为null时，初始的深度为1。其实，如果初始深度为0的话，求的是节点的高度，根节点的高度就是最大深度。</p><p><strong>节点深度与高度的区别</strong></p><ul><li><p>二叉树节点的深度：从根节点到该节点的最长简单路径边的条数。</p></li><li><p>二叉树节点的高度：从该节点到叶子结点的最长简单路径边的条数。</p></li></ul><hr><h3 id="114-二叉树展开为链表"><a href="#114-二叉树展开为链表" class="headerlink" title="114. 二叉树展开为链表"></a>114. 二叉树展开为链表</h3><p><a href="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/">leetcode</a></p><p>【提示】后序遍历，在根节点处的操作：</p><ol><li>获取flatten后的左子树；</li><li>获取flatten后的右子树；</li><li>root.left = null; /* 根节点的左子树置为null */</li><li>root.right = left; /* 根节点的右子树设为flatten后的左子树 */</li><li>找到root的右子树的叶子结点，然后将flatten后的右子树接上去。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">flatten</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment">/* 后序遍历 */</span>    <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* 根节点处的操作 */</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span> <span class="token comment">// 对应步骤1</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span> <span class="token comment">// 步骤2</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 步骤3</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> left<span class="token punctuation">;</span> <span class="token comment">// 步骤4</span>    <span class="token comment">// 步骤5</span>    <span class="token keyword">let</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span> <span class="token comment">// 指向根节点的指针，后面会迭代赋值，直到找到叶子结点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="105-从前序与中序遍历序列构造二叉树"><a href="#105-从前序与中序遍历序列构造二叉树" class="headerlink" title="105. 从前序与中序遍历序列构造二叉树"></a>105. 从前序与中序遍历序列构造二叉树</h3><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">leetcode</a></p><p>【提示】设根节点在中序遍历中的索引为<code>rootIndex</code>，则前序遍历的左子树范围和右子树范围，中序遍历的左子树范围和左子树范围就可以确定了，分别是：</p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220724232228.png" alt="前序和中序构建二叉树" style="zoom: 25%;"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">preStart</span><span class="token operator">:</span> 前序遍历的开始位置；<span class="token literal-property property">preEnd</span><span class="token operator">:</span> 前序遍历的结束位置；<span class="token literal-property property">inStart</span><span class="token operator">:</span> 中序遍历的开始位置；<span class="token literal-property property">inEnd</span><span class="token operator">:</span> 中序遍历的结束位置；<span class="token literal-property property">preLeftStart</span><span class="token operator">:</span> 前序遍历中，左子树的开始位置索引；<span class="token literal-property property">preLeftEnd</span><span class="token operator">:</span> 前序遍历中，左子树的结束位置索引；<span class="token literal-property property">inLeftStart</span><span class="token operator">:</span> 中序遍历中，左子树的开始位置索引；<span class="token literal-property property">inLeftEnd</span><span class="token operator">:</span> 中序遍历中，左子树的结束位置索引；<span class="token literal-property property">preRightStart</span><span class="token operator">:</span> 前序遍历中，右子树的开始位置索引；<span class="token literal-property property">preRightEnd</span><span class="token operator">:</span> 前序遍历中，右子树的结束位置索引；<span class="token literal-property property">inRightStart</span><span class="token operator">:</span> 中序遍历中，右子树的开始位置索引；<span class="token literal-property property">inRightEnd</span><span class="token operator">:</span> 中序遍历中，右子树的结束位置索引；<span class="token keyword">let</span> preLeftStart <span class="token operator">=</span> preStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> inLeftStart <span class="token operator">=</span> inStart<span class="token punctuation">;</span><span class="token keyword">let</span> inLeftEnd <span class="token operator">=</span> rootIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> preLeftEnd <span class="token operator">=</span> preLeftStart <span class="token operator">+</span> inLeftEnd <span class="token operator">-</span> inLeftStart<span class="token punctuation">;</span><span class="token keyword">let</span> inRightStart <span class="token operator">=</span> rootIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> inRightEnd <span class="token operator">=</span> inEnd<span class="token punctuation">;</span><span class="token keyword">let</span> preRightStart <span class="token operator">=</span> preLeftEnd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> preRightEnd <span class="token operator">=</span> preEnd<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a>226. 翻转二叉树</h3><p><a href="https://leetcode.cn/problems/invert-binary-tree/">leetcode</a></p><p>【提示】两种解法：</p><ol><li><p>深度优先遍历（前序递归）</p><p>在每个节点处交换该节点的左右子节点。</p></li><li><p>宽度优先遍历（层序遍历）</p></li></ol><div class="admonition warning"><p class="admonition-title">注意</p><p>不要跟<a href="https://leetcode.cn/problems/symmetric-tree/">对称二叉树</a>弄混了，对称二叉树才需要对比内侧和外侧。</p></div><hr><h3 id="538-把二叉搜索树转换为累加树"><a href="#538-把二叉搜索树转换为累加树" class="headerlink" title="538. 把二叉搜索树转换为累加树"></a>538. 把二叉搜索树转换为累加树</h3><p><a href="https://leetcode.cn/problems/convert-bst-to-greater-tree/">leetcode</a></p><p><a href="https://www.programmercarl.com/0538.%E6%8A%8A%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%B4%AF%E5%8A%A0%E6%A0%91.html#%E9%80%92%E5%BD%92">题解</a></p><p>【提示】<code>BST</code> 的中序遍历是有序的。将 <code>BST</code> 看成一个递增的有序数组，要让有序数组的每个元素是比它大的元素的累加和，则从后往前遍历这个数组即可。类比数组的遍历，<code>BST</code> 的中序遍历是递增的，那么将中序遍历倒置，即先遍历右子树再遍历左子树，在”倒中序遍历位置“累加和。</p><hr><h3 id="543-二叉树的直径"><a href="#543-二叉树的直径" class="headerlink" title="543. 二叉树的直径"></a>543. 二叉树的直径</h3><p><a href="https://leetcode.cn/problems/diameter-of-binary-tree/">leetcode</a></p><p><a href="https://leetcode.cn/problems/diameter-of-binary-tree/solution/er-cha-shu-de-zhi-jing-by-leetcode-solution/">题解</a></p><p>【提示】按递归三要素来分析：</p><ol><li>递归函数的参数：节点 <code>node</code>；</li><li>每个节点的处理逻辑：全局设置一个数 <code>maxPath</code>。后序遍历位置，分别得到当前节点左右子树的深度 <code>L</code> 和 <code>R</code>，则当前节点的直径为 <code>max(maxPath, L + R - 1)</code>；</li><li>返回值：节点的深度 <code>max(L, R) + 1</code>；</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">diameterOfBinaryTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> maxPath <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> <span class="token constant">L</span> <span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    maxPath <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxPath<span class="token punctuation">,</span> <span class="token constant">L</span> <span class="token operator">+</span> <span class="token constant">R</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> maxPath <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617. 合并二叉树"></a>617. 合并二叉树</h3><p><a href="https://leetcode.cn/problems/merge-two-binary-trees/">leetcode</a></p><p><a href="https://leetcode.cn/problems/merge-two-binary-trees/solution/dong-hua-yan-shi-di-gui-die-dai-617he-bing-er-cha-/">题解</a></p><p>【提示】同时遍历两棵树，用 <code>root1.left</code> 和 <code>root1.right</code> “接住”递归返回的节点。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root1 * @param {TreeNode} root2 * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">mergeTrees</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root1<span class="token punctuation">,</span> root2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root1 <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> root2 <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> root1 <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> root2 <span class="token operator">:</span> root1<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root1 <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root2 <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    root1<span class="token punctuation">.</span>val <span class="token operator">+=</span> root2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>   <span class="token punctuation">}</span>  root1<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  root1<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> root1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="437-路径总和-III"><a href="#437-路径总和-III" class="headerlink" title="437. 路径总和 III"></a>437. 路径总和 III</h3><p><a href="https://leetcode.cn/problems/path-sum-iii/">leetcode</a></p><p><a href="https://leetcode.cn/problems/path-sum-iii/solution/lu-jing-zong-he-iii-by-leetcode-solution-z9td/">题解</a></p><p>【提示】两种解法：深度优先搜索和前缀和。</p><p>（1）深度优先搜索</p><p>计算每个节点作为路径起点时的路径和，计算量大，耗时。</p><ol><li>递归函数的参数：节点 root，路径总和 target；</li><li>返回值：路径总和满足 target 的路径数量；</li><li>退出条件：递归到空节点，返回 0；</li><li>单层逻辑：当前节点的值是否等于 target（target 在每次递归时减去当前路径起点的 val）；</li></ol><div class="admonition warning"><p class="admonition-title">注意</p><p>主函数中也有递归的逻辑，遍历每个节点，以每个节点作为路径起点计算满足路径和为 target 的路径数量。</p></div><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 主函数 */</span><span class="token keyword">var</span> <span class="token function-variable function">pathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> targetSum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">rootSum</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 以 root 为路径起点</span>    res <span class="token operator">+=</span>  <span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// root 的左子树每个节点作为路径起点</span>    res <span class="token operator">+=</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// root 的右子树每个节点作为路径起点</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/* 以某个节点作为路径起点时，计算满足路径总和的路径数量 */</span><span class="token keyword">function</span> <span class="token function">rootSum</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> targetSum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment">// 前序遍历位置</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">===</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    res <span class="token operator">+=</span> <span class="token function">rootSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> targetSum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    res <span class="token operator">+=</span> <span class="token function">rootSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> targetSum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）前缀和</p><p>也是递归，计算每个并存储每个节点的前缀和。</p><ol><li>递归参数：节点 <code>node</code>，前缀和 <code>prefix（hash表）</code>，当前节点的前缀和 <code>curSum</code>，路径总和 <code>targetSum</code>。</li><li>返回值：满足 <code>targetSum</code> 的路径数量；</li><li>退出条件：递归到空节点，返回 <code>0</code>；</li><li>单层逻辑：计算当前节点的前缀和，从前缀和中获取前缀和为 <code>(curSum - targetSum)</code> 的值，这个值就是满足条件的路径数量。将当前节点的前缀和存储起来，分别递归当前节点的左右子树，回溯时将相应的前缀和 <code>-1</code>。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @param {number} targetSum * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">pathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> targetSum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> prefix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    prefix<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化前缀和</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> curSum<span class="token punctuation">,</span> targetSum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    curSum <span class="token operator">+=</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    res <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curSum <span class="token operator">-</span> targetSum<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>    prefix<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>curSum<span class="token punctuation">,</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curSum<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> curSum<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>    res <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> curSum<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>    prefix<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>curSum<span class="token punctuation">,</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curSum<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="124-二叉树中的最大路径和"><a href="#124-二叉树中的最大路径和" class="headerlink" title="124. 二叉树中的最大路径和"></a>124. 二叉树中的最大路径和</h3><p><a href="https://leetcode.cn/problems/binary-tree-maximum-path-sum/">leetcode</a></p><p><a href="https://leetcode.cn/problems/binary-tree-maximum-path-sum/solution/er-cha-shu-zhong-de-zui-da-lu-jing-he-by-leetcode-/">题解</a></p><p>【提示】分析最大路径和为：当前节点+左子树+右子树。</p><ul><li>左子树的贡献值（左子树的最大路径和）；</li><li>右子树的贡献值（右子树的最大路径和）；</li></ul><p><strong>递归四部曲：</strong></p><ol><li>递归参数：节点 <code>node</code>；</li><li>返回值：每个节点的最大贡献值，即 <code>node.val + max(leftPathSum, rightPathSum)</code>；</li><li>退出条件：递归到空节点，返回贡献值 <code>0</code>。</li><li>单层逻辑：后序遍历位置，先递归得到左右子树的最大贡献值，然后计算最大路径和 <code>node.val + leftPathSum + rightPathSum</code>，在每个节点处比较得到 <code>maxPathSum</code>。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">maxPathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> maxPathSum <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> leftPathSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> rightPathSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 后序遍历位置</span>        <span class="token keyword">let</span> pathSum <span class="token operator">=</span> node<span class="token punctuation">.</span>val <span class="token operator">+</span> leftPathSum <span class="token operator">+</span> rightPathSum<span class="token punctuation">;</span> <span class="token comment">// 计算最大路径和</span>        maxPathSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxPathSum<span class="token punctuation">,</span> pathSum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 比较</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>val <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftPathSum<span class="token punctuation">,</span> rightPathSum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回当前节点的最大贡献值</span>    <span class="token punctuation">}</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> maxPathSum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><h4 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53. 最大子数组和"></a>53. 最大子数组和</h4><p><a href="https://leetcode.cn/problems/maximum-subarray/">leetcode</a></p><p><a href="https://leetcode.cn/problems/maximum-subarray/solution/zui-da-zi-xu-he-cshi-xian-si-chong-jie-fa-bao-li-f/">题解</a></p><p>【提示】目前只实现了暴力双循环和贪心的解法，还有动态规划和分治法两种解法。</p><p>（1）贪心</p><p>如果连续和小于等于0，那么此时的子数组和对最大子数组和没有贡献，将子数组和重置为0，从下一个数继续加。</p><p>（2）动态规划</p><ul><li>dp[i]: 表示以nums[i]结尾的最大子数组和；</li><li>递推公式：dp[i] = max(dp[i - 1] = nums[i], nums[i]); </li><li>初始化：dp[0] = nums[0];</li></ul><p>（3）分治法</p><p>分情况讨论：</p><ol><li>最大子数组和在中间位置的两边；</li><li>最大子数组和跨越中间位置；</li></ol><p>分别求出上面两种情况的子数组和，最大的就是最大子数组和；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 二分法，递归求中间位置两边的子数组和，并与跨越中间位置的最大子数组和比较</span><span class="token keyword">function</span> <span class="token function">maxSubArrayHelper</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> leftSum <span class="token operator">=</span> <span class="token function">maxSubArrayHelper</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> rightSum <span class="token operator">=</span> <span class="token function">maxSubArrayHelper</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> midSum <span class="token operator">=</span> <span class="token function">findMaxCrossingSubArray</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftSum<span class="token punctuation">,</span> rightSum<span class="token punctuation">,</span> midSum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 求跨越中间位置的最大子数组和 */</span><span class="token keyword">function</span> <span class="token function">findMaxCrossingSubArray</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 虽然求左右两边的最大子数组和用的贪心，但是与贪心解法又有差异，sum没有在循环中置为0</span>  <span class="token keyword">let</span> leftSum <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> mid<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> left<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    leftSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftSum<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> rightSum <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">;</span>  sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    rightSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>rightSum<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>leftSum <span class="token operator">+</span> rightSum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a>5. 最长回文子串</h4><p><a href="https://leetcode.cn/problems/longest-palindromic-substring/">leetcode</a></p><p><a href="https://leetcode.cn/problems/longest-palindromic-substring/solution/zhong-xin-kuo-san-fa-he-dong-tai-gui-hua-by-reedfa/">题解</a></p><p>【提示】中心向两边扩散（双指针），使用动态规划优化（空间换时间）</p><p>中心向两边扩散，定义 left 和 right 指针，分别指向当前字符的左右字符；</p><ol><li>如果 left 处的字符与当前字符相同，则 left–，直到不相等；</li><li>如果 right 处的字符与当前字符相同，则 right++，直到不相等；</li><li>如果 left 和 right 指向的字符相同，则同时分别向左右移动，left–, right++，直到不相等；</li></ol><p>需要注意边界：<code>left &gt;= 0, right &lt; s.length</code>；</p><p>动态规划优化：定义 dp 数组为 dp[i][j]，表示 <code>i</code> 到 <code>j</code> 范围内的子串是否为回文子串；</p><p>递推公式：如果 dp[i + 1][j - 1] = true 并且 <code>i</code> 和 <code>j</code> 指向的字符相同，则 dp[i][j] = true。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">===</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">||</span> dp<span class="token punctuation">[</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// r - l &lt;= 2 表示 r 和 l 之间的距离不超过 2,</span>      dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      len <span class="token operator">=</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&gt;</span> maxLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>        maxLen <span class="token operator">=</span> len<span class="token punctuation">;</span>        maxStart <span class="token operator">=</span> l<span class="token punctuation">;</span>        maxEnd <span class="token operator">=</span> r<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a>416. 分割等和子集</h4><p><a href="https://leetcode.cn/problems/partition-equal-subset-sum/">leetcode</a></p><p><a href="https://www.programmercarl.com/0416.%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86.html#_01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98">题解</a></p><p>【提示】抽象问题为01背包问题。</p><ul><li>背包容量为数组和的一半，即sum / 2；</li><li>如果dp[sum/2]===sum/2，则return true，否则return false；</li></ul><hr><h4 id="494-目标和"><a href="#494-目标和" class="headerlink" title="494. 目标和"></a>494. 目标和</h4><p><a href="https://leetcode.cn/problems/target-sum/">leetcode</a></p><p><a href="https://www.programmercarl.com/0494.%E7%9B%AE%E6%A0%87%E5%92%8C.html#%E6%80%BB%E7%BB%93">题解</a></p><p>【提示】将问题抽象为01背包。target不能直接作为背包容量，因为此时物品的价值有两种状态。由于nums数组中的数字有正负两种情况，那么构成的表达式可以分成三部分：正数和+负数和=target，而正数和-负数和=sum（数组和）。于是问题转换为求背包容量为正数和时，装满背包有多少种情况。公式化：</p><p>由 $positive+negetive=target, positive-negetive=sum$，有：</p><p>$positive = (sum+target)/2$</p><p>这里注意，可能positive&lt;0，此时positive=-positive（转换成正数和，因为数组中都是正整数）</p><hr><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><h4 id="零钱兑换"><a href="#零钱兑换" class="headerlink" title="零钱兑换"></a>零钱兑换</h4><p><a href="https://leetcode.cn/problems/coin-change/">leetcode</a></p><p><a href="https://www.programmercarl.com/0279.%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0.html#google_vignette">题解</a></p><p>【提示】抽象问题为完全背包，amount为背包容量，求最小的个数。</p><p>递推公式：dp[j] = min(dp[j], dp[j - coins[i]] + 1)；</p><p>初始化：dp[0] = 0，其他的dp[j] = Infinity；</p><hr><h4 id="279-完全平方数"><a href="#279-完全平方数" class="headerlink" title="279. 完全平方数"></a>279. 完全平方数</h4><p><a href="https://leetcode.cn/problems/perfect-squares/">leetcode</a></p><p><a href="https://www.programmercarl.com/0279.%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0.html">题解</a></p><p>【提示】抽象为完全背包问题，求最小个数。</p><p>递推公式：dp[j] = min(dp[j], dp[j - i * i] + 1)；</p><p>初始化：dp[0] = 0，其他dp[j] = Infinity；</p><div class="admonition warning"><p class="admonition-title">注意</p><p>这里的物品应该抽象为i * i，即完全平方数，因为背包里面只能装完全平方数。</p></div><hr><h3 id="打家劫舍"><a href="#打家劫舍" class="headerlink" title="打家劫舍"></a>打家劫舍</h3><h4 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198. 打家劫舍"></a>198. 打家劫舍</h4><p><a href="https://leetcode.cn/problems/house-robber/">leetcode</a></p><p>【提示】难点在确定 dp 数组的含义。</p><ol><li>dp 数组的含义：<code>dp[i]</code> 表示偷 下标 <code>i</code> 以内的房间，能够偷到的最高金额。</li><li>递推公式：<code>max(dp[i - 1], dp[i - 2] + nums[i])</code> <ul><li>不偷房间 <code>i</code> : <code>dp[i - 1]</code>；</li><li>偷房间 <code>i</code> : <code>dp[i - 2] = nums[i]</code>；</li></ul></li><li>初始化：从递推公式看出需要初始化 <code>dp[0]</code> 和 <code>dp[1]</code>；<ul><li><code>dp[0] = nums[0]</code>，<code>dp[1] = max(nums[0], nums[1])</code>；</li></ul></li></ol><hr><h4 id="337-打家劫舍-III"><a href="#337-打家劫舍-III" class="headerlink" title="337. 打家劫舍 III"></a>337. 打家劫舍 III</h4><p><a href="https://leetcode.cn/problems/house-robber-iii/">leetcode</a></p><p><a href="https://www.programmercarl.com/0337.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DIII.html#_337-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-iii">题解</a></p><p>【提示】房屋分布在一颗二叉树上，此时需要遍历这棵树。两种解法：递归和动态规划；</p><p>（1）递归（JavaScript 超时）</p><p>后序遍历，利用返回值求解。得到偷当前节点和不偷当前节点时的最大金额，然后取两者的最大值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">rob</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> umap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token comment">// 记忆化递归，利用 Map 将遍历过的节点的返回值保存起来，再次遍历到该节点直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>umap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> val1 <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>      <span class="token comment">// 偷当前节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>            val1 <span class="token operator">+=</span> <span class="token function">rob</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rob</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            val1 <span class="token operator">+=</span> <span class="token function">rob</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rob</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token comment">// 不偷当前节点</span>        <span class="token keyword">let</span> val2 <span class="token operator">=</span> <span class="token function">rob</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rob</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        umap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>val1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保存当前节点的值</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>val1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）动态规划（树形 DP）</p><p>利用数组记忆节点的状态。这里利用长度为 2 的数组记录偷当前节点和不偷当前节点时的状态，下标 0 表示不偷当前节点，1 表示偷。</p><p>dp 数组的含义：<code>dp[0]</code> 表示不偷当前节点的最大金额， <code>dp[1]</code> 表示偷当前节点时的最大金额。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">rob</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> val1 <span class="token operator">=</span> cur<span class="token punctuation">.</span>val <span class="token operator">+</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 投当前节点</span>    <span class="token keyword">let</span> val2 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不偷当前节点</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>val2<span class="token punctuation">,</span> val1<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 注意这里的返回值与 dp 数组的定义一致</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><h2 id="深度优先搜索（回溯）"><a href="#深度优先搜索（回溯）" class="headerlink" title="深度优先搜索（回溯）"></a>深度优先搜索（回溯）</h2><h3 id="200-岛屿数量"><a href="#200-岛屿数量" class="headerlink" title="200. 岛屿数量"></a>200. 岛屿数量</h3><p><a href="https://leetcode.cn/problems/number-of-islands/">leetcode</a></p><p>题解1-<a href="https://leetcode.cn/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/">通用解法</a></p><p>题解2-<a href="https://leetcode.cn/problems/number-of-islands/solution/number-of-islands-shen-du-you-xian-bian-li-dfs-or-/">本题解法</a></p><p>【提示】岛屿问题是一类在网格中的深度搜索问题，类似于二叉树和一般的一维数组的搜索（N叉树），只是网格深度搜索需要特别注意标记已遍历过的节点，并且搜索的方向有4个。求岛屿的数量，在<code>宽度遍历</code>中<code>count++</code>。</p><p><strong>岛屿问题的通用框架：</strong></p><ul><li><code>'0'</code>表示海洋；</li><li><code>'1'</code>表示陆地（还没遍历过）；</li><li><code>'2'</code>表示陆地（已经遍历过）；</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> row <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">const</span> column <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">/* 宽度遍历 */</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> column<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">具体操作</span><span class="token punctuation">(</span>求岛屿数量<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/* 深度遍历 --- 是否有返回值根据题目要求定 */</span><span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">grid<span class="token punctuation">,</span> myRow<span class="token punctuation">,</span> myColumn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// base case---退出递归的条件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">inArea</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> myRow<span class="token punctuation">,</span> myColumn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>    grid<span class="token punctuation">[</span>myRow<span class="token punctuation">]</span><span class="token punctuation">[</span>myColumn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2'</span><span class="token punctuation">;</span> <span class="token comment">// 标记已遍历过的陆地，防止重复遍历</span>    <span class="token comment">// 分四个方向分别深度搜索</span>  <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> myRow <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> myColumn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> myRow <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> myColumn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> myRow<span class="token punctuation">,</span> myColumn <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> myRow<span class="token punctuation">,</span> myColumn <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 判断这个位置是否在网格上 */</span><span class="token keyword">function</span> <span class="token function">inArea</span><span class="token punctuation">(</span><span class="token parameter">grid<span class="token punctuation">,</span> myRow<span class="token punctuation">,</span> myColumn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> row <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">const</span> column <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>myRow <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> myRow <span class="token operator">&lt;</span> row<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>myColumn <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> myColumn <span class="token operator">&lt;</span> column<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="463-岛屿的周长"><a href="#463-岛屿的周长" class="headerlink" title="463. 岛屿的周长"></a>463. 岛屿的周长</h3><p><a href="https://leetcode.cn/problems/island-perimeter/">leetcode</a></p><p><a href="https://leetcode.cn/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/">题解</a></p><p>【提示】其实求岛屿的周长就是求与边界相邻的岛屿的边缘和与海洋相邻的岛屿的边缘，如图所示</p><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220726200101.jpeg" alt="将岛屿周长中的边分为两类"></p><p>当dfs即遇到上图两种情况时返回1，即周长加1。</p><hr><h3 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先"></a>236. 二叉树的最近公共祖先</h3><p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">leetcode</a></p><p>【提示】后序遍历，把整棵树分为三部分：左子树、根节点、右子树。</p><ul><li><p>递归参数：root, p, q；返回值：root（最近公共祖先）；</p></li><li><p>退出条件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> p <span class="token operator">||</span> root <span class="token operator">===</span> q <span class="token operator">||</span> root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>后序遍历，分别得到左右子树递归的结果，然后判断左右子树值的情况；</p><ul><li>left和right都不为空，则返回root；</li><li>left为空，right不为空，则返回right；</li><li>left不为空，right为空，则返回left；</li><li>left和right都为空，则返回null；</li></ul></li></ul><hr><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><p><a href="https://leetcode.cn/problems/two-sum/">leetcode</a></p><p><a href="https://leetcode.cn/problems/two-sum/solution/jie-suan-fa-1-liang-shu-zhi-he-by-guanpengchn/">题解</a></p><p>【提示】<code>num1+num2=target</code>，那么 <code>num2=target-num1</code>，即 <code>num1</code> 和 <code>num2</code> 之间存在映射关系。用 HashMap 来存储 <code>key: nums[i], value: i</code>。在一次遍历 nums 的过程中，找 map 中是否有 <code>target-nums[i]</code>，如果存在就返回结果；不存在就把 <code>nums[i]</code> 存到 map 里面。</p><hr><h3 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h3><p><a href="https://leetcode.cn/problems/3sum/">leetcode</a></p><p><a href="https://leetcode.cn/problems/3sum/solution/hua-jie-suan-fa-15-san-shu-zhi-he-by-guanpengchn/">题解</a></p><p>【提示】找到数组 nums 中 <code>a+b+c=0</code> 的序列。用回溯法（组合+去重）超时了。用双指针，先对数组排序，然后用两个指针 <code>left</code> 和 <code>right</code> 分别指向当前元素的后一个和数组的最后一位，随后 while 循环移动双指针找到符合条件的序列。注意移动指针的过程需要去重。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 当前的数大于 0，三个数之和肯定大于 0</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 去重</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  left <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 双指针移动</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> left<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 去重</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> right<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 去重</span>      left<span class="token operator">++</span><span class="token punctuation">;</span>      right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/2022/06/04/ji-zhu-kai-fa/git-ming-ling/"/>
      <url>/2022/06/04/ji-zhu-kai-fa/git-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h1><p>初始化一个git项目时的操作</p><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 创建本地分支并切换 </span>git checkout -b main 新建main分支，并转至main分支<span class="token comment"># 查看本地分支</span>git branch<span class="token comment"># 查看远程分支</span>git branch -a<span class="token comment"># 切换分支</span>git checkout <span class="token string">'branch name'</span><span class="token comment"># 删除本地分支</span>git branch -d branch_name<span class="token comment"># git push origin &lt;指定的本地分支名&gt;</span><span class="token comment"># 强行让本地分支覆盖远程分支(出现hint错误)</span>git push origin &lt;指定的分支名&gt; -f<span class="token comment"># 从远程指定分支上拉取代码</span>git clone -b  &lt;指定分支名&gt;  &lt;ssh或者http地址&gt; <span class="token comment"># 查看当前配置了哪些远程仓库</span>git remote -v<span class="token comment"># 提交代码</span>git push &lt;远程仓库名&gt; &lt;本地仓库名&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拉取分支"><a href="#拉取分支" class="headerlink" title="拉取分支"></a>拉取分支</h2><p>拉取远程仓库的代码到本地</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果修改了拉取的代码，但是不希望远程的代码覆盖本地修改的部分</p><p>参考链接：<a href="https://blog.csdn.net/zhouzhiwengang/article/details/124447081">https://blog.csdn.net/zhouzhiwengang/article/details/124447081</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash<span class="token comment"># 备份当前修改的内容</span><span class="token function">git</span> stash save <span class="token string">'备注'</span><span class="token comment"># 暂存时，添加备注信息</span><span class="token function">git</span> stash list<span class="token comment"># 查看暂存列表</span><span class="token function">git</span> stash pop<span class="token comment"># 将暂存区最新的代码恢复到工作区（暂存区相应的代码会删除）</span><span class="token function">git</span> stash pop --index <span class="token comment"># 将指定的暂存区代码恢复到工作区</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue概览</title>
      <link href="/2022/05/19/ji-zhu-chen-dian/vue-li-jie/vue-gai-lan/"/>
      <url>/2022/05/19/ji-zhu-chen-dian/vue-li-jie/vue-gai-lan/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue概览"><a href="#Vue概览" class="headerlink" title="Vue概览"></a>Vue概览</h1><h2 id="Vue是什么"><a href="#Vue是什么" class="headerlink" title="Vue是什么"></a>Vue是什么</h2><p>Vue是一个基于<code>MVVM</code>的前端框架，目前有两个版本（2.x和3.x）。目前学习的是Vue2.x的特性，3.x对2.x有更好的改进。在前端框架出现以前，前端工程师编写代码的思路是事件驱动，围绕事件来展开。Vue鼓励开发人员使用数据驱动的方式进行开发，围绕数据状态来编写代码。</p><p><strong>事件驱动的开发流程：</strong></p><ol><li>编写静态页面；</li><li>给对应元素绑定对应的事件；</li><li>实现事件对应的功能，如获取数据，更新页面等等；</li><li>手动将计算后的数据更新到页面中；</li></ol><p><strong>数据驱动的开发流程：</strong></p><ol><li>设计数据结构；</li><li>完成静态页面，同时将数据和事件绑定到页面中；</li><li>事件绑定的方法（methods）中完成相应的逻辑处理；</li></ol><p><strong>区别：</strong></p><ol><li>事件驱动以事件为核心，事件如何触发，触发后应该进行怎样的操作，与用户的交互密切相关；数据驱动以数据的维护为核心，更多的考虑数据在什么时候得到正确的改变，而无需过多的考虑UI的变化和事件的监听。</li><li>数据驱动需要对一个页面进行数据结构的抽象，我们应该如何设计一个页面的数据结构。</li></ol><p><strong>MVVM原理</strong></p><p>MVVM(Model-View-ViewModel)是一种软件架构模式。</p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220723001016.png" alt="MVVMPattern" style="zoom:80%;"><ul><li>Model: 模型层，负责处理业务逻辑以及和服务器端交互。<ul><li>Wiki: <em>模型</em>是指代表真实状态内容的<a href="https://zh.wikipedia.org/wiki/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B">领域模型</a>（面向对象），或指代表内容的<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E5%B1%82">数据访问层</a>（以数据为中心）。</li></ul></li><li>View: 视图层，负责将数据模型转化为UI展示出来。<ul><li>Wiki: 视图是用户在屏幕上看到的结构、布局和外观（UI）。</li></ul></li><li>ViewModel: 视图模型层，连接View和Model，是两者通信的桥梁。<ul><li>Wiki: <em>视图模型</em>是暴露公共属性和命令的视图的抽象。在视图模型中，绑定器在视图和<a href="https://zh.wikipedia.org/w/index.php?title=%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%99%A8&amp;action=edit&amp;redlink=1">数据绑定器</a>之间进行通信。</li></ul></li></ul><p>Vue专注于 MVVM 模型的 ViewModel 层。它通过<code>双向数据</code>绑定把 View 层和 Model 层连接了起来。实际的 DOM 封装和输出格式都被抽象为了 Directives 和 Filters。</p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220519225439.png" alt="MVVM" style="zoom: 50%;"><p>在Vue中，View对应DOM（Document Object Model），通过vm.$el可以访问到；Model对应Vue实例的data数据对象，通过vm.$data可以访问到；每个Vue实例本质上就是一个ViewModel，由Vue提供的双向绑定机制实现View中触发的事件改变Model状态的变化，Model状态的变化响应到View上。</p><hr><h2 id="Vue实例"><a href="#Vue实例" class="headerlink" title="Vue实例"></a>Vue实例</h2><p>​        Vue实例本质是一个ViewModel，在Vue实例中对View和Model进行维护。实际开发中，Vue创建的是一个SPA（Single Page Application，单页应用），整个应用通过一个页面进行展示，通过路由找到URL对应的组件对页面进行局部替换，然后渲染展示给用户。这样的好处是局部刷新提升用户的访问速度，页面切换的动画更好实现。但缺点在于，SPA不利于SEO（Search Engine Optimization），由于都在一个页面进行展示，因此首页加载的资源较多，响应速度慢。</p><p>​         一个SPA的典型组成结构如下：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">根实例├─ App.vue    ├─ Page1    │  ├─ subPage1    │  ├─ subPage2    ├─ Page2    ├─ Page3 ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建一个组件Vue实例</span><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">// 常用的配置</span>    <span class="token comment">// 父组件传入的数据</span>    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">// 局部注册组件</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// Model---数据对象</span>    <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token comment">// 页面中涉及的数据</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">// 对data中数据对象属性的操作</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 生命周期钩子</span>    <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建一个根实例</span><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    router<span class="token punctuation">,</span>    store<span class="token punctuation">,</span>    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h2><hr>]]></content>
      
      
      <categories>
          
          <category> 技术沉淀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发配置</title>
      <link href="/2022/05/15/huan-jing-pei-zhi/qian-duan-kai-fa-pei-zhi/"/>
      <url>/2022/05/15/huan-jing-pei-zhi/qian-duan-kai-fa-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="Vue和Vue-CLI版本"><a href="#Vue和Vue-CLI版本" class="headerlink" title="Vue和Vue-CLI版本"></a>Vue和Vue-CLI版本</h2><ul><li>安装Vue-CLI</li></ul><pre class="line-numbers language-none"><code class="language-none">npm install -g @vue/cli （安装的是最新版）npm install vue-cli@2.9.6 （指定版本安装【指定版本为3.0以下版本】，其中2.9.6为版本号）npm install -g @vue/cli@3.11.0（指定版本安装【指定版本为3.0以上版本】，其中3.11.0为版本号）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>Vue-CLI版本查看</li></ul><pre class="line-numbers language-none"><code class="language-none">vue -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>对应关系</li></ul><pre class="line-numbers language-none"><code class="language-none">Vue CLI 4.5以下---Vue2Vue CLI 4.5及以上---Vue3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>【注】：</strong>当使用Vue-CLI进行快速原型开发的时候，如果使用<code>vue serve</code>后报错，看看Vue-CLI与Vue的版本是否对应。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.cnblogs.com/xiluhua/p/14600292.html">xiluhua-博客园-vue &amp; vue Cli 版本对应关系</a></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 技术开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer-JavaScript刷题笔记</title>
      <link href="/2022/05/09/suan-fa/jian-zhi-offer-bi-ji/"/>
      <url>/2022/05/09/suan-fa/jian-zhi-offer-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="剑指offer-JavaScript刷题笔记"><a href="#剑指offer-JavaScript刷题笔记" class="headerlink" title="剑指offer-JavaScript刷题笔记"></a>剑指offer-JavaScript刷题笔记</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="二叉树的深度"><a href="#二叉树的深度" class="headerlink" title="二叉树的深度"></a>二叉树的深度</h3><p><a href="https://www.nowcoder.com/practice/435fb86331474282a3499955f0a41e8b?tpId=13&amp;tqId=23294&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p>【提示】</p><ul><li>思路一：后序遍历位置，计算每个节点的高度，返回每个节点的高度。</li><li>思路二：前序遍历位置，计算每个节点的深度，记录每个节点的深度，最后比较得到最大深度。</li></ul><div class="admonition info"><p>深度和高度的区别：二叉树节点的深度是：从根节点到该节点的最长简单路径边的条数；二叉树的高度是：从该节点到叶子结点的最长简单路径边的条数。</p></div><hr><h3 id="按之字形顺序打印二叉树"><a href="#按之字形顺序打印二叉树" class="headerlink" title="按之字形顺序打印二叉树"></a><a href="#%E6%8C%89%E4%B9%8B%E5%AD%97%E5%BD%A2%E9%A1%BA%E5%BA%8F%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91">按之字形顺序打印二叉树</a></h3><p><a href="https://www.nowcoder.com/practice/91b69814117f4e8097390d107d2efbe0?tpId=13&amp;tqId=23454&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/">leetcode</a></p><p>【提示】层序遍历，设置一个标志变量 <code>order</code>，偶数层改变结果的顺序。</p><hr><h3 id="二叉搜索树的第k个节点"><a href="#二叉搜索树的第k个节点" class="headerlink" title="二叉搜索树的第k个节点"></a>二叉搜索树的第k个节点</h3><p><a href="https://www.nowcoder.com/practice/57aa0bab91884a10b5136ca2c087f8ff?tpId=13&amp;tqId=2305268&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p>【提示】BST 中序遍历是有序的（升序），在中序遍历位置进行统计。</p><hr><h3 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h3><p><a href="https://www.nowcoder.com/practice/8a19cbe657394eeaac2f6ea9b0f6fcf6?tpId=13&amp;tqId=23282&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">leetcode</a></p><p>【提示】前序遍历和中序遍历可以确定左子树和右子树序列的索引范围，然后在前序遍历位置分别计算得到每次递归时的序列的索引范围，分别递归创建左子树和右子树。</p><hr><h3 id="树的子结构"><a href="#树的子结构" class="headerlink" title="==树的子结构=="></a>==树的子结构==</h3><p><a href="https://www.nowcoder.com/practice/6e196c44c7004d15b1610b9afca8bd88?tpId=13&amp;tqId=23293&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/">leetcode</a></p><p>【提示】将树 A 的每个节点当做根节点，与树 B 进行比较，因此主函数也需要递归。<code>isSubTree(pRoot1, pRoot2)</code> 从 <code>pRoot1</code> 开始与 <code>pRoot2</code> 逐节点比较。<code>HasSubTree(pRoot1, pRoot2)</code> 将 <code>pRoot1</code> 的每个节点当做根节点与 <code>pRoot2</code> 进行比较。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">HasSubtree</span><span class="token punctuation">(</span><span class="token parameter">pRoot1<span class="token punctuation">,</span> pRoot2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// write code here</span>    <span class="token comment">// 题目限制：空树不是子树</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pRoot1 <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> pRoot2 <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 首先从pRoot1和pRoot2的根节点开始比较，如果不等，那么分别看pRoot1的左节点和pRoot1的右节点</span>    <span class="token keyword">return</span> <span class="token function">isSubTree</span><span class="token punctuation">(</span>pRoot1<span class="token punctuation">,</span> pRoot2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">HasSubtree</span><span class="token punctuation">(</span>pRoot1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> pRoot2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">HasSubtree</span><span class="token punctuation">(</span>pRoot1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> pRoot2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 最开始，pRoot1.val = pRoot2.val，从pRoot1的这个节点开始比较</span><span class="token keyword">function</span> <span class="token function">isSubTree</span><span class="token punctuation">(</span><span class="token parameter">pRoot1<span class="token punctuation">,</span> pRoot2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 说明pRoot2的每个节点都比较完了，都是相等的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pRoot2 <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pRoot1 <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// pRoot2还没比较完，但是pRoot1已经比较完了</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pRoot1<span class="token punctuation">.</span>val <span class="token operator">!==</span> pRoot2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 正在比较的节点的值不相等</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 分别比较左节点和右节点</span>    <span class="token keyword">return</span> <span class="token function">isSubTree</span><span class="token punctuation">(</span>pRoot1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> pRoot2<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSubTree</span><span class="token punctuation">(</span>pRoot1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> pRoot2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="二叉树的镜像"><a href="#二叉树的镜像" class="headerlink" title="二叉树的镜像"></a><a href="#%E4%BA%8C%E5%8F%89%E6%A0%91%E9%95%9C%E5%83%8F">二叉树的镜像</a></h3><p><a href="https://www.nowcoder.com/practice/a9d0ecbacef9410ca97463e4a5c83be7?tpId=13&amp;tqId=1374963&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/invert-binary-tree/">leetcode</a></p><p>【提示】交换当前节点的左右子节点，不要和 <a href="#%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91">对称的二叉树</a> 搞混了。</p><hr><h3 id="从上往下打印二叉树"><a href="#从上往下打印二叉树" class="headerlink" title="从上往下打印二叉树"></a><a href="#%E4%BB%8E%E4%B8%8A%E5%BE%80%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91">从上往下打印二叉树</a></h3><p><a href="https://www.nowcoder.com/practice/7fe2212963db4790b57431d9ed259701?tpId=13&amp;tqId=23280&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/">leetcode</a></p><p>【提示】最基础的层序遍历。</p><hr><h3 id="二叉搜索树的后序遍历序列"><a href="#二叉搜索树的后序遍历序列" class="headerlink" title="二叉搜索树的后序遍历序列"></a>二叉搜索树的后序遍历序列</h3><p><a href="https://www.nowcoder.com/practice/a861533d45854474ac791d90e447bafd?tpId=13&amp;tqId=23289&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/solution/mian-shi-ti-33-er-cha-sou-suo-shu-de-hou-xu-bian-6/">题解</a></p><p>【提示】1. 递归分治法；2. 辅助单调栈。</p><p>（1）递归分治法</p><p>从后序遍历区分出左子树序列的索引范围和右子树的索引范围，然后分别判断左子树和右子树是否满足 BST 的条件。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">VerifySquenceOfBST</span><span class="token punctuation">(</span><span class="token parameter">sequence</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// write code here</span>    <span class="token comment">// 分治法--左右子树都要满足条件</span>    <span class="token keyword">let</span> length <span class="token operator">=</span> sequence<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*    * sequence: 后序遍历序列    * start: 序列索引的起点    * end: 序列索引的终点    */</span>    <span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">sequence<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// 只有一个节点或没有节点的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">let</span> root <span class="token operator">=</span> sequence<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 根节点</span>        <span class="token keyword">let</span> leftEnd <span class="token operator">=</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 左子树在序列中的末端索引（此时是右子树的末端索引）</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>leftEnd <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> sequence<span class="token punctuation">[</span>leftEnd<span class="token punctuation">]</span> <span class="token operator">&gt;</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 找到左子树的末端索引</span>            leftEnd<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 找左子树序列末端的索引时已经判断了右子树，所以这里只需要判断左子树就可以了。</span>        <span class="token comment">// 如果左子树中有节点的值大于了根节点，则不满足</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> leftEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> start<span class="token punctuation">,</span> leftEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> leftEnd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> left <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">traverse</span><span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">VerifySquenceOfBST</span> <span class="token operator">:</span> VerifySquenceOfBST<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：$O(n^2)$。每次调用 <code>traverse</code> 减去一个根节点，因此递归占用 <code>O(N)</code> ；最差情况下（即当树退化为链表），每轮递归都需遍历树所有节点，占用 <code>O(N)</code>。</p><p>空间复杂度：$O(n)$。最差情况下（即当树退化为链表），递归深度将达到 <code>n</code>。</p><p>（2）辅助单调栈</p><p>思路：将后序遍历序列逆序，即“根-右-左”。遍历逆序序列，</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// TODO 搞懂单调辅助栈</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="二叉树中和为某一值的路径-一"><a href="#二叉树中和为某一值的路径-一" class="headerlink" title="二叉树中和为某一值的路径(一)"></a>二叉树中和为某一值的路径(一)</h3><p><a href="https://www.nowcoder.com/practice/508378c0823c423baa723ce448cbfd0c?tpId=13&amp;tqId=634&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/">leetcode</a></p><p>【提示】深度优先 DFS。在每个节点处将 sum 减去 curNode.val。返回 true 的条件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> curNode<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="二叉树中和为某一值的路径-二"><a href="#二叉树中和为某一值的路径-二" class="headerlink" title="二叉树中和为某一值的路径(二)"></a>二叉树中和为某一值的路径(二)</h3><p><a href="https://www.nowcoder.com/practice/b736e784e3e34731af99065031301bca?tpId=13&amp;tqId=23276&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p>【提示】DFS，在每个节点处 expectNumber 减去 curNode.val。路径符合条件时的判断：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> curNode<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> number <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 递归函数的参数</span><span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">curNode<span class="token punctuation">,</span> result<span class="token punctuation">,</span> path<span class="token punctuation">,</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token comment">// 记录路径上的值</span>  path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  number <span class="token operator">-=</span> curNode<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token comment">// 判断路径是否符合条件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> number <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// 深度优先搜索</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> result<span class="token punctuation">,</span> path<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> result<span class="token punctuation">,</span> path<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token comment">// 回溯</span>  path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="二叉树中和为某一值的路径-三"><a href="#二叉树中和为某一值的路径-三" class="headerlink" title="二叉树中和为某一值的路径(三)"></a>二叉树中和为某一值的路径(三)</h3><p><a href="https://www.nowcoder.com/practice/965fef32cae14a17a8e86c76ffe3131f?tpId=13&amp;tqId=2277604&amp;ru=/practice/508378c0823c423baa723ce448cbfd0c&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/path-sum-iii/">leetcode</a></p><p><a href="https://leetcode.cn/problems/path-sum-iii/solution/lu-jing-zong-he-iii-by-leetcode-solution-z9td/">题解</a></p><p>【提示】两种解法：深度优先搜索和前缀和。</p><p>（1）深度优先搜索</p><p>计算每个节点作为路径起点时的路径和，计算量大，耗时。</p><ol><li>递归函数的参数：节点 root，路径总和 target；</li><li>返回值：路径总和满足 target 的路径数量；</li><li>退出条件：递归到空节点，返回 0；</li><li>单层逻辑：当前节点的值是否等于 target（target 在每次递归时减去当前路径起点的 val）；</li></ol><div class="admonition warning"><p class="admonition-title">注意</p><p>主函数中也有递归的逻辑，遍历每个节点，以每个节点作为路径起点计算满足路径和为 target 的路径数量。</p></div><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 主函数 */</span><span class="token keyword">var</span> <span class="token function-variable function">pathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> targetSum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">rootSum</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 以 root 为路径起点</span>    res <span class="token operator">+=</span>  <span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// root 的左子树每个节点作为路径起点</span>    res <span class="token operator">+=</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// root 的右子树每个节点作为路径起点</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/* 以某个节点作为路径起点时，计算满足路径总和的路径数量 */</span><span class="token keyword">function</span> <span class="token function">rootSum</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> targetSum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment">// 前序遍历位置</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">===</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    res <span class="token operator">+=</span> <span class="token function">rootSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> targetSum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    res <span class="token operator">+=</span> <span class="token function">rootSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> targetSum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）前缀和</p><p>也是递归，计算每个并存储每个节点的前缀和。</p><ol><li>递归参数：节点 <code>node</code>，前缀和 <code>prefix（hash表）</code>，当前节点的前缀和 <code>curSum</code>，路径总和 <code>targetSum</code>。</li><li>返回值：满足 <code>targetSum</code> 的路径数量；</li><li>退出条件：递归到空节点，返回 <code>0</code>；</li><li>单层逻辑：计算当前节点的前缀和，从前缀和中获取前缀和为 <code>(curSum - targetSum)</code> 的值，这个值就是满足条件的路径数量。将当前节点的前缀和存储起来，分别递归当前节点的左右子树，回溯时将相应的前缀和 <code>-1</code>。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @param {number} targetSum * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">pathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> targetSum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> prefix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    prefix<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化前缀和</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> curSum<span class="token punctuation">,</span> targetSum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    curSum <span class="token operator">+=</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    res <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curSum <span class="token operator">-</span> targetSum<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>    prefix<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>curSum<span class="token punctuation">,</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curSum<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> curSum<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>    res <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> curSum<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 回溯</span>    prefix<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>curSum<span class="token punctuation">,</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curSum<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="在二叉树中找到两个节点的最近公共祖先"><a href="#在二叉树中找到两个节点的最近公共祖先" class="headerlink" title="在二叉树中找到两个节点的最近公共祖先"></a>在二叉树中找到两个节点的最近公共祖先</h3><p><a href="https://www.nowcoder.com/practice/e0cc33a83afe4530bcec46eba3325116?tpId=13&amp;tqId=1024325&amp;ru=/practice/965fef32cae14a17a8e86c76ffe3131f&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/">leetcode</a></p><p><a href="https://www.programmercarl.com/0236.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html#java">题解</a></p><p>【提示】后序遍历位置，分别在左右子树上搜索，需要搜索整棵树。</p><hr><h3 id="二叉搜索树的最近公共祖先"><a href="#二叉搜索树的最近公共祖先" class="headerlink" title="二叉搜索树的最近公共祖先"></a>二叉搜索树的最近公共祖先</h3><p><a href="https://www.nowcoder.com/practice/d9820119321945f588ed6a26f0a6991f?tpId=13&amp;tqId=2290592&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/">leetcode</a></p><p><a href="https://www.programmercarl.com/0235.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html#%E9%80%92%E5%BD%92%E6%B3%95">题解</a></p><p>【提示】利用 BST 遍历顺序的特点，在前序遍历位置，只搜索某一条边，在某一条边找到 cur.val 在 区间 [p.val, q.val]（或者 [q.val, p.val]），则返回 cur，不需要遍历整棵树。</p><hr><h3 id="二叉搜索树与双向链表"><a href="#二叉搜索树与双向链表" class="headerlink" title="二叉搜索树与双向链表"></a>二叉搜索树与双向链表</h3><p><a href="https://www.nowcoder.com/practice/947f6eb80d944a84850b0538bf0ec3a5?tpId=13&amp;tqId=23253&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/">leetcode</a></p><p>【提示】BST 的中序遍历是有序的，算法逻辑都在中序遍历位置。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义两个全局变量</span><span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 指向中序遍历的前一个节点</span><span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 指向双向链表的头节点，也就是中序遍历的第一个节点</span><span class="token comment">// 递归原地转换</span><span class="token keyword">function</span> <span class="token function">BST2BDList</span><span class="token punctuation">(</span><span class="token parameter">curNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">BST2BDList</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">...</span><span class="token punctuation">(</span>更新pre，处理 pre 的后继和 cur 的前驱<span class="token punctuation">)</span>    <span class="token function">BST2BDList</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="判断是不是平衡二叉树"><a href="#判断是不是平衡二叉树" class="headerlink" title="判断是不是平衡二叉树"></a>判断是不是平衡二叉树</h3><p><a href="https://www.nowcoder.com/practice/8b3b95850edb4115918ecebdf1b4d222?tpId=13&amp;tqId=23250&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/ping-heng-er-cha-shu-lcof/">leetcode</a></p><p><strong>平衡二叉树的定义（Balanced Binary Tree）：</strong></p><p>它是一棵空树或它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。</p><p>【提示】后序遍历位置。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 后序遍历，-1表示不是平衡二叉树</span><span class="token comment">// 只要左子树或右子树的高度为-1就返回，此时不是平衡二叉树</span><span class="token keyword">const</span> <span class="token function-variable function">getHeight</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> leftHeight <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>leftHeight <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> rightHeight <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>rightHeight <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 后序遍历位置，对每个节点的操作</span>  <span class="token keyword">let</span> height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 左右子树的高度须满足条件，不满足直接 return 。满足后再计算当前节点的高度：左子树高度和右子树高度重最大的一个 + 1</span>  <span class="token keyword">return</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="二叉树的下一个节点"><a href="#二叉树的下一个节点" class="headerlink" title="二叉树的下一个节点"></a>二叉树的下一个节点</h3><p><a href="https://www.nowcoder.com/practice/9023a0c988684a53960365b889ceaf5e?tpId=13&amp;tqId=23451&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p>leetcode</p><p>【提示】解法 1：先找到根节点，然后中序遍历整棵树，最后匹配目标节点；解法 2：分析中序遍历的特点，分组判断。</p><p>解法 2：</p><ol><li>节点的右子树不为空，找到该节点右子树最左边的节点并返回；</li><li>节点右子树为空，且该节点是其父节点的左节点，直接返回其父节点；</li><li>节点右子树为空，该节点是其父节点的右节点，则该节点一直沿着next指针往上走，直到指针指向的节点的左子节点是指针上一次指向的节点，返回当前指针的 next；</li></ol><hr><h3 id="对称的二叉树"><a href="#对称的二叉树" class="headerlink" title="对称的二叉树"></a><a href="#%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91">对称的二叉树</a></h3><p><a href="https://www.nowcoder.com/practice/ff05d44dfdb04e1d83bdbdab320efbcb?tpId=13&amp;tqId=23452&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/dui-cheng-de-er-cha-shu-lcof/">leetcode</a></p><p>【提示】分别比较当前节点的外侧和内侧节点是否一致。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 递归参数：当前节点的左节点和当前节点的右节点</span><span class="token keyword">const</span> <span class="token function-variable function">compare</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">leftNode<span class="token punctuation">,</span> rightNode</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 递归退出条件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> rightNode <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> rightNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> rightNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode<span class="token punctuation">.</span>val <span class="token operator">!==</span> rightNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">let</span> outside <span class="token operator">=</span> <span class="token function">compare</span><span class="token punctuation">(</span>leftNode<span class="token punctuation">.</span>left<span class="token punctuation">,</span> rightNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 比较外侧</span>  <span class="token keyword">let</span> inside <span class="token operator">=</span> <span class="token function">compare</span><span class="token punctuation">(</span>leftNode<span class="token punctuation">.</span>right<span class="token punctuation">,</span> rightNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 比较内侧</span>  <span class="token keyword">return</span> outside <span class="token operator">&amp;&amp;</span> inside<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="admonition warning"><p class="admonition-title">注意</p><p>不要跟 <a href="#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F">二叉树的镜像</a></p></div><hr><h3 id="把二叉树打印成多行"><a href="#把二叉树打印成多行" class="headerlink" title="把二叉树打印成多行"></a><a href="#%E6%8A%8A%E4%BA%8C%E5%8F%89%E6%A0%91%E6%89%93%E5%8D%B0%E6%88%90%E5%A4%9A%E8%A1%8C">把二叉树打印成多行</a></h3><p><a href="https://www.nowcoder.com/practice/445c44d982d04483b04a54f298796288?tpId=13&amp;tqId=23453&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/">leetcode</a></p><p>【提示】层序遍历，但注意打印格式，每一层的节点值放在一个数组中，最终的结果是二维数组。</p><hr><h3 id="JZ37-序列化二叉树"><a href="#JZ37-序列化二叉树" class="headerlink" title="JZ37 序列化二叉树"></a><strong>JZ37</strong> <strong>序列化二叉树</strong></h3><p><a href="https://www.nowcoder.com/practice/cf7e25aa97c04cc1a68c8f040e71fb84?tpId=13&amp;tqId=23455&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/">leetcode</a></p><p>【提示】</p><ul><li><p>层序遍历（前中后序都可以，这三种解法还没看懂）</p></li><li><p>遍历用数组存放结果，反序列化时用<code>split(‘,’)</code>得到字符数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> parentNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// i相当于指针，每次都指向当前节点的左子节点或右子节点</span>  <span class="token comment">// i++没有放在for循环中，for循环体内有两次i++</span>  <span class="token comment">// 每次将非空的节点入队，循环一个节点队列</span>        <span class="token keyword">let</span> left <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!==</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            parentNode<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>parentNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            parentNode<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">let</span> right <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">!==</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            parentNode<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>parentNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            parentNode<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h3 id="JZ36-二叉搜索树与双向链表"><a href="#JZ36-二叉搜索树与双向链表" class="headerlink" title="JZ36 二叉搜索树与双向链表"></a><strong>JZ36</strong> <strong>二叉搜索树与双向链表</strong></h3><p><a href="https://www.nowcoder.com/practice/947f6eb80d944a84850b0538bf0ec3a5?tpId=13&amp;tqId=23253&amp;ru=/practice/947f6eb80d944a84850b0538bf0ec3a5&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/">leetcode</a></p><p>【提示】</p><ul><li><p>中序遍历位置使用pre和cur指针记录前一个访问的节点和当前访问的节点；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">BST2BDList</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      pre<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span> <span class="token comment">// 如果pre不为空，pre右指针指向下一个要访问的节点</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      head <span class="token operator">=</span> cur<span class="token punctuation">;</span> <span class="token comment">// 如果pre为空，head指向当前节点</span>    <span class="token punctuation">}</span>    cur<span class="token punctuation">.</span>left <span class="token operator">=</span> pre<span class="token punctuation">;</span> <span class="token comment">// 当前节点的左指针指向pre</span>        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span> <span class="token comment">// 更新pre</span>    <span class="token function">BST2BDList</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>画图更好理解</p></li></ul><hr><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="JZ25-合并两个排序的链表"><a href="#JZ25-合并两个排序的链表" class="headerlink" title="JZ25 合并两个排序的链表"></a>JZ25 合并两个排序的链表</h3><p><a href="https://www.nowcoder.com/practice/d8b6b4358f774294a89de2a6ac4d9337?tpId=13&amp;tqId=23267&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/solution/mian-shi-ti-25-he-bing-liang-ge-pai-xu-de-lian-b-2/">题解</a></p><p>【提示】</p><ul><li><p>双指针分别指向两个链表</p></li><li><p>创建一个dum伪头节点指向合并后的链表；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> l1 <span class="token operator">=</span> pHead1<span class="token punctuation">;</span> <span class="token comment">// 指向链表1的指针 </span><span class="token keyword">let</span> l2 <span class="token operator">=</span> pHead2<span class="token punctuation">;</span> <span class="token comment">// 指向链表2的指针 </span><span class="token keyword">let</span> dum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 合并后链表的伪头节点 </span><span class="token keyword">let</span> cur <span class="token operator">=</span> dum<span class="token punctuation">;</span> <span class="token comment">// 指向合并后链表的当前节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当l1或l2为空时退出循环</p></li><li><p>两个链表的长度都为n，所以退出循环后最多剩一个节点，把这个节点添加到cur后面</p></li></ul><hr><h3 id="JZ52-两个链表的第一个公共结点"><a href="#JZ52-两个链表的第一个公共结点" class="headerlink" title="JZ52 两个链表的第一个公共结点"></a><strong>JZ52</strong> <strong>两个链表的第一个公共结点</strong></h3><p><a href="https://www.nowcoder.com/practice/6ab1d9a29e88450685099d45c9e31e46?tpId=13&amp;tqId=23257&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p>leetcode</p><p>【提示】</p><ol><li><p>双指针指向两个链表；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> curA <span class="token operator">=</span> pHead1<span class="token punctuation">;</span><span class="token keyword">let</span> curB <span class="token operator">=</span> pHead2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>定义一个计算链表长度的函数；</p></li><li><p>始终让链表A是最长的链表；</p></li><li><p>对齐两个链表;</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 从尾部对齐两个链表 */</span>  <span class="token keyword">let</span> gap <span class="token operator">=</span> lenA <span class="token operator">-</span> lenB<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>gap<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    curA <span class="token operator">=</span> curA<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>curA和curB同时移动，找到公共节点就退出循环</p></li></ol><hr><h3 id="JZ23-链表中环的入口结点"><a href="#JZ23-链表中环的入口结点" class="headerlink" title="JZ23 链表中环的入口结点"></a><strong>JZ23</strong> <strong>链表中环的入口结点</strong></h3><p><a href="https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4?tpId=13&amp;tqId=23449&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/c32eOV/">leetcode</a></p><p><a href="https://leetcode.cn/problems/c32eOV/solution/jian-zhi-offer-ii-022-lian-biao-zhong-hu-8f1m/">题解</a></p><p>【提示】双指针，两次相遇，第二次相遇即环入口。</p><ul><li><p>fast和slow指针指向头节点，fast每次移动两步，slow指针移动一步；</p><ul><li>fast指针走到链表尾部==》没有环，返回null；</li><li>fast指针和slow指针第一次在环中相遇==》此时将fast指针重新指向头节点；</li></ul></li><li><p>fast指针和slow指针同时移动一步，第二次将在环入口相遇，返回fast指针；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> fast <span class="token operator">=</span> pHead<span class="token punctuation">;</span><span class="token keyword">let</span> slow <span class="token operator">=</span> pHead<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// fast走到了链表的末端，说明无环</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> fast<span class="token punctuation">.</span>next <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">// fast指针每次向前走两步</span>  slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">// slow指针每次向前走一步</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">===</span> slow<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// fast和slow第一次在环中相遇</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>fast <span class="token operator">=</span> pHead<span class="token punctuation">;</span> <span class="token comment">// fast指针指向头节点</span><span class="token comment">// fast和slow同时每次移动一步，第二次将在环入口相遇</span><span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!==</span> slow<span class="token punctuation">)</span> <span class="token punctuation">{</span>  fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> fast<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr></li></ul><h3 id="JZ18-删除链表的节点"><a href="#JZ18-删除链表的节点" class="headerlink" title="JZ18 删除链表的节点"></a><strong>JZ18</strong> <strong>删除链表的节点</strong></h3><p><a href="https://www.nowcoder.com/practice/f9f78ca89ad643c99701a7142bd59f5d?tpId=13&amp;tqId=2273171&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p>【提示】虚拟头节点+双指针</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 虚拟头节点+双指针</span><span class="token keyword">let</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token keyword">let</span> pre <span class="token operator">=</span> dummy<span class="token punctuation">;</span><span class="token keyword">let</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>循环找到要删除的节点，然后pre.next=cur.next，返回dummy.next。</p><hr><h3 id="JZ76-删除链表中重复的结点"><a href="#JZ76-删除链表中重复的结点" class="headerlink" title="JZ76 删除链表中重复的结点"></a><strong>JZ76</strong> <strong>删除链表中重复的结点</strong></h3><p><a href="https://www.nowcoder.com/practice/fc533c45b73a41b0b44ccba763f866ef?tpId=13&amp;tqId=23450&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list/">leetcode</a></p><p><a href="https://blog.nowcoder.net/n/70a35462c5ba412e9a9f9fc70a875dd4">题解</a></p><p>【提示】虚拟头节点指向pHead，cur指针指向虚拟头节点，需要循环删除重复的节点。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">===</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> temp <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">;</span>  <span class="token comment">// 循环删除重复的连续节点</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">===</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">// 关键的地方</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">// 移动cur指针指向下一个节点</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ35-复杂链表的复制"><a href="#JZ35-复杂链表的复制" class="headerlink" title="JZ35 复杂链表的复制"></a><strong>JZ35</strong> <strong>复杂链表的复制</strong></h3><p><a href="https://www.nowcoder.com/practice/f836b2c43afc4b35ad6adc41ec941dba?tpId=13&amp;tqId=23254&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/fu-za-lian-biao-de-fu-zhi-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/fu-za-lian-biao-de-fu-zhi-lcof/solution/jian-zhi-offer-35-fu-za-lian-biao-de-fu-zhi-ha-xi-/">题解</a></p><p>【提示】两种解法：Hash表（更直观，更好理解）和拼接+拆分（降低空间复杂度）</p><p>（1）遍历链表，Hash表建立原链表节点与新链表节点的映射；</p><p>（2）遍历链表，建立新链表节点next指针指向和random指针指向；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token parameter">pHead</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// write code here</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pHead<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">const</span> dic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hash表</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> pHead<span class="token punctuation">;</span> <span class="token comment">// 之前原链表的指针</span>    <span class="token comment">// 1. 构建原链表与新链表的节点映射关系</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dic<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RandomListNode</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment">// 2. cur重新指向原链表的头节点</span>  cur <span class="token operator">=</span> pHead<span class="token punctuation">;</span>    <span class="token comment">// 3. 构建新链表的next指针指向和random指针指向</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> node <span class="token operator">=</span> dic<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token punctuation">.</span>next <span class="token operator">=</span> dic<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token punctuation">.</span>random <span class="token operator">=</span> dic<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span>    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> dic<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h2><h3 id="JZ9-用两个栈实现队列"><a href="#JZ9-用两个栈实现队列" class="headerlink" title="JZ9 用两个栈实现队列"></a>JZ9 用两个栈实现队列</h3><p><a href="https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&amp;tqId=23281&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p>leetcode</p><p>【提示】</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> stackA <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 存储数据</span><span class="token keyword">let</span> stackB <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 删除时中转数据（暂存）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="JZ31-栈的压入、弹出序列"><a href="#JZ31-栈的压入、弹出序列" class="headerlink" title="JZ31 栈的压入、弹出序列"></a><strong>JZ31</strong> <strong>栈的压入、弹出序列</strong></h3><p><a href="https://www.nowcoder.com/practice/d77d11405cc7470d82554cb392585106?tpId=13&amp;tqId=23290&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/solution/mian-shi-ti-31-zhan-de-ya-ru-dan-chu-xu-lie-mo-n-2/">题解</a></p><p>【提示】循环入栈序列，用一个辅助栈 stack 模拟入栈情况，stack 入栈栈顶元素与出栈序列的当前指针指向的元素比较，如果相同，则stack 栈顶元素出栈，继续比较；全部比较完后，stack 为空说明出栈序列顺序正确，否则就是错误的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">IsPopOrder</span><span class="token punctuation">(</span><span class="token parameter">pushV<span class="token punctuation">,</span> popV</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 辅助栈，模拟压栈顺序</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 指向出栈序列的指针</span>  <span class="token comment">// write code here</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> num <span class="token keyword">of</span> pushV<span class="token punctuation">)</span> <span class="token punctuation">{</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// num入栈</span>    <span class="token comment">// stack的栈顶元素等于cur指向的出栈序列的元素</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> popV<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// stack栈顶元素出栈</span>      cur<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 指针向后移动 </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// stack为空说明出栈序列正确</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ30-包含min函数的栈"><a href="#JZ30-包含min函数的栈" class="headerlink" title="JZ30 包含min函数的栈"></a><strong>JZ30</strong> <strong>包含min函数的栈</strong></h3><p><a href="https://www.nowcoder.com/practice/4c776177d2c04c2494f2555c9fcc1e49?tpId=13&amp;tqId=23268&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/solution/mian-shi-ti-30-bao-han-minhan-shu-de-zhan-fu-zhu-z/">题解</a></p><p>【提示】使用一个<strong>单调栈</strong>-辅助栈 stackMin，辅助栈栈顶始终保存压入 stack 中的最小元素。</p><ul><li>注意 push 时，如果入栈元素小于和等于 stackMin 栈顶元素都要入 stackMin，不然可能在执行 pop 操作后，stackMin 为空了。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// write code here</span>  <span class="token comment">// 元素入栈时，1.stackMin为空，元素入栈；2.元素小于等于stackMin栈顶元素，入栈，否则不入栈</span>  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>stackMin<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> node <span class="token operator">&lt;=</span> stackMin<span class="token punctuation">[</span>stackMin<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    stackMin<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JZ59-滑动窗口的最大值"><a href="#JZ59-滑动窗口的最大值" class="headerlink" title="JZ59 滑动窗口的最大值"></a><strong>JZ59</strong> <strong>滑动窗口的最大值</strong></h3><p><a href="https://www.nowcoder.com/practice/1624bc35a45c42c0bc17d17fa0cba788?tpId=13&amp;tqId=23458&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">leetcode</a></p><p><strong>题解：</strong></p><ul><li><a href="https://leetcode.cn/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/solution/mian-shi-ti-59-i-hua-dong-chuang-kou-de-zui-da-1-6/">https://leetcode.cn/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/solution/mian-shi-ti-59-i-hua-dong-chuang-kou-de-zui-da-1-6/</a></li><li><a href="https://leetcode.cn/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/solution/dan-diao-dui-lie-si-lu-zhi-you-3ju-hua-d-djj9/">https://leetcode.cn/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/solution/dan-diao-dui-lie-si-lu-zhi-you-3ju-hua-d-djj9/</a></li></ul><p>【提示】暴力法，一共有 <code>n - size + 1</code> 个窗口，每个窗口遍历的时间复杂度为 $O(k)$，总的时间复杂度为$O((n-size+1)size)\approx O(n\cdot size)$。<code>size</code> 是窗口大小。关键点在如何将获取窗口最大值的时间复杂度从 $O(n \cdot size)$ 降为 $O(1)$。本题使用双端队列 <code>deque</code>，维护一个非严格单调递减的序列，队头是窗口内的最大值。窗口每次移动，窗口内会新增加一个元素并删除一个元素，<code>deque</code>  在每次窗口移动时检查窗口删掉的元素是不是等于队首元素，相等则删掉队首元素（因为这是上一个窗口内的最大值）；同时 <code>deque</code> 检查队尾和之前的所有小于新增加的元素的元素，全部都删掉，然后将新增的元素添加到队尾，保持队列的非严格递减。</p><ul><li>初始时，窗口左右指针的位置：left = 1 - size, right = 0</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**  * 定义一个双端队列 */</span><span class="token keyword">const</span> <span class="token function-variable function">Deque</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 判断队列是否为空 */</span><span class="token class-name">Deque</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">isEmpty</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment">/* 获取队头元素 */</span><span class="token class-name">Deque</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">peekFirst</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/* 获取队尾元素 */</span><span class="token class-name">Deque</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">peekLast</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/* 往队尾添加元素 */</span><span class="token class-name">Deque</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">addLast</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 删除队头元素 */</span><span class="token class-name">Deque</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">removeFirst</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/* 删除队列最后一个元素 */</span><span class="token class-name">Deque</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">removeLast</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">maxInWindows</span><span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> size</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// write code here</span>  <span class="token keyword">let</span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Deque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个双端队列，队首存储当前窗口内的最大值，整体保持非严格递减（单调队列）</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 左右指针分别指向窗口的两端</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> size<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> right <span class="token operator">&lt;</span> num<span class="token punctuation">.</span>length<span class="token punctuation">;</span> left<span class="token operator">++</span><span class="token punctuation">,</span> right<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 窗口移动前的窗口内最大值刚好在最左边 num[left - 1]，移动窗口后在双端队列 window 内将这个最大值删掉</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> num<span class="token punctuation">[</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      window<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment">// 删除双端队列中比新加入元素 num[j] 小的元素，保持非严格递减，队首是窗口内的最大值</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> num<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      window<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    window<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将num[j]添加到窗口内</span>        <span class="token comment">// 形成窗口后记录窗口内的最大值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      res<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><h3 id="JZ12-矩阵中的路径"><a href="#JZ12-矩阵中的路径" class="headerlink" title="JZ12 矩阵中的路径"></a><strong>JZ12</strong> <strong>矩阵中的路径</strong></h3><p><a href="https://www.nowcoder.com/practice/2a49359695a544b8939c77358d29b7e6?tpId=13&amp;tqId=1517966&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/ju-zhen-zhong-de-lu-jing-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/ju-zhen-zhong-de-lu-jing-lcof/solution/mian-shi-ti-12-ju-zhen-zhong-de-lu-jing-shen-du-yo/">题解</a></p><p>【提示】矩阵的暴力搜索</p><ul><li><p>递归退出条件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 索引越界或对应位置的字符不同或已经访问过矩阵中i, j位置的字符</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> matrix<span class="token punctuation">.</span>length <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&gt;=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">||</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!==</span> words<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">===</span> words<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>回溯</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span> <span class="token comment">// 已经访问过的字符设为''</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> words<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> words<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span>             <span class="token function">dfs</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> words<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> words<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> words<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 回溯到这个位置时还原字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h3 id="JZ13-机器人的运动范围"><a href="#JZ13-机器人的运动范围" class="headerlink" title="JZ13 机器人的运动范围"></a><strong>JZ13</strong> <strong>机器人的运动范围</strong></h3><p><a href="https://www.nowcoder.com/practice/6e5207314b5241fb83f2329e89fdecc8?tpId=13&amp;tqId=23460&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/mian-shi-ti-13-ji-qi-ren-de-yun-dong-fan-wei-dfs-b/">题解</a></p><p>【提示】</p><ul><li><p>深度优先搜索DFS，从一个点往左往下递归搜索；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> si<span class="token punctuation">,</span> sjLeft<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 往左移动-递归</span><span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> siBottom<span class="token punctuation">,</span> sj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 往下移动-递归</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> left <span class="token operator">+</span> right<span class="token punctuation">;</span> <span class="token comment">// 每成功移动一格+1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>退出条件</p><p>（1）索引值i, j越界；</p><p>（2）横纵坐标的数位和大于threshold；</p><p>（3）已经访问了索引处的格子（可行性剪枝）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 退出条件</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> rows <span class="token operator">||</span> j <span class="token operator">&gt;=</span> cols <span class="token operator">||</span> si <span class="token operator">+</span> sj <span class="token operator">&gt;</span> threshold <span class="token operator">||</span> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数位的计算（用不到）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum <span class="token operator">+=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>用到数位和的更新公式</p><p><strong>数位和增量公式：</strong> 设 $x$ 的数位和为$s_x$ ，$x+1$ 的数位和为$S_{x+1}$；</p><ol><li>当 $(x + 1) \odot 10 = 0(x+1)⊙10=0$ 时： $s_{x+1} = s_x - 8$，例如 19, 20的数位和分别为 10, 2 ；</li><li>当 $(x + 1) \odot 10 = 0(x+1)⊙10\ne0$ 时： $s_{x+1} = s_x+1$，例如 1, 2的数位和分别为 1, 2 ；</li></ol></li></ul><hr><h3 id="JZ38-字符串的排列"><a href="#JZ38-字符串的排列" class="headerlink" title="JZ38 字符串的排列"></a><strong>JZ38</strong> <strong>字符串的排列</strong></h3><p><a href="https://www.nowcoder.com/practice/fe6b651b66ae47d7acce78ffdd9a96c7?tpId=13&amp;tqId=23291&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/zi-fu-chuan-de-pai-lie-lcof/">leetcode</a></p><p>【提示】全排列+树层去重</p><ul><li>全排列—used[i]</li><li>树层去重—（i &gt; 0 &amp;&amp; str.charAt(i - 1) === str.charAt(i) &amp;&amp; !used[i - 1]）</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 全排列+树层去重</span><span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>used<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">continue</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="JZ42-连续子数组的最大和"><a href="#JZ42-连续子数组的最大和" class="headerlink" title="JZ42 连续子数组的最大和"></a><strong>JZ42</strong> <strong>连续子数组的最大和</strong></h3><p><a href="https://www.nowcoder.com/practice/459bd355da1549fa8a49e350bf3df484?tpId=13&amp;tqId=23259&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/solution/mian-shi-ti-42-lian-xu-zi-shu-zu-de-zui-da-he-do-2/">题解</a></p><p>【提示】</p><p>三种解法：</p><ol><li>暴力解法（两个for循环）<ul><li>时间复杂度$O(N^2)$，空间复杂度$O(1)$；</li></ul></li><li>贪心解法<ul><li>时间复杂度$O(N)$，空间复杂度$O(1)$；</li></ul></li><li>动态规划<ul><li>不复用array数组，时间复杂度$O(N)$，空间复杂度$O(N)$；</li><li>复用array数组，时间复杂度$O(N)$，空间复杂度$O(1)$；</li></ul></li></ol><p><strong>1. 暴力解法</strong></p><p>以每一个数为子数组起点，搜索最大子数组数值和</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum <span class="token operator">+=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    maxSum <span class="token operator">=</span> sum <span class="token operator">&gt;</span> maxSum <span class="token operator">?</span> sum <span class="token operator">:</span> maxSum<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 贪心解法</strong></p><p>局部保持每次sum加上array[i]&gt;0，则sum是最优的。如果sum加上array[i]后sum&lt;0，说明array[i]对最大和没有用，sum重置为0，从array[i+1]重新累加。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  sum <span class="token operator">+=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> maxSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    maxSum <span class="token operator">=</span> sum<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. 动态规划</strong></p><ol><li><strong>dp数组：</strong>dp[i]: 以array[i]结尾的子数组的最大和；</li><li><strong>递推公式：</strong>分两种情况：<ul><li>dp[i - 1] &lt; 0时，dp[i] = array[i]; （dp[i - 1]对dp[i]产生负贡献）</li><li>dp[i - 1]&gt;=0时，dp[i] = array[i] + dp[i - 1];</li></ul></li><li><strong>dp数组初始化：</strong>dp[0]=array[0];</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 复用array数组作为dp数组</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递推</span>  maxSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> maxSum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断最大值</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ85-连续子数组的最大和-二"><a href="#JZ85-连续子数组的最大和-二" class="headerlink" title="JZ85 连续子数组的最大和(二)"></a><strong>JZ85</strong> <strong>连续子数组的最大和(二)</strong></h3><p><a href="https://www.nowcoder.com/practice/11662ff51a714bbd8de809a89c481e21?tpId=13&amp;tqId=2282583&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p>leetcode</p><p><a href="https://www.nowcoder.com/practice/11662ff51a714bbd8de809a89c481e21?tpId=13&amp;tqId=2282583&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">题解</a></p><blockquote><p>相比上一个题，这个题需要求最大子数组和的最长长度。</p></blockquote><p>【提示】动态规划（空间复杂度可以优化）</p><ol><li><p>用两个指针分别指向子数组区间的start和end，再用两个指针指向最大子数组和时的子数组区间</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">let</span> resL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> resR <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>dp数组含义：</strong>dp[i]: 以array[i]结尾的子数组的最大和；</p></li><li><p><strong>递推公式：</strong>dp[i] = Math.max(dp[i-1] + array[i], array[i])；</p></li><li><p><strong>dp数组初始化：</strong>dp[0] = array[0]；</p></li><li><p>什么时候更新子数组区间的起点指针</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  left <span class="token operator">=</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>什么时候更新最大值和最大值子数组区间索引</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> maxSum<span class="token punctuation">)</span> <span class="token operator">||</span>     <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> maxSum <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span>resR <span class="token operator">-</span> resL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  maxSum <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  resR <span class="token operator">=</span> right<span class="token punctuation">;</span>  resL <span class="token operator">=</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>怎样优化？</p><ul><li>没有优化时，定义一个dp数组，此时的空间复杂度为$O(N)$；</li><li>从递推公式看出，dp[i]只跟dp[i-1]有关，因此用两个变量x, y分别表示dp[i-1]和dp[i]，此时的空间复杂度为$O(1)$；</li><li>时间复杂度都为$O(N)$；</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>x <span class="token operator">+</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新当前状态</span><span class="token operator">...</span><span class="token comment">// 更新上一个状态</span>x <span class="token operator">=</span> y<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JZ69-跳台阶"><a href="#JZ69-跳台阶" class="headerlink" title="JZ69 跳台阶"></a><strong>JZ69</strong> <strong>跳台阶</strong></h3><p><a href="https://www.nowcoder.com/practice/8c82a5b80378478f9484d87d1c5f12a4?tpId=13&amp;tqId=23261&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p>leetcode</p><p>【提示】dp数组初始化时，dp[0]=dp[1]=1</p><hr><h3 id="JZ71-跳台阶扩展问题"><a href="#JZ71-跳台阶扩展问题" class="headerlink" title="JZ71 跳台阶扩展问题"></a><strong>JZ71</strong> <strong>跳台阶扩展问题</strong></h3><p><a href="https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&amp;tqId=23262&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&amp;tqId=23262&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">题解</a></p><p>【提示】分析递推公式，$dp(n)=dp(n−1)+dp(n−2)+…+dp(n−(n−1))+dp(n−n)=dp(0)+dp(1)+dp(2)+…+dp(n−1)$，因为$dp(n−1) = dp(n−2)+dp(n−3)+…+dp(1)+dp(0)$，经整理得$dp(n)=dp(n−1)+dp(n−1)=2∗dp(n−1)$</p><hr><h3 id="JZ63-买卖股票的最好时机-一"><a href="#JZ63-买卖股票的最好时机-一" class="headerlink" title="JZ63 买卖股票的最好时机(一)"></a><strong>JZ63</strong> <strong>买卖股票的最好时机(一)</strong></h3><p><a href="https://www.nowcoder.com/practice/64b4262d4e6d4f6181cd45446a5821ec?tpId=13&amp;tqId=625&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">leetcode</a></p><p><a href="https://www.programmercarl.com/0121.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA.html#_121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA">题解</a></p><p>【提示】只能买卖一次，两种解法：贪心和动态规划。</p></li></ol><ul><li><p>贪心：直接找差值最大的区间；时间复杂度：$O(N)$，空间复杂度$O(1)$；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> low <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">;</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  low <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> low<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>动态规划：时间复杂度：$O(N)$，空间复杂度$O(N)$；</p><ul><li><strong>dp数组的含义：</strong><code>dp[i][0]</code>: 第i天持有股票时的最大收益，<code>dp[i][1]</code>: 第i天不持有股票时的最大收益；</li><li>持有股票：买入股票或者前一天已经买入保持前一天的状态；不持有股票：卖出股票或保持前一天已经卖出的状态；</li><li><strong>递推公式：</strong>$dp[i][0] = max(dp[i - 1][0], -prices[i])$，$dp[i][1] = max(dp[i - 1][1], prices[i]+dp[i-1][0])$;</li><li><strong>初始化：</strong>$dp[0][0]=-prices[0]$，$dp[0][1]=0$；</li><li><strong>遍历顺序：</strong>从前往后遍历；</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ47-礼物的最大价值"><a href="#JZ47-礼物的最大价值" class="headerlink" title="JZ47 礼物的最大价值"></a>JZ47 <strong>礼物的最大价值</strong></h3><p><a href="https://www.nowcoder.com/practice/2237b401eb9347d282310fc1c3adb134?tpId=13&amp;tqId=2276652&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/li-wu-de-zui-da-jie-zhi-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/li-wu-de-zui-da-jie-zhi-lcof/solution/mian-shi-ti-47-li-wu-de-zui-da-jie-zhi-dong-tai-gu/">题解</a></p><p>【提示】</p></li><li><p><strong>dp数组的含义：</strong><code>dp[i][j]</code>表示在棋盘的i, j位置拿到礼物的最大价值；</p></li><li><p><strong>递推公式：</strong></p><p>$d p(i, j)=\left{\begin{array}{ll}<br>\operatorname{grid}(i, j) &amp; , i=0, j=0 \<br>\operatorname{grid}(i, j)+d p(i, j-1) &amp; , i=0, j \neq 0 \<br>\operatorname{grid}(i, j)+d p(i-1, j) &amp; , i \neq 0, j=0 \<br>\operatorname{grid}(i, j)+\max [d p(i-1, j), d p(i, j-1)] &amp; , i \neq 0, j \neq 0<br>\end{array}\right.$</p></li><li><p><strong>初始化：</strong><code>dp[0][0]=grid[0][0]</code>；</p></li><li><p><code>dp[i][j]</code>的状态依赖于<code>dp[i-1][j]</code>和<code>dp[i][j-1]</code>；</p></li><li><p>未优化时，时间复杂度为$O(MN)$，空间复杂度为$O(MN)$；优化后，时间复杂度为$O(MN)$，空间复杂度为$O(1)$；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 利用原数组优化空间复杂度</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ48-最长不含重复字符的子字符串"><a href="#JZ48-最长不含重复字符的子字符串" class="headerlink" title="JZ48 最长不含重复字符的子字符串"></a><strong>JZ48</strong> <strong>最长不含重复字符的子字符串</strong></h3><p><a href="https://www.nowcoder.com/practice/48d2ff79b8564c40a50fa79f9d5fa9c7?tpId=13&amp;tqId=2276769&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof/solution/mian-shi-ti-48-zui-chang-bu-han-zhong-fu-zi-fu-d-9/">题解</a></p><p>【提示】方法大体两种：动态规划或双指针+Hash表（动态规划没懂）</p></li><li><p>双指针：left和right</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// left每次指向s[right]的位置</span><span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 定义左右指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>找到相同字符时，更新left为重复字符的索引；</p></li><li><p>子串长度=right-left；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span>right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> right<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> char <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>charMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    left <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> charMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新左指针</span>  <span class="token punctuation">}</span>  charMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录字符</span>  maxLen <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLen<span class="token punctuation">,</span> right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新子字符串的最大长度</span><span class="token punctuation">}</span><span class="token keyword">return</span> maxLen<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ46-把数字翻译成字符串"><a href="#JZ46-把数字翻译成字符串" class="headerlink" title="JZ46 把数字翻译成字符串"></a><strong>JZ46</strong> <strong>把数字翻译成字符串</strong></h3><p><a href="https://www.nowcoder.com/practice/046a55e6cd274cffb88fc32dba695668?tpId=13&amp;tqId=1024831&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/">leetcode</a></p><p>题目有差异。</p><p><a href="https://blog.nowcoder.net/n/f63df8c29d654958b52cb85878f08330">题解</a></p><p>【提示】牛客上的题目是数字1<del>26对应字母a-z，leetcode上是`0</del>25`对应a-z。</p></li></ul><p>设$nums=x_{1}x_{2}x_{3}\cdots x_{i-1}x_{i}$</p><p><strong>牛客</strong></p><ul><li><p><strong>dp数组含义：</strong>dp[i]表示以$x_i$结尾的数字的翻译方案数量；</p></li><li><p><strong>递推公式：</strong></p><p>（1）$x_i$可以单独翻译成字母==》dp[i] = dp[i - 1];</p><p>（2）$x_{i-1}x_{i}$可以一起翻译成字母，如果i=1, dp[i] = dp[i - 1] + 1；如果i &gt; 1, dp[i] = dp[i - 1] + dp[i - 2];</p></li><li><p><strong>初始化：</strong>dp[0] = 1;</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 当前数字翻译成字母</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 当前数字和前一个数字，两个一起翻译成字母</span>  <span class="token keyword">let</span> num <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> nums<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  num <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;=</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;=</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>leetcode</strong></p><hr><h3 id="JZ70-矩形覆盖"><a href="#JZ70-矩形覆盖" class="headerlink" title="JZ70 矩形覆盖"></a><strong>JZ70</strong> <strong>矩形覆盖</strong></h3><p><a href="https://www.nowcoder.com/practice/72a5a919508a4251859fb2cfb987a0e6?tpId=13&amp;tqId=23283&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://blog.nowcoder.net/n/cd6309f586174fda98f8c9bdf2e2df07">题解</a></p><p>【提示】先具体写几个情况观察规律，归纳总结，最后得到递推公式为dp[i] = dp[i - 1] + dp[i - 2];</p><ul><li><strong>dp数组含义：</strong>用2*1的矩形覆盖宽度为2*i的矩形一共有dp[i]中方法；</li><li><strong>递推公式：</strong>dp[i] = dp[i - 1] + dp[i - 2]；</li><li><strong>初始化：</strong>dp[0] = 0, dp[1] = 1, dp[2] = 2；</li><li>跟斐波那契数列的规律一样。</li></ul><hr><h3 id="JZ19-正则表达式匹配（还没搞懂）"><a href="#JZ19-正则表达式匹配（还没搞懂）" class="headerlink" title="JZ19 正则表达式匹配（还没搞懂）"></a><strong>JZ19</strong> <strong>正则表达式匹配</strong>（还没搞懂）</h3><p><a href="https://www.nowcoder.com/practice/28970c15befb4ff3a264189087b99ad4?tpId=13&amp;tqId=1375406&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p>leetcode</p><p>题解</p><p>【提示】</p><hr><h2 id="搜索算法"><a href="#搜索算法" class="headerlink" title="搜索算法"></a>搜索算法</h2><h3 id="JZ3-数组中重复的数字"><a href="#JZ3-数组中重复的数字" class="headerlink" title="JZ3 数组中重复的数字"></a><strong>JZ3</strong> <strong>数组中重复的数字</strong></h3><p><a href="https://www.nowcoder.com/practice/6fe361ede7e54db1b84adc81d09d8524?tpId=13&amp;tqId=1375279&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p>【提示】两种解法</p><ol><li>利用集合set的不重复特性；</li><li>先将原数组排序，然后遍历数组</li></ol><hr><h3 id="JZ51-数组中的逆序对"><a href="#JZ51-数组中的逆序对" class="headerlink" title="JZ51 数组中的逆序对"></a><strong>JZ51</strong> <strong>数组中的逆序对</strong></h3><p><a href="https://www.nowcoder.com/practice/96bd6684e04a44eb80e6a68efc0ec6c5?tpId=13&amp;tqId=23260&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/solution/jian-zhi-offer-51-shu-zu-zhong-de-ni-xu-pvn2h/">题解</a></p><p>【提示】在并排序的过程中统计逆序对（==归并排序不熟悉==）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">InversePairs</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// write code here</span>  <span class="token comment">/* 归并排序(递归)时统计逆序对 */</span>  <span class="token keyword">const</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// tmp数组存储原始的data数组</span>    <span class="token keyword">const</span> <span class="token function-variable function">mergeSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 终止条件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 递归划分</span>    <span class="token keyword">let</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组的中间位置-二分</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> middle<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 合并阶段</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// i指针指向做左数组起点，j指针指向右数组起点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> left<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 复制data的数据到tmp数组</span>      tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> left<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历整个数组</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 左子数组已经合并完毕 </span>        data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">===</span> right <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">||</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 右子数组已经合并完毕或者左子数组当前元素小于右子数组当前元素</span>        data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 左子数组当前元素大于右子数组当前元素，则左子数组当前元素所在位置i和后面的元素(middle-i+1)与右子数组当前元素都构成逆序对</span>        data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        res <span class="token operator">+=</span> middle <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ4-二维数组中的查找"><a href="#JZ4-二维数组中的查找" class="headerlink" title="JZ4 二维数组中的查找"></a><strong>JZ4</strong> <strong>二维数组中的查找</strong></h3><p><a href="https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&amp;tqId=23256&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/solution/mian-shi-ti-04-er-wei-shu-zu-zhong-de-cha-zhao-zuo/">题解</a></p><p>【提示】题目要求的时间复杂度为$O(M+N)$，暴力搜索的时间复杂度为$O(M\cdot N)$。利用给定矩阵的行列元素递增的性质，不断缩小搜索范围。</p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220621144525.png" alt="Picture1.png" style="zoom:67%;"><p>以左下角元素<code>array[i][j]</code>为搜索的起点（i，j是指向该元素的指针），然后判断target与<code>array[i][j]</code>的大小。</p><ul><li><p>初始时，<code>i=row-1, j=0</code>；</p></li><li><p><code>target &gt; array[i][j]</code>，则<code>j++</code>；</p></li><li><p><code>target &lt; array[i][j]</code>，则<code>i--</code>；</p></li><li><p>当指针i，j的索引越界时，说明矩阵中不存在target。</p></li></ul><hr><h3 id="JZ11-旋转数组的最小数字"><a href="#JZ11-旋转数组的最小数字" class="headerlink" title="JZ11 旋转数组的最小数字"></a><strong>JZ11</strong> <strong>旋转数组的最小数字</strong></h3><p><a href="https://www.nowcoder.com/practice/9f3231a991af4f55b95579b44b7a01ba?tpId=13&amp;tqId=23269&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/solution/mian-shi-ti-11-xuan-zhuan-shu-zu-de-zui-xiao-shu-3/">题解</a></p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220621193915.png" alt="Picture1.png" style="zoom:67%;"><p>【提示】旋转数组numbers是将一个升序排列的数组，在某个元素处将这个元素之前的序列旋转到数组的末尾。如果把旋转数组分为两部分：左排序数组和右排序数组，则有左排序数组的任意元素大于等于右排序数组的任意元素。求旋转数组的最小值等价于求右排序数组的第一个元素。</p><ul><li><p>定义左右指针left和right，分别指向旋转数组的左右两端；</p></li><li><p>循环二分： 设$ m = (i + j) / 2m=(i+j)/2 $为每次二分的中点（ “/“ 代表向下取整除法，因此恒有$ i \leq m &lt; j $），可分为以下三种情况：</p><ol><li>当 $nums[m] &gt; nums[j]$ 时： m 一定在 左排序数组 中，即旋转点 x 一定在$ [m + 1, j]$闭区间内，因此执行 $i = m + 1$；</li><li>当 $nums[m] &lt; nums[j]$ 时： m 一定在 右排序数组 中，即旋转点 x 一定在$[i, m]$闭区间内，因此执行 j = m；</li><li>当 $nums[m] = nums[j]$ 时： 无法判断 m 在哪个排序数组中，即无法判断旋转点 x 在$ [i, m] $还是$ [m + 1, j] $区间中。解决方案： 执行$ j = j - 1$缩小判断范围。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">minNumberInRotateArray</span><span class="token punctuation">(</span><span class="token parameter">rotateArray</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// write code here</span>  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> rotateArray<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 左右指针</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">!==</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rotateArray<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> rotateArray<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rotateArray<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rotateArray<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      right <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> rotateArray<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ44-数字序列中某一位的数字"><a href="#JZ44-数字序列中某一位的数字" class="headerlink" title="JZ44 数字序列中某一位的数字"></a><strong>JZ44</strong> <strong>数字序列中某一位的数字</strong></h3><p><a href="https://www.nowcoder.com/practice/29311ff7404d44e0b07077f4201418f5?tpId=13&amp;tqId=2285751&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/shu-zi-xu-lie-zhong-mou-yi-wei-de-shu-zi-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/shu-zi-xu-lie-zhong-mou-yi-wei-de-shu-zi-lcof/solution/mian-shi-ti-44-shu-zi-xu-lie-zhong-mou-yi-wei-de-6/">题解</a></p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220623151813.png" alt="Picture1.png" style="zoom:67%;"><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220623151952.png" alt="Picture2.png" style="zoom: 33%;"><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220623152017.png" alt="Picture3.png" style="zoom:33%;"><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220623152030.png" alt="Picture4.png" style="zoom:33%;"><p>时间复杂度：$O(logn)$，空间复杂度：$O(logn)$；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findNthDigit</span><span class="token punctuation">(</span> <span class="token parameter">n</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// write code here</span>  <span class="token keyword">let</span> digit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 数字n对应的数字的位数</span>  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 数字n对应的数字的起始值（如，n=23，则start=10）</span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token comment">// digit位数的范围内一共有多少个数</span>    <span class="token comment">// 找到n对应的以上三个数据</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    n <span class="token operator">-=</span> count<span class="token punctuation">;</span>    digit <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    start <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>    count <span class="token operator">=</span> digit <span class="token operator">*</span> start <span class="token operator">*</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> num <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> digit<span class="token punctuation">;</span> <span class="token comment">// 确定n对应的数</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> digit<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span> <span class="token comment">// 确定n对应的是序列中的哪个数字</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="JZ53-数字在升序数组中出现的次数"><a href="#JZ53-数字在升序数组中出现的次数" class="headerlink" title="JZ53 数字在升序数组中出现的次数"></a><strong>JZ53</strong> <strong>数字在升序数组中出现的次数</strong></h3><p><a href="https://www.nowcoder.com/practice/70610bf967994b22bb1c26f9ae901fa2?tpId=13&amp;tqId=23274&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/">leetcode</a></p><p><a href="https://blog.nowcoder.net/n/8b9dfb48adea4a5ab459bf72efdf8921">题解</a></p><p><a href="https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/solution/mian-shi-ti-53-i-zai-pai-xu-shu-zu-zhong-cha-zha-5/">https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/solution/mian-shi-ti-53-i-zai-pai-xu-shu-zu-zhong-cha-zha-5/</a></p><p>【提示】</p><ul><li>因为data是一个非降序数组，它是有序的，这种时候我们可能会想到用二分查找。但是一个数组可能有多个k，而且我们要查找的并非常规二分法中k出现的位置，而是k出现的左界和k出现的右界。要是能刚好找到恰好小于k的数字位置和恰好大于k的数字的位置就好了。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 查找k出现区间的左边界 */</span>  <span class="token keyword">const</span> <span class="token function-variable function">biSearch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&gt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        right <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> left<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>再有因为数组中全是整数，因此我们可以考虑，用二分查找找到k+0.5k+0.5<em>k</em>+0.5应该出现的位置和k−0.5k-0.5<em>k</em>−0.5应该出现的位置，二者相减就是k出现的次数。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 分两次查找，(k+0.5)和(k-0.5)的左边界之间的数就是k出现的次数</span><span class="token keyword">return</span> <span class="token function">biSearch</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">biSearch</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="JZ65-不用加减乘除做加法"><a href="#JZ65-不用加减乘除做加法" class="headerlink" title="JZ65 不用加减乘除做加法"></a><strong>JZ65</strong> <strong>不用加减乘除做加法</strong></h3><p><a href="https://www.nowcoder.com/practice/59ac416b4b944300b617d4f7f111b215?tpId=13&amp;tqId=23249&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/add-without-plus-lcci/">leetcode</a></p><p><a href="https://leetcode.cn/problems/add-without-plus-lcci/solution/java-wei-yun-suan-chao-100si-lu-qing-xi-g1h59/">题解</a></p><p>【提示】：</p><p>（1）使用位运算，先是通过异或得到在不进位的情况下的结果；</p><p>（2）通过与运算得到只进位的结果；</p><p>（3）重复（1）和（2），直到只进位的结果为0，即此时不需要进位，得到的是最终结果；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 递归 */</span><span class="token keyword">function</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">// write code here</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>num2 <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num1<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">Add</span><span class="token punctuation">(</span>num1 <span class="token operator">^</span> num2<span class="token punctuation">,</span> <span class="token punctuation">(</span>num1 <span class="token operator">&amp;</span> num2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ15-二进制中1的个数"><a href="#JZ15-二进制中1的个数" class="headerlink" title="JZ15 二进制中1的个数"></a><strong>JZ15</strong> <strong>二进制中1的个数</strong></h3><p><a href="https://www.nowcoder.com/practice/8ee967e43c2c4ec193b040ea7fbb10b8?tpId=13&amp;tqId=23273&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a>（所有数）</p><p><a href="https://leetcode.cn/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/solution/mian-shi-ti-15-er-jin-zhi-zhong-1de-ge-shu-wei-yun/">leetcode</a>（无符号整数）</p><p>题解：</p><ul><li><a href="https://leetcode.cn/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/solution/mian-shi-ti-15-er-jin-zhi-zhong-1de-ge-shu-wei-yun/">https://leetcode.cn/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/solution/mian-shi-ti-15-er-jin-zhi-zhong-1de-ge-shu-wei-yun/</a></li><li><a href="https://blog.nowcoder.net/n/82793d9724ff4f07bb07ba5cdf19b261">https://blog.nowcoder.net/n/82793d9724ff4f07bb07ba5cdf19b261</a></li></ul><p>【提示】两种解法：</p><p>（1）逐位与运算，n &amp; 1；</p><p>（2）利用n &amp; (n - 1)会将n的最右边的1变为0，当统计完后，n=0；</p><hr><h3 id="JZ16-数值的整数次方"><a href="#JZ16-数值的整数次方" class="headerlink" title="JZ16 数值的整数次方"></a><strong>JZ16</strong> <strong>数值的整数次方</strong></h3><p><a href="https://www.nowcoder.com/practice/1a834e5e3e1a4b7ba251417554e07c00?tpId=13&amp;tqId=23277&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/solution/mian-shi-ti-16-shu-zhi-de-zheng-shu-ci-fang-kuai-s/">题解</a></p><p>【提示】两种解法：</p><p>（1）直接相乘；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">while</span> <span class="token punctuation">(</span>exponent<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">*=</span> base<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>（2）快速幂（二进制角度或二分法角度）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 二进制角度 */</span><span class="token keyword">while</span> <span class="token punctuation">(</span>exponent <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// exponent二进制这一位是1</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>exponent <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">*=</span> base<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  base <span class="token operator">*=</span> base<span class="token punctuation">;</span> <span class="token comment">// 更新exponent二进制下一位对应的乘数</span>  exponent <span class="token operator">=</span> exponent <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// exponent向右移一位</span><span class="token punctuation">}</span><span class="token comment">/* 二分法角度 */</span><span class="token keyword">while</span> <span class="token punctuation">(</span>exponent <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// exponent为奇数时，将此时的base乘入result中</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>exponent <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">*=</span> base<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  base <span class="token operator">*=</span> base<span class="token punctuation">;</span> <span class="token comment">// 更新base</span>  exponent <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>exponent <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// exponent二分</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ56-数组中只出现一次的两个数字"><a href="#JZ56-数组中只出现一次的两个数字" class="headerlink" title="JZ56 数组中只出现一次的两个数字"></a><strong>JZ56</strong> <strong>数组中只出现一次的两个数字</strong></h3><p><a href="https://www.nowcoder.com/practice/389fc1c3d3be4479a154f63f495abff8?tpId=13&amp;tqId=1375231&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p>leetcode（跟牛客的题有差异）</p><p><a href="https://blog.nowcoder.net/n/5748e228d7b44fe1b2ceaccf98fa5be7?f=comment">题解</a></p><p>【提示】两种思路：1. 哈希表存储数字出现的次数（暂未实现）；2. 二进制角度（异或运算^和与运算&amp;）</p><p>（2）二进制角度：</p><p>1.所有的数进行异或运算得到能够代表所有数之间差异的一个数（二进制角度）；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> num <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  tmp <span class="token operator">^=</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.从最低位开始，找到一个可以将所有数区分为两组的一个数（二进制只有一位）；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> mask <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  mask <span class="token operator">=</span> mask <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.将所有数分为两组，然后分别找这两组中只出现一次的数；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> num <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">^=</span> num<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    b <span class="token operator">^=</span> num<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ64-求1-2-3-…-n"><a href="#JZ64-求1-2-3-…-n" class="headerlink" title="JZ64 求1+2+3+…+n"></a><strong>JZ64</strong> <strong>求1+2+3+…+n</strong></h3><p><a href="https://www.nowcoder.com/practice/7a0da8fc483247ff8800059e12d7caf1?tpId=13&amp;tqId=23248&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/qiu-12n-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/qiu-12n-lcof/solution/mian-shi-ti-64-qiu-1-2-nluo-ji-fu-duan-lu-qing-xi-/">题解</a></p><p>【提示】：题目限制不能使用加减乘除，以及条件判断语句和循环语句。从求解的方法中进行排除（1. 乘法-等差数列求和公式；2. 迭代相加；3. 递归-判断），最终选择迭代法，递归退出的条件判断用短路与&amp;&amp;替代。</p><p>逻辑运算的短路效应：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">A</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">B</span><span class="token punctuation">)</span>  <span class="token comment">// 若 A 为 false ，则 B 的判断不会执行（即短路），直接判定 A &amp;&amp; B 为 false</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">A</span> <span class="token operator">||</span> <span class="token constant">B</span><span class="token punctuation">)</span> <span class="token comment">// 若 A 为 true ，则 B 的判断不会执行（即短路），直接判定 A || B 为 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h2><h3 id="JZ29-顺时针打印矩阵"><a href="#JZ29-顺时针打印矩阵" class="headerlink" title="JZ29 顺时针打印矩阵"></a><strong>JZ29</strong> <strong>顺时针打印矩阵</strong></h3><p><a href="https://www.nowcoder.com/practice/9b4c81a02cd34f76be2659fa0d54342a?tpId=13&amp;tqId=23279&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p>leetcode</p><p>【提示】按从左到右，从上到下，从右到左，从下到上的顺序遍历；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> m <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">let</span> n <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">let</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>m <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当m===n，且为奇数时需要单独加上middle位置的数</span><span class="token keyword">let</span> startX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> startY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 每一轮遍历的起点</span><span class="token keyword">let</span> loopCount <span class="token operator">=</span> m <span class="token operator">&lt;</span> n <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>m <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 循环的次数</span><span class="token keyword">let</span> offset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 控制边界</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 当m!=n时，无法完成完整的一圈循环，需要单独处理边界处的值</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> offset <span class="token operator">===</span> startX <span class="token operator">||</span> n <span class="token operator">-</span> offset <span class="token operator">===</span> startY<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// m=n，处理middle处的值</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">===</span> n <span class="token operator">&amp;&amp;</span> m <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ61-扑克牌顺子"><a href="#JZ61-扑克牌顺子" class="headerlink" title="JZ61 扑克牌顺子"></a><strong>JZ61</strong> <strong>扑克牌顺子</strong></h3><p><a href="https://www.nowcoder.com/practice/762836f4d43d43ca9deb273b3de8e1f4?tpId=13&amp;tqId=23252&amp;ru=/practice/9be0172896bd43948f8a32fb954e1be1&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/bu-ke-pai-zhong-de-shun-zi-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/bu-ke-pai-zhong-de-shun-zi-lcof/solution/mian-shi-ti-61-bu-ke-pai-zhong-de-shun-zi-ji-he-se/">题解</a></p><p>【提示】关键在于判断是否有重复的数字和这组数中最大值与最小值的差是否超过这组数的长度（题目给的是5）。</p><p>（1）集合+遍历</p><p>（2）排序+遍历</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>max <span class="token operator">-</span> min <span class="token operator">&lt;</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ66-构建乘积数组"><a href="#JZ66-构建乘积数组" class="headerlink" title="JZ66 构建乘积数组"></a><strong>JZ66</strong> <strong>构建乘积数组</strong></h3><p><a href="https://www.nowcoder.com/practice/94a4d381a68b47b7a8bed86f2975db46?tpId=13&amp;tqId=23445&amp;ru=/practice/762836f4d43d43ca9deb273b3de8e1f4&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/gou-jian-cheng-ji-shu-zu-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/gou-jian-cheng-ji-shu-zu-lcof/solution/mian-shi-ti-66-gou-jian-cheng-ji-shu-zu-biao-ge-fe/">题解</a></p><p>【题解】</p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220630230605.png" alt="Picture1.png" style="zoom:67%;"><hr><h3 id="JZ67-把字符串转换成整数-atoi"><a href="#JZ67-把字符串转换成整数-atoi" class="headerlink" title="JZ67 把字符串转换成整数(atoi)"></a><strong>JZ67</strong> <strong>把字符串转换成整数(atoi)</strong></h3><p><a href="https://www.nowcoder.com/practice/d11471c3bf2d40f38b66bb12785df47f?tpId=13&amp;tqId=2283174&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/solution/mian-shi-ti-67-ba-zi-fu-chuan-zhuan-huan-cheng-z-4/">题解</a></p><p>【提示】：</p><ol><li><p>连续数字字符转数字</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>char <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>超出边界值时的处理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;=</span> <span class="token constant">BOUNDRY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  num <span class="token operator">=</span> sign <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token constant">BOUNDRY</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token constant">BOUNDRY</span><span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>javascript需要注意：0和-0是不同的两个数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> sign <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><hr><h3 id="JZ20-表示数值的字符串"><a href="#JZ20-表示数值的字符串" class="headerlink" title="JZ20 表示数值的字符串"></a><strong>JZ20 表示数值的字符串</strong></h3><p><a href="https://www.nowcoder.com/practice/e69148f8528c4039ad89bb2546fd4ff8?tpId=13&amp;tqId=1375424&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/solution/mian-shi-ti-20-biao-shi-shu-zhi-de-zi-fu-chuan-y-2/">题解</a></p><p>【提示】较好的两种解法：1. ==有限状态机==；2. 正则表达式。</p><p>（1）有限状态机</p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220706104746.png" alt="Picture1.png" style="zoom:67%;"><p>数字表示状态，<code>digit, blank, sign, dot, e</code>表示状态转移的条件，满足条件就可以从当前状态转移至另一个状态。合法的结束状态有：<code>2, 3, 7, 8</code>。</p><ol><li><p>定义状态转移表</p></li><li><p>初始化当前状态；</p></li><li><p>循环字符串判断每一个字符的类型，即状态转移的条件；</p></li><li><p>判断能否进行状态转移，不能直接return false;</p></li><li><p>状态转移；</p></li><li><p>判断结束状态是否合法；</p></li></ol><hr><p>（2）正则表达式（暂未实现）</p><hr><h2 id="其他算法"><a href="#其他算法" class="headerlink" title="其他算法"></a>其他算法</h2><h3 id="JZ21-调整数组顺序使奇数位于偶数前面-一"><a href="#JZ21-调整数组顺序使奇数位于偶数前面-一" class="headerlink" title="JZ21 调整数组顺序使奇数位于偶数前面(一)"></a><strong>JZ21</strong> <strong>调整数组顺序使奇数位于偶数前面(一)</strong></h3><p><a href="https://www.nowcoder.com/practice/ef1f53ef31ca408cada5093c8780f44b?tpId=13&amp;tqId=1374930&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/">leetcode</a></p><p>【提示】两种解法：1. 辅助数组（odd和even），然后合并；2. 在原数组的基础上，移动数字的位置。</p><p>（1）辅助数组</p><p>定义数组odd存储array中的奇数，even存储array中的偶数，遍历array后，将odd和even合并。</p><p>时间复杂度：$O(n)$，空间复杂度：$O(n)$；</p><p>（2）在原数组上移动数字</p><p>定义$j$表示array中奇数的个数，初始化$j=0$；$i$是遍历array的索引变量，初始化$i=0$；</p><ol><li>遇到奇数，<code>j++</code>；</li><li>temp记录当前位置的奇数<code>temp=array[i]</code>；</li><li><code>[j-1,i]</code>位置的数向后移动一位；</li><li>将奇数<code>temp</code>插入到<code>j-1</code>处。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      j<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&gt;=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      array<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ81-调整数组顺序使奇数位于偶数前面-二"><a href="#JZ81-调整数组顺序使奇数位于偶数前面-二" class="headerlink" title="JZ81 调整数组顺序使奇数位于偶数前面(二)"></a><strong>JZ81</strong> <strong>调整数组顺序使奇数位于偶数前面(二)</strong></h3><p><a href="https://www.nowcoder.com/practice/0c1b486d987b4269b398fee374584fc8?tpId=13&amp;tqId=2221866&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p>【提示】如果不要求保证奇数和奇数，偶数与偶数之间的相对位置，则使用双指针分别指向数组的左右两端，将奇数交换到数组前面，偶数交换到数组后面。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">reOrderArrayTwo</span><span class="token punctuation">(</span> <span class="token parameter">array</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// write code here</span>  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 左指针指向的数是偶数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 右指针指向的数是奇数</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>array<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 交换位置</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        right<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 右指针也指向偶数，则右指针往前移动一位</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      left<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 左指针指向的数是奇数，左指针往后移动一位</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><h3 id="JZ39-数组中出现次数超过一半的数字"><a href="#JZ39-数组中出现次数超过一半的数字" class="headerlink" title="JZ39 数组中出现次数超过一半的数字"></a><strong>JZ39</strong> <strong>数组中出现次数超过一半的数字</strong></h3><p><a href="https://www.nowcoder.com/practice/e8a1b01a2df14cb2b228b30ee6a92163?tpId=13&amp;tqId=23271&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/solution/mian-shi-ti-39-shu-zu-zhong-chu-xian-ci-shu-chao-3/">题解</a></p><p>【提示】三种常用解法：</p><ol><li><strong>哈希表统计法：</strong> 遍历数组 nums ，用 HashMap 统计各数字的数量，即可找出 众数 。此方法时间和空间复杂度均为 $O(N)$。</li><li><strong>数组排序法：</strong> 将数组 nums 排序，数组中点的元素 一定为众数。</li><li><strong>摩尔投票法：</strong> 核心理念为 票数正负抵消 。此方法时间和空间复杂度分别为 $O(N)$ 和 $O(1)$ ，为本题的最佳解法。</li></ol><p>对于摩尔投票法，基本思想是如果一个数是众数则票数<code>+1</code>，如果不是众数则票数<code>-1</code>。初始化票数<code>vote = 0</code>，当<code>vote === 0</code>时，设置众数<code>x = num</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">MoreThanHalfNum_Solution</span><span class="token punctuation">(</span><span class="token parameter">numbers</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// write code here</span>  <span class="token keyword">let</span> vote <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 票数</span>  <span class="token keyword">let</span> x <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 众数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> num <span class="token keyword">of</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vote <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      x <span class="token operator">=</span> num<span class="token punctuation">;</span> <span class="token comment">// 票数为0时假设当前num为众数</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vote<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      vote<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ43-整数中1出现的次数（从1到n整数中1出现的次数）"><a href="#JZ43-整数中1出现的次数（从1到n整数中1出现的次数）" class="headerlink" title="JZ43 整数中1出现的次数（从1到n整数中1出现的次数）"></a><strong>JZ43</strong> <strong>整数中1出现的次数（从1到n整数中1出现的次数）</strong></h3><p><a href="https://www.nowcoder.com/practice/bd7f978302044eee894445e244c7eee6?tpId=13&amp;tqId=23272&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/1nzheng-shu-zhong-1chu-xian-de-ci-shu-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/1nzheng-shu-zhong-1chu-xian-de-ci-shu-lcof/solution/mian-shi-ti-43-1n-zheng-shu-zhong-1-chu-xian-de-2/">题解</a></p><p>【提示】具体来说是三个公式：</p><p>（1）$cur=0$ 时，1的个数为$high * digit$；</p><p>（2）$cur=1$ 时，1的个数为$high * digit + low + 1$；</p><p>（3）$cur=2 \cdots 9$ 时，1的个数为$(high + 1) * digit$；</p><p>==代码中先更新低位。==</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">NumberOf1Between1AndN_Solution</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// write code here</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 当前位</span>  <span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 低位</span>  <span class="token keyword">let</span> high <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 高位</span>  <span class="token keyword">let</span> digit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 位因子</span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 1的个数</span>    <span class="token comment">// 当高位和当前位同时为0时，说明已经统计完成</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>high <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">||</span> cur <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      count <span class="token operator">+=</span> high <span class="token operator">*</span> digit<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      count <span class="token operator">+=</span> high <span class="token operator">*</span> digit <span class="token operator">+</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      count <span class="token operator">+=</span> <span class="token punctuation">(</span>high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> digit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    low <span class="token operator">+=</span> cur <span class="token operator">*</span> digit<span class="token punctuation">;</span> <span class="token comment">// 先更新低位</span>    cur <span class="token operator">=</span> high <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    high <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>high <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digit <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ45-把数组排成最小的数"><a href="#JZ45-把数组排成最小的数" class="headerlink" title="JZ45 把数组排成最小的数"></a><strong>JZ45</strong> <strong>把数组排成最小的数</strong></h3><p><a href="https://www.nowcoder.com/practice/8fecd3f8ba334add803bf2a06af1b993?tpId=13&amp;tqId=23288&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/solution/mian-shi-ti-45-ba-shu-zu-pai-cheng-zui-xiao-de-s-4/">题解</a></p><p>【提示】使用排序算法按照指定的排序规则进行排序，然后拼接起来就是最小的数。</p><p>排序规则：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">设数组 nums中任意两数字的字符串为x和y，则规定排序判断规则为：<span class="token operator">*</span> 若拼接字符串 x <span class="token operator">+</span> y <span class="token operator">&gt;</span> y <span class="token operator">+</span> x ，则 x “大于” y ；<span class="token operator">*</span> 反之，若 x <span class="token operator">+</span> y <span class="token operator">&lt;</span> y <span class="token operator">+</span> x，则 x“小于”y ；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 使用自带的排序函数</span><span class="token keyword">function</span> <span class="token function">PrintMinNumber</span><span class="token punctuation">(</span><span class="token parameter">numbers</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// write code here</span>  <span class="token keyword">const</span> strs <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> <span class="token string">''</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>  strs<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sortRule<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> strs<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">preValue<span class="token punctuation">,</span> curValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> preValue <span class="token operator">+</span> curValue<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 排序规则</span><span class="token keyword">function</span> <span class="token function">sortRule</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span>  a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>  <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">+</span> y<span class="token punctuation">,</span> y <span class="token operator">+</span> x<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ49-丑数"><a href="#JZ49-丑数" class="headerlink" title="JZ49 丑数"></a>JZ49 丑数</h3><p><a href="https://www.nowcoder.com/practice/6aa9e04fc3794f68acf8778237ba065b?tpId=13&amp;tqId=23296&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/chou-shu-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/chou-shu-lcof/solution/mian-shi-ti-49-chou-shu-dong-tai-gui-hua-qing-xi-t/">题解</a></p><p>【提示】（动态规划）只包含质因子2、3和5的数称作丑数（Ugly Number），因此存在递推关系。</p><ul><li>dp数组的含义：dp[i]表示第i+1个丑数；</li><li>递推公式：dp[i] = min(dp[a] * 2, dp[b] * 3, dp[c] * 5)，其中a,b,c分别指向某个乘以2, 3,或5刚好小于等于dp[i]的丑数。</li><li>初始化：dp[0]=1，第一个丑数是1。</li><li>当dp[a], dp[b]或dp[c]等于dp[i]时，分别更新a, b, c（加1）;</li></ul><hr><h3 id="JZ74-和为S的连续正数序列"><a href="#JZ74-和为S的连续正数序列" class="headerlink" title="JZ74 和为S的连续正数序列"></a><strong>JZ74</strong> <strong>和为S的连续正数序列</strong></h3><p><a href="https://www.nowcoder.com/practice/c451a3fd84b64cb19485dad758a55ebe?tpId=13&amp;tqId=23251&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/solution/jian-zhi-offer-57-ii-he-wei-s-de-lian-xu-t85z/">题解</a></p><p>【提示】两种解法：求和公式和滑动窗口；</p><p>（1）求和公式</p><p>等差数列的求和公式：$sum=\frac{(i+j)×(j-i+1)}{2}$，其中i，j分别表示连续序列的左右边界；</p><p>求根公式：对于一元二次方程$ax^{2}+bx+c=0 \quad(a \ne 0)$，有 $x = \frac{-b \pm \sqrt{b^{2}-4 a c}}{2 a}$</p><p>当sum和i已知时，根据一元二次方程的求根公式得到：</p><p>$\begin{equation}x = \frac{-b \pm \sqrt{b^{2}-4 a c}}{2 a}j=\frac{-1+\sqrt{1+4\left(2 \times \operatorname{target}+i^{2}-i\right)}}{2} \end{equation}$</p><p>（2）滑动窗口</p><p>窗口内的值之和大于等于sum，则左边界移动一格；窗口内的值之和小于sum，则右边界移动一格；当窗口内的值等于sum时，将left和right之间的数添加到path中，然后将path添加到res中。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">FindContinuousSequence</span><span class="token punctuation">(</span><span class="token parameter">sum</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// write code here</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> sumOfWindow <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sumOfWindow <span class="token operator">===</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      path<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sumOfWindow <span class="token operator">&lt;</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>      right<span class="token operator">++</span><span class="token punctuation">;</span>      sumOfWindow <span class="token operator">+=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sumOfWindow <span class="token operator">&gt;=</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>      sumOfWindow <span class="token operator">-=</span> left<span class="token punctuation">;</span>      left<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ57-和为S的两个数字"><a href="#JZ57-和为S的两个数字" class="headerlink" title="JZ57 和为S的两个数字"></a><strong>JZ57</strong> <strong>和为S的两个数字</strong></h3><p><a href="https://www.nowcoder.com/practice/390da4f7a00f44bea7c2f3d19491311b?tpId=13&amp;tqId=23295&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/he-wei-sde-liang-ge-shu-zi-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/he-wei-sde-liang-ge-shu-zi-lcof/solution/mian-shi-ti-57-he-wei-s-de-liang-ge-shu-zi-shuang-/">题解</a></p><p>【提示】给定的array是升序的，题目要求是找到两个数的和为sum，有可能不存在，因此用回溯的话没有退出条件。这个的思路是双指针。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> numSum <span class="token operator">=</span> array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>numSum <span class="token operator">&lt;</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    numSum <span class="token operator">-=</span> array<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>    left<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numSum <span class="token operator">&gt;</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    numSum <span class="token operator">-=</span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>    right<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ58-左旋转字符串"><a href="#JZ58-左旋转字符串" class="headerlink" title="JZ58 左旋转字符串"></a><strong>JZ58</strong> <strong>左旋转字符串</strong></h3><p><a href="https://www.nowcoder.com/practice/12d959b108cb42b1ab72cef4d36af5ec?tpId=13&amp;tqId=23266&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/solution/mian-shi-ti-58-ii-zuo-xuan-zhuan-zi-fu-chuan-qie-p/">题解</a></p><p>【提示】两种思路：“字符串切片”和“字符串拼接”。</p><p>（1）字符串切片（用到了字符串的substring()方法）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> num <span class="token operator">=</span> n <span class="token operator">%</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>res <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>（2）字符串拼接（循环拼接字符串，用取余简化代码）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">%</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ62-孩子们的游戏-圆圈中最后剩下的数"><a href="#JZ62-孩子们的游戏-圆圈中最后剩下的数" class="headerlink" title="JZ62 孩子们的游戏(圆圈中最后剩下的数)"></a><strong>JZ62</strong> <strong>孩子们的游戏(圆圈中最后剩下的数)</strong></h3><p><a href="https://www.nowcoder.com/practice/f78a359491e64a50bce2d89cff857eb6?tpId=13&amp;tqId=23265&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/jian-zhi-offer-62-yuan-quan-zhong-zui-ho-dcow/">题解</a></p><p>【提示】约瑟夫环问题，动态规划</p><ul><li>dp[i]数组: i, m问题的解为dp[i]；</li><li>递推公式：dp[i] = (dp[i - 1] + m) % i；</li><li>初始化：dp[1] = 0；</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 使用一个变量执行状态转移</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ75-字符流中第一个不重复的字符"><a href="#JZ75-字符流中第一个不重复的字符" class="headerlink" title="JZ75 字符流中第一个不重复的字符"></a><strong>JZ75</strong> <strong>字符流中第一个不重复的字符</strong></h3><p><a href="https://www.nowcoder.com/practice/00de97733b8e4f97a3fb5c680ee10720?tpId=13&amp;tqId=23448&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://blog.nowcoder.net/n/23f5c7b86af64c62b811c2e9ec2cf5b1">题解</a></p><p>【提示】HashMap记录字符的个数，字符流的存储有两种：字符串（空间复杂度 $O(n)$）和队列（空间复杂度 $O(1)$）;</p><p>注意：JS中字符串在底层是不能改变的，对字符串的操作都会返回一个新的字符串，因此str不能用const定义。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//Init module if you need</span><span class="token comment">// let str = new String();</span><span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//return the first appearence once char in current stringstream</span><span class="token keyword">function</span> <span class="token function">FirstAppearingOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// write code here</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> char <span class="token operator">=</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> char<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">'#'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ17-打印从1到最大的n位数"><a href="#JZ17-打印从1到最大的n位数" class="headerlink" title="JZ17 打印从1到最大的n位数"></a><strong>JZ17</strong> <strong>打印从1到最大的n位数</strong></h3><p><a href="https://www.nowcoder.com/practice/4436c93e568c48f6b28ff436173b997f?tpId=13&amp;tqId=2273153&amp;ru=/practice/0c1b486d987b4269b398fee374584fc8&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p>【提示】最大的n为十进制数，先用循环得到n位的全是9的字符串，然后转为数字。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  max <span class="token operator">+=</span> <span class="token string">'9'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> maxNum <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JZ14-剪绳子"><a href="#JZ14-剪绳子" class="headerlink" title="JZ14 剪绳子"></a><strong>JZ14</strong> <strong>剪绳子</strong></h3><p><a href="https://www.nowcoder.com/practice/57d85990ba5b440ab888fc72b0751bf8?tpId=13&amp;tqId=587690&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/jian-sheng-zi-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/jian-sheng-zi-lcof/solution/mian-shi-ti-14-i-jian-sheng-zi-tan-xin-si-xiang-by/">题解</a></p><p>【提示】记住两个推论：</p><p>（1）当所有绳段的长度相等时，乘积最大；</p><p>（2）最优的绳段长度为3，次优为2，最差为1；</p><p>根据以上推论，有绳子长度 $n=3a+b$。</p><ul><li>b=0时，最大乘积为$3^a$；</li><li>b=1时，拿出一个3凑成2+2，最大乘积为$3^{a-1}*4$；</li><li>b=2时，最大乘积为 $3^{a}*2$；</li></ul><hr><h3 id="JZ83-剪绳子（进阶版）"><a href="#JZ83-剪绳子（进阶版）" class="headerlink" title="JZ83 剪绳子（进阶版）"></a><strong>JZ83</strong> <strong>剪绳子（进阶版）</strong></h3><p><a href="https://www.nowcoder.com/practice/106f666170554379ab1974e5a601e741?tpId=13&amp;tqId=2254224&amp;ru=/exam/oj/ta&amp;qru=/ta/coding-interviews/question-ranking&amp;sourceUrl=/exam/oj/ta?page=1&amp;tpId=13&amp;type=13">牛客</a></p><p><a href="https://leetcode.cn/problems/jian-sheng-zi-ii-lcof/">leetcode</a></p><p><a href="https://leetcode.cn/problems/jian-sheng-zi-ii-lcof/solution/mian-shi-ti-14-ii-jian-sheng-zi-iitan-xin-er-fen-f/">题解</a></p><p>【题解】最终结果很大，需要对结果求余。两种解法：循环求余和快速幂求余。</p><p>（1）循环求余</p><p>公式：</p><p>$\begin{align}<br>x^{a} \odot \boldsymbol{p} &amp; = \left[\left(x^{a-1} \odot \boldsymbol{p}\right)(x \odot p)\right] \odot \boldsymbol{p} &amp; = \left[\left(x^{a-1} \odot \boldsymbol{p}\right) x\right] \odot \boldsymbol{p}<br>\end{align}$</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">remainder</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> rem <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    rem <span class="token operator">=</span> <span class="token punctuation">(</span>rem <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）快速幂求余（<font color="red">JS通不过</font>）</p><p>公式：</p><p>$\begin{align}<br>a^{b} \bmod c &amp; = \left(\begin{array}{l}<br>a \bmod c)^{b}<br>\end{array}\right.<br>\end{align}$</p><p>$\begin{align}<br>x^{a} \odot p &amp; = \left(x^{2}\right)^{a / 2} \odot p &amp; = \left(x^{2} \odot p\right)^{a / 2} \odot p<br>\end{align}$</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">remainder2</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> rem <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      rem <span class="token operator">=</span> <span class="token punctuation">(</span>rem <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>    a <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>a <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>References:</strong></p><ul><li><a href="https://www.cnblogs.com/Dfkuaid-210/p/12115238.html#:~:text=%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E4%BD%99%E4%BE%9D%E8%B5%96%E4%BA%8E%E4%BB%A5%E4%B8%8B%E5%85%AC%E5%BC%8F%3A%20a%20b%20mod%20c%20%3D%20%28%20%28,mod%20c%20%C3%97%20a%29%20mod%20c%20%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%E3%80%82.%20%E4%BA%8E%E6%98%AF%E6%88%91%E4%BB%AC%E5%BE%97%E5%88%B0%E4%BB%A5%E4%B8%8B%E7%AE%97%E6%B3%95%EF%BC%9A">https://www.cnblogs.com/Dfkuaid-210/p/12115238.html#:~:text=%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E4%BD%99%E4%BE%9D%E8%B5%96%E4%BA%8E%E4%BB%A5%E4%B8%8B%E5%85%AC%E5%BC%8F%3A%20a%20b%20mod%20c%20%3D%20%28%20%28,mod%20c%20%C3%97%20a%29%20mod%20c%20%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%E3%80%82.%20%E4%BA%8E%E6%98%AF%E6%88%91%E4%BB%AC%E5%BE%97%E5%88%B0%E4%BB%A5%E4%B8%8B%E7%AE%97%E6%B3%95%EF%BC%9A</a>.</li></ul><hr><h2 id="常用代码片段"><a href="#常用代码片段" class="headerlink" title="常用代码片段"></a>常用代码片段</h2><h3 id="创建一个二维数组"><a href="#创建一个二维数组" class="headerlink" title="创建一个二维数组"></a>创建一个二维数组</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="字符数组转字符串"><a href="#字符数组转字符串" class="headerlink" title="字符数组转字符串"></a>字符数组转字符串</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>‘’<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题(JavaScript实现)</title>
      <link href="/2022/03/25/suan-fa/leetcode/"/>
      <url>/2022/03/25/suan-fa/leetcode/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="二叉树分类"><a href="#二叉树分类" class="headerlink" title="二叉树分类"></a>二叉树分类</h3><ul><li><p>二叉树</p></li><li><p>完全二叉树</p><ul><li>定义：除了最底层的节点可能没有填满，其余每层的节点数都达到最大值，并且最下层的节点都集中在该层最左边的若干位置。若最底层为第h层，则该层包含1~2^(h-1)个节点。</li></ul></li><li><p>平衡二叉树</p><ul><li>定义：一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1 。</li></ul></li><li><p>二叉搜索树</p><p>一般定义（有些题目有变化，具体因题目而定）：</p><ul><li>结点左子树中所含节点的值 小于等于 当前节点的值<br>结点右子树中所含节点的值 大于等于 当前节点的值<br>左子树和右子树都是二叉搜索树</li></ul></li><li><p>平衡二叉搜索树</p></li></ul><p><strong>References:</strong> </p><ul><li><a href="https://www.programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%A7%8D%E7%B1%BB">代码随想录 (programmercarl.com)</a></li></ul><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>深度优先遍历</p><ul><li><p>前序遍历（递归法，迭代法）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">preorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/* 迭代法实现 */</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 注意入栈顺序是先右孩子再左孩子，这样出栈就是根-&gt;左-&gt;右</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>中序遍历（递归法，迭代法)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">inorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> inorder <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 遍历左子树，压栈</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 中节点出栈</span>            <span class="token keyword">let</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            inorder<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 遍历右子树,压栈</span>            root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> inorder<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>后序遍历（递归法，迭代法）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">postorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> postOrder <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> postOrder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        postOrder<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 只改变了前序遍历左右子树的入栈顺序（中--》出栈--》左---》右）---出栈顺序变成了中右左</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 这里颠倒数组顺序就变成了左右中</span>    postOrder<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> postOrder<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>广度优先遍历</p><ul><li><p>层序遍历（队列实现）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number[][]} */</span><span class="token keyword">var</span> <span class="token function-variable function">levelOrder</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 队列长度</span>        <span class="token keyword">let</span> resPerLevel <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 每一层遍历的结果</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>size<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resPerLevel<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>resPerLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前中后统一的迭代遍历模板</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">orderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> preOrder <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// inorder, postorder</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> preOrder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 这里体现遍历顺序---入栈的顺序和遍历顺序相反（出栈）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 右</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//左</span>            <span class="token punctuation">}</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 中</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 标记要放入结果集的节点</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preOrder<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> preOrder<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="创建二叉树"><a href="#创建二叉树" class="headerlink" title="创建二叉树"></a>创建二叉树</h3><h3 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101 对称二叉树"></a>101 对称二叉树</h3><p>给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称。</p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg"></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg"></p><blockquote><p>思路：分别比较外侧节点和内侧节点。</p></blockquote><p>（1）递归</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {boolean} */</span><span class="token keyword">var</span> <span class="token function-variable function">isSymmetric</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">compare</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">leftRoot<span class="token punctuation">,</span> rightRoot</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 后序遍历</span>  <span class="token comment">// 排除空节点的情况---（终止条件）</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>leftRoot <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> rightRoot <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>leftRoot <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> rightRoot <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>leftRoot <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> rightRoot <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>leftRoot<span class="token punctuation">.</span>val <span class="token operator">!==</span> rightRoot<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 此时两个节点的值相同---（单层递归的逻辑）</span>  <span class="token keyword">let</span> outside <span class="token operator">=</span> <span class="token function">compare</span><span class="token punctuation">(</span>leftRoot<span class="token punctuation">.</span>left<span class="token punctuation">,</span> rightRoot<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 比较外侧的节点</span>  <span class="token keyword">let</span> inside <span class="token operator">=</span> <span class="token function">compare</span><span class="token punctuation">(</span>leftRoot<span class="token punctuation">.</span>right<span class="token punctuation">,</span> rightRoot<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 比较内侧的节点</span>  <span class="token keyword">let</span> isSame <span class="token operator">=</span> outside <span class="token operator">&amp;&amp;</span> inside<span class="token punctuation">;</span>  <span class="token keyword">return</span> isSame<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）迭代（栈或队列都可以，栈是先比较内侧后比较外侧，队列相反）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {boolean} */</span><span class="token keyword">var</span> <span class="token function-variable function">isSymmetric</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 根节点的左右子节点入队</span>  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 迭代法---层</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 取出栈顶的两个节点</span>    <span class="token keyword">let</span> leftNode <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rightNode <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果这两个节点都为null，说明这一侧的节点都是对称的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> rightNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 如果这两个节点其中一个为null而另一个不为null或者这两个节点的值不相等，则不对称</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>leftNode <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> rightNode <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>leftNode <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> rightNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>leftNode<span class="token punctuation">.</span>val <span class="token operator">!==</span> rightNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 外侧的节点</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leftNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rightNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 内侧的节点</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leftNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rightNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104 二叉树的最大深度"></a>104 二叉树的最大深度</h3><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例：<br>给定二叉树 [3,9,20,null,null,15,7]，</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token number">3</span> <span class="token operator">/</span> \<span class="token number">9</span>  <span class="token number">20</span>  <span class="token operator">/</span>  \ <span class="token number">15</span>   <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回它的最大深度 3 。</p><blockquote><p>深度和高度的区别？</p><ul><li><p>二叉树节点的深度：从根节点到该节点的最长简单路径边的条数。</p></li><li><p>二叉树节点的高度：从该节点到叶子结点的最长简单路径边的条数。</p></li></ul><p>但LeetCode中的深度和高度是按照<code>节点</code>来计算的。</p><p><img src="https://img-blog.csdnimg.cn/20210203155515650.png" alt="110.平衡二叉树2"></p><p>思路：递归（前序或后序），迭代（层序）</p></blockquote><p>（1）递归</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">maxDepth</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 前序遍历，depth从1开始</span>  <span class="token keyword">const</span> <span class="token function-variable function">getMaxDepth</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> depth</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> depth <span class="token operator">&gt;</span> result <span class="token operator">?</span> depth <span class="token operator">:</span> result<span class="token punctuation">;</span><span class="token comment">// 到达叶子结点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">getMaxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">getMaxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getMaxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">maxDepth</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 后序遍历</span>  <span class="token keyword">const</span> <span class="token function-variable function">getMaxDepth</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> leftDepth <span class="token operator">=</span> <span class="token function">getMaxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rightDepth <span class="token operator">=</span> <span class="token function">getMaxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> depth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftDepth<span class="token punctuation">,</span> rightDepth<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 从叶子结点往上加</span>    <span class="token keyword">return</span> depth<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  result <span class="token operator">=</span> <span class="token function">getMaxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）迭代</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">maxDepth</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token comment">// 层序遍历</span>  <span class="token comment">// 进入每一层</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    result<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>size<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="559-N叉树的最大深度"><a href="#559-N叉树的最大深度" class="headerlink" title="559 N叉树的最大深度"></a>559 N叉树的最大深度</h3><p>给定一个 N 叉树，找到其最大深度。</p><p>最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。</p><p>N 叉树输入按层序遍历序列化表示，每组子节点由空值分隔（请参见示例）。</p><p>示例 1：</p><img src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png" style="zoom:50%;"><pre class="line-numbers language-none"><code class="language-none">输入：root = [1,null,3,2,4,null,5,6]输出：3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例 2：</p><img src="https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png" style="zoom:50%;"><pre class="line-numbers language-none"><code class="language-none">输入：root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]输出：5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提示：</p><p>树的深度不会超过 1000 。<br>树的节点数目位于 [0, 104] 之间。</p><blockquote><p>思路：跟二叉树的区别就是子节点的地方，N叉树的子节点通过root.children访问，children是一个节点数组，里面都是root的子节点</p></blockquote><p>（1）递归</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * // Definition for a Node. * function Node(val,children) { *    this.val = val; *    this.children = children; * }; */</span><span class="token comment">/** * @param {Node|null} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">maxDepth</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 前序遍历</span>  <span class="token keyword">const</span> <span class="token function-variable function">getMaxDepth</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> depth</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    result <span class="token operator">=</span> depth <span class="token operator">&gt;</span> result <span class="token operator">?</span> depth <span class="token operator">:</span> result<span class="token punctuation">;</span>    <span class="token comment">// 循环遍历多个子节点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        depth<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">getMaxDepth</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> depth<span class="token punctuation">)</span><span class="token punctuation">;</span>        depth<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">getMaxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * // Definition for a Node. * function Node(val,children) { *    this.val = val; *    this.children = children; * }; */</span><span class="token comment">/** * @param {Node|null} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">maxDepth</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 后序遍历</span>  <span class="token keyword">const</span> <span class="token function-variable function">getMaxDepth</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 循环遍历多个子节点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      depth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> <span class="token function">getMaxDepth</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  result <span class="token operator">=</span> <span class="token function">getMaxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）迭代</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * // Definition for a Node. * function Node(val,children) { *    this.val = val; *    this.children = children; * }; */</span><span class="token comment">/** * @param {Node|null} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">maxDepth</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 层序遍历</span>  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    result<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>size<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> childNode <span class="token keyword">of</span> node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>          queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>childNode<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111 二叉树的最小深度"></a>111 二叉树的最小深度</h3><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p><strong>说明：</strong>叶子节点是指没有子节点的节点。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2020/10/12/ex_depth.jpg" style="zoom:80%;"><pre class="line-numbers language-none"><code class="language-none">输入：root = [3,9,20,null,null,15,7]输出：2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：root = [2,null,3,null,4,null,5,null,6]输出：5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>树中节点数的范围在 <code>[0, 105]</code> 内</li><li><code>-1000 &lt;= Node.val &lt;= 1000</code></li></ul><blockquote><p>最小深度跟最大深度的解法类似，不同的是处理左右孩子不为空的逻辑。</p><p>注意：最小深度是从根节点到最近叶子结点的最短路径上的节点数量。</p></blockquote><p>（1）迭代</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">minDepth</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 后序遍历</span>  <span class="token keyword">const</span> <span class="token function-variable function">getMinDepth</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span>  <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> leftDepth <span class="token operator">=</span> <span class="token function">getMinDepth</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 左</span>    <span class="token keyword">let</span> rightDepth <span class="token operator">=</span> <span class="token function">getMinDepth</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 右</span>        <span class="token comment">// 中</span>    <span class="token comment">// 左节点为空，右节点不为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> rightDepth<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 左节点不为空，右节点为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> leftDepth<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 左右节点都为空或者都不为空</span>    <span class="token keyword">let</span> minDepth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>leftDepth<span class="token punctuation">,</span> rightDepth<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> minDepth<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  result <span class="token operator">=</span> <span class="token function">getMinDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）迭代</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">minDepth</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> depth<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 层序遍历</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    depth<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>size<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 当这一层的某个节点左节点和右节点都为空时，说明是最低层了。</span>        <span class="token keyword">return</span> depth<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> depth<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="222-完全二叉树的节点个数"><a href="#222-完全二叉树的节点个数" class="headerlink" title="222 完全二叉树的节点个数"></a>222 完全二叉树的节点个数</h3><p>给你一棵 完全二叉树 的根节点 root ，求出该树的节点个数。</p><p>完全二叉树 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2h 个节点。</p> <img src="https://assets.leetcode.com/uploads/2021/01/14/complete.jpg" style="zoom:80%;"><p><strong>示例 1：</strong></p><p>输入：root = [1,2,3,4,5,6]<br>输出：6</p><p><strong>示例 2：</strong></p><p>输入：root = []<br>输出：0</p><p><strong>示例 3：</strong></p><p>输入：root = [1]<br>输出：1</p><p><strong>提示：</strong></p><p>树中节点的数目范围是[0, 5 * 104]<br>0 &lt;= Node.val &lt;= 5 * 104<br>题目数据保证输入的树是 完全二叉树</p><p>进阶：遍历树来统计节点是一种时间复杂度为 O(n) 的简单解决方案。你可以设计一个更快的算法吗？</p><blockquote><p>思路：</p><ol><li>二叉树的后序遍历</li><li>二叉树的层序遍历</li><li>完全二叉树的性质（子树是满二叉树）</li></ol></blockquote><p>（1）后序遍历</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">countNodes</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 后序遍历</span>  <span class="token keyword">const</span> <span class="token function-variable function">getNodesCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">let</span> leftNodesCount <span class="token operator">=</span> <span class="token function">getNodesCount</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 左</span>    <span class="token keyword">let</span> rightNodesCount <span class="token operator">=</span> <span class="token function">getNodesCount</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 右</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> leftNodesCount <span class="token operator">+</span> rightNodesCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 中（+1 =&gt; 节点数=1+左子树节点数+右子树节点数）</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  result <span class="token operator">=</span> <span class="token function">getNodesCount</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）层序遍历</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">countNodes</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> nodesNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> nodesNum<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment">// 层序遍历</span>  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    nodesNum <span class="token operator">+=</span> size<span class="token punctuation">;</span> <span class="token comment">// 加上每一层的节点数</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>size<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> nodesNum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）完全二叉树的性质</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">countNodes</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 利用完全二叉树的性质</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> leftHight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> rightHight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> left <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>  <span class="token keyword">let</span> right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>    left <span class="token operator">=</span> left<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    leftHight<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    right <span class="token operator">=</span> right<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    rightHight<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 递归到满二叉树为止</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>rightHight <span class="token operator">===</span> leftHight<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 细节：leftHight + 1</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> leftHight <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> leftNodesNum <span class="token operator">=</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> rightNodesNum <span class="token operator">=</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> leftNodesNum <span class="token operator">+</span> rightNodesNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110 平衡二叉树"></a>110 平衡二叉树</h3><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：</p><blockquote><p>一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1 。</p></blockquote><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg" style="zoom:80%;"><p>输入：root = [3,9,20,null,null,15,7]<br>输出：true</p><p><strong>示例 2：</strong></p><p>输入：root = [1,2,2,3,3,null,null,4,4]<br>输出：false</p><p><strong>示例 3：</strong></p><p>输入：root = []<br>输出：true</p><p><strong>提示：</strong></p><p>树中的节点数在范围 [0, 5000] 内<br>-10^4 &lt;= Node.val &lt;= 10^4</p><blockquote><p>思路：</p><ol><li>后序遍历-递归，求高度，如果不满足条件就返回-1，表示不是平衡二叉树。</li><li>层序遍历，每个节点都计算左右子树的高度，然后判断是否满足平衡二叉树条件。</li></ol></blockquote><p>（1）后序遍历-递归</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment">/** * @param {TreeNode} root * @return {boolean} */</span><span class="token keyword">var</span> <span class="token function-variable function">isBalanced</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 后序遍历，-1表示不是平衡二叉树</span>  <span class="token keyword">const</span> <span class="token function-variable function">getHeight</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> leftHeight <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 当不满足平衡二叉树条件时就退出 </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftHeight <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> rightHeight <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rightHeight <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>leftHeight <span class="token operator">-</span> rightHeight<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      height <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      height <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftHeight<span class="token punctuation">,</span> rightHeight<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> height<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）迭代</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {boolean} */</span><span class="token keyword">var</span> <span class="token function-variable function">isBalanced</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 前序遍历</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">getDepth</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 后序遍历得到传入节点的深度</span><span class="token keyword">function</span> <span class="token function">getDepth</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 中</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      depth<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 右</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 左</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      depth<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    result <span class="token operator">=</span> result <span class="token operator">&gt;</span> depth <span class="token operator">?</span> result <span class="token operator">:</span> depth<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="周总结"><a href="#周总结" class="headerlink" title="周总结"></a>周总结</h3><ol><li><p>迭代法什么时候用队列，什么时候用栈？</p><p>如果模拟前中后序遍历就用栈，模拟层序遍历就用队列。但是也有其他情况，队列和栈都试试看哪个符合题意。</p></li><li><p>深度和高度的区别？</p><ul><li>二叉树节点的深度：从根节点到该节点的最长简单路径边的条数。</li><li>二叉树节点的高度：从该节点到叶子结点的最长简单路径边的条数。</li></ul><p>但LeetCode中的深度和高度是按照<code>节点</code>来计算的。</p></li></ol><hr><h3 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="404 左叶子之和"></a>404 左叶子之和</h3><p>给定二叉树的根节点 root ，返回所有左叶子之和。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2021/04/08/leftsum-tree.jpg" style="zoom:67%;"><p>输入: root = [3,9,20,null,null,15,7]<br>输出: 24<br>解释: 在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24</p><p><strong>示例 2:</strong></p><p>输入: root = [1]<br>输出: 0</p><p>提示:</p><p>节点数在 [1, 1000] 范围内<br>-1000 &lt;= Node.val &lt;= 1000</p><blockquote><p>思路：要确定左叶子，需要通过左叶子的父节点来确定</p></blockquote><p>（1）递归</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">sumOfLeftLeaves</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 注意这里用数组来存储左叶子，因为前序会回溯，如果使用number那之前的值就没了</span>  <span class="token comment">// 前序遍历</span>  <span class="token keyword">const</span> <span class="token function-variable function">getSum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> sum</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 判断是不是左叶子节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      sum<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 退出条件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 左节点存在才继续递归</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">getSum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 右节点存在才继续递归</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">getSum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">getSum</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> sum<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">preValue<span class="token punctuation">,</span> curValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> preValue <span class="token operator">+</span> curValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">sumOfLeftLeaves</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 后序遍历</span>  <span class="token keyword">const</span> <span class="token function-variable function">getSum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> leftValue <span class="token operator">=</span> <span class="token function">getSum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 左子树的左叶子节点之和</span>    <span class="token keyword">let</span> rightValue <span class="token operator">=</span> <span class="token function">getSum</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 右子树的左叶子节点之和</span>    <span class="token keyword">let</span> midValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 确定左叶子</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      midValue <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> midValue <span class="token operator">+</span> leftValue <span class="token operator">+</span> rightValue<span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  sum <span class="token operator">=</span> <span class="token function">getSum</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）迭代</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">sumOfLeftLeaves</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 迭代-前序遍历（统一遍历模板）</span>  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 确定是左叶子</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="513-找树左下角的值"><a href="#513-找树左下角的值" class="headerlink" title="513 找树左下角的值"></a>513 找树左下角的值</h3><p>给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。</p><p>假设二叉树中至少有一个节点。</p><p><strong>示例 1:</strong></p><img src="https://assets.leetcode.com/uploads/2020/12/14/tree1.jpg" style="zoom:80%;"><p>输入: root = [2,1,3]<br>输出: 1</p><p><strong>示例 2:</strong></p><img src="https://assets.leetcode.com/uploads/2020/12/14/tree2.jpg" style="zoom:80%;"><p>输入: [1,2,3,4,null,5,6,null,null,7]<br>输出: 7</p><p><strong>提示:</strong></p><p>二叉树的节点个数的范围是 [1,104]<br>-2^31 &lt;= Node.val &lt;= 2^31 - 1 </p><blockquote><ol><li>递归</li><li>迭代（层序遍历）</li></ol><p>要注意代码细节！</p></blockquote><p>（1）递归</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">findBottomLeftValue</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> leftValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 结果设置为nul，值类型不行（细节）</span>  <span class="token keyword">let</span> maxDepth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 前序遍历-深度优先</span>  <span class="token keyword">const</span> <span class="token function-variable function">getBottomLeftValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> curDepth</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>curDepth <span class="token operator">&gt;</span> maxDepth<span class="token punctuation">)</span> <span class="token punctuation">{</span>        maxDepth <span class="token operator">=</span> curDepth<span class="token punctuation">;</span>        leftValue <span class="token operator">=</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">getBottomLeftValue</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> curDepth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">getBottomLeftValue</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> curDepth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">getBottomLeftValue</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> maxDepth<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>leftValue <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    leftValue <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> leftValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）迭代</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">findBottomLeftValue</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> leftValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 层序遍历</span>  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 取每层第一个节点</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        leftValue <span class="token operator">=</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> leftValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="654-最大二叉树"><a href="#654-最大二叉树" class="headerlink" title="654 最大二叉树"></a>654 最大二叉树</h3><p>给定一个不重复的整数数组 nums 。 最大二叉树 可以用下面的算法从 nums 递归地构建:</p><p>创建一个根节点，其值为 nums 中的最大值。<br>递归地在最大值 左边 的 子数组前缀上 构建左子树。<br>递归地在最大值 右边 的 子数组后缀上 构建右子树。<br>返回 nums 构建的 最大二叉树 。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2020/12/24/tree1.jpg" style="zoom:80%;"><p>输入：nums = [3,2,1,6,0,5]<br>输出：[6,3,5,null,2,0,null,null,1]<br>解释：递归调用如下所示：</p><ul><li>[3,2,1,6,0,5] 中的最大值是 6 ，左边部分是 [3,2,1] ，右边部分是 [0,5] 。<ul><li>[3,2,1] 中的最大值是 3 ，左边部分是 [] ，右边部分是 [2,1] 。<ul><li>空数组，无子节点。</li><li>[2,1] 中的最大值是 2 ，左边部分是 [] ，右边部分是 [1] 。<ul><li>空数组，无子节点。</li><li>只有一个元素，所以子节点是一个值为 1 的节点。</li></ul></li></ul></li><li>[0,5] 中的最大值是 5 ，左边部分是 [0] ，右边部分是 [] 。<ul><li>只有一个元素，所以子节点是一个值为 0 的节点。</li><li>空数组，无子节点。</li></ul></li></ul></li></ul><p><strong>示例 2：</strong></p><img src="https://assets.leetcode.com/uploads/2020/12/24/tree2.jpg" style="zoom:80%;"><p>输入：nums = [3,2,1]<br>输出：[3,null,2,null,1]</p><p><strong>提示：</strong></p><p>1 &lt;= nums.length &lt;= 1000<br>0 &lt;= nums[i] &lt;= 1000<br>nums 中的所有整数 互不相同</p><blockquote><p>传递的参数为数组的索引，而不是子数组。</p><p>注意代码细节！</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} nums * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">constructMaximumBinaryTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 前序遍历</span>  <span class="token keyword">const</span> <span class="token function-variable function">build</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> startIndex<span class="token punctuation">,</span> endIndex</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>startIndex <span class="token operator">===</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> maxNum <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 细节（题干条件说了nums[i]&gt;=0，初始化为0那if判断就进不去，maxNumIndex就没有更新）</span>    <span class="token keyword">let</span> maxNumIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> endIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> maxNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        maxNum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        maxNumIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>maxNum<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> startIndex<span class="token punctuation">,</span> maxNumIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> maxNumIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  root <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112 路径总和"></a>112 路径总和</h3><p>给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。</p><p>叶子节点 是指没有子节点的节点。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg" style="zoom: 67%;"><p>输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22<br>输出：true<br>解释：等于目标和的根节点到叶节点路径如上图所示。</p><p><strong>示例 2：</strong></p><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg" style="zoom:67%;"><p>输入：root = [1,2,3], targetSum = 5<br>输出：false<br>解释：树中存在两条根节点到叶子节点的路径：<br>(1 –&gt; 2): 和为 3<br>(1 –&gt; 3): 和为 4<br>不存在 sum = 5 的根节点到叶子节点的路径。</p><p><strong>示例 3：</strong></p><p>输入：root = [], targetSum = 0<br>输出：false<br>解释：由于树是空的，所以不存在根节点到叶子节点的路径。</p><p>提示：</p><p>树中节点的数目在范围 [0, 5000] 内<br>-1000 &lt;= Node.val &lt;= 1000<br>-1000 &lt;= targetSum &lt;= 1000</p><blockquote><p>前序遍历，回溯</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @param {number} targetSum * @return {boolean} */</span><span class="token keyword">var</span> <span class="token function-variable function">hasPathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> targetSum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 前序遍历--深度递归(自己实现的思路)</span>  <span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> targetSum<span class="token punctuation">,</span> sum</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    sum <span class="token operator">+=</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> targetSum<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> targetSum<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> targetSum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @param {number} targetSum * @return {boolean} */</span><span class="token keyword">var</span> <span class="token function-variable function">hasPathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> count</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 回溯的逻辑</span>  <span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> count</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> count <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>      count <span class="token operator">-=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      count <span class="token operator">+=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>      count <span class="token operator">-=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      count <span class="token operator">+=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> count <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="113-路径总和II"><a href="#113-路径总和II" class="headerlink" title="113 路径总和II"></a>113 路径总和II</h3><p>给你二叉树的根节点 root 和一个整数目标和 targetSum ，找出所有 从根节点到叶子节点 路径总和等于给定目标和的路径。</p><p>叶子节点 是指没有子节点的节点。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsumii1.jpg" style="zoom:67%;"><p>输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22<br>输出：[[5,4,11,2],[5,8,4,5]]</p><p><strong>示例 2：</strong></p><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg" style="zoom:67%;"><p>输入：root = [1,2,3], targetSum = 5<br>输出：[]</p><p><strong>示例 3：</strong></p><p>输入：root = [1,2], targetSum = 0<br>输出：[]</p><p><strong>提示：</strong></p><p>树中节点总数在范围 [0, 5000] 内<br>-1000 &lt;= Node.val &lt;= 1000<br>-1000 &lt;= targetSum &lt;= 1000</p><blockquote><p>记录所有满足条件的路径，回溯的思想。</p><p>到叶子结点处判断是否满足条件，满足条件就记录这条路径，然后返回。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @param {number} targetSum * @return {number[][]} */</span><span class="token keyword">var</span> <span class="token function-variable function">pathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> targetSum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  sum <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>  <span class="token comment">// 前序-回溯</span>  <span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> targetSum<span class="token punctuation">,</span> sum</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>      sum <span class="token operator">+=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">;</span>      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> targetSum<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sum <span class="token operator">-=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>      sum <span class="token operator">+=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">;</span>      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> targetSum<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>      sum <span class="token operator">-=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">;</span>      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> targetSum<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>什么时候递归要返回值，什么时候不用返回？</strong></p><p>如果要搜索整棵树，递归函数就不需要返回值；如果只需要找到某条符合条件的路径，就需要返回。</p><hr><h3 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617 合并二叉树"></a>617 合并二叉树</h3><p>给你两棵二叉树： root1 和 root2 。</p><p>想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，不为 null 的节点将直接作为新二叉树的节点。</p><p>返回合并后的二叉树。</p><p>注意: 合并过程必须从两个树的根节点开始。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2021/02/05/merge.jpg" style="zoom:67%;"><p>输入：root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]<br>输出：[3,4,5,5,4,null,7]</p><p><strong>示例 2：</strong></p><p>输入：root1 = [1], root2 = [1,2]<br>输出：[2,2]</p><p><strong>提示：</strong></p><p>两棵树中的节点数目在范围 [0, 2000] 内<br>-10^4 &lt;= Node.val &lt;= 10^4</p><blockquote><p>前中后序遍历都可以，前序最好理解。</p><p>两棵树，任意一颗的节点为null就用另外一颗的替代。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root1 * @param {TreeNode} root2 * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">mergeTrees</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root1<span class="token punctuation">,</span> root2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 前序遍历</span>    <span class="token comment">// tree1的节点为空，这个时候用tree2的节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root1 <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> root2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// tree2的节点为空，这个时候用tree1的节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root2 <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> root1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    root1<span class="token punctuation">.</span>val <span class="token operator">+=</span> root2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    root1<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    root1<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226 翻转二叉树"></a>226 翻转二叉树</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220309191224294.png" alt="image-20220309191224294"></p><blockquote><p>两种解法：</p><ol><li><p>深度优先递归（递归，前序遍历位置执行操作）</p></li><li><p>广度优先递归（层序遍历，借助一个额外的队列存放当前需要交换左右子节点的根节点）</p></li></ol></blockquote><ul><li><p>深度优先遍历（前序遍历）</p><p>从树的根节点开始，先遍历左子树，然后遍历右子树</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment">/** * @param {TreeNode} root * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">invertTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 前序遍历位置 */</span>     <span class="token comment">// 交换根节点的左右子节点</span>    <span class="token keyword">var</span> temp <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token comment">// 继续交换左右子树的节点</span>    <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>广度优先遍历</p><p>从根节点开始，沿着树的宽度依次遍历树的每个节点。（层序遍历）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment">/** * @param {TreeNode} root * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">invertTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 定义一个队列存放当前要交换位置的孩子的根结点</span>    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 穷举</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 从队列中取出当前节点</span>        <span class="token keyword">var</span> currentNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 交换左右节点</span>        <span class="token keyword">var</span> temp <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        currentNode<span class="token punctuation">.</span>left <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        currentNode<span class="token punctuation">.</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token comment">// 如果当前节点的左子树不为空，放到队列中</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 如果当前节点的右子树不为空，放到队列中</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="116-填充二叉树节点的右侧指针"><a href="#116-填充二叉树节点的右侧指针" class="headerlink" title="116 填充二叉树节点的右侧指针"></a>116 填充二叉树节点的右侧指针</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220309191326064.png" alt="image-20220309191326064"></p><blockquote><p>递归，主要操作在前序遍历位置，<strong>借助一个有两个结点作为参数的函数</strong>，因为要在每个节点上执行操作，所以会遍历到每个节点。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * // Definition for a Node. * function Node(val, left, right, next) { *    this.val = val === undefined ? null : val; *    this.left = left === undefined ? null : left; *    this.right = right === undefined ? null : right; *    this.next = next === undefined ? null : next; * }; */</span><span class="token comment">/** * @param {Node} root * @return {Node} */</span><span class="token keyword">var</span> <span class="token function-variable function">connect</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">connectTwoNode</span><span class="token punctuation">(</span><span class="token parameter">Node1<span class="token punctuation">,</span> Node2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/* 前序遍历位置 */</span>    <span class="token comment">/* 结束条件 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Node1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> Node2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">/* 连接传入的两个节点 */</span>    Node1<span class="token punctuation">.</span>next <span class="token operator">=</span> Node2<span class="token punctuation">;</span>    <span class="token comment">/* 连接Node1的子节点 */</span>    <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>Node1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> Node1<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 连接Node2的子节点 */</span>    <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>Node2<span class="token punctuation">.</span>left<span class="token punctuation">,</span> Node2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 连接Node1和Node2的子节点 */</span>    <span class="token function">connectTwoNode</span><span class="token punctuation">(</span>Node1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> Node2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="114-将二叉树展开为链表"><a href="#114-将二叉树展开为链表" class="headerlink" title="114 将二叉树展开为链表"></a>114 将二叉树展开为链表</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220309191402904.png" alt="image-20220309191402904"></p><blockquote><p>递归，后序遍历。</p><p>在函数内要对根节点判空，注意函数的主要操作在后序遍历位置，即在左右子树都拉平后。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment">/** * @param {TreeNode} root * @return {void} Do not return anything, modify root in-place instead. */</span><span class="token keyword">var</span> <span class="token function-variable function">flatten</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 先序遍历, 将左右子树拉平</span>    <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 后序遍历位置，此时左右子树已经拉平 */</span>    <span class="token comment">// 左子树作为右子树</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token comment">// 右子树接到左子树后面</span>    <span class="token keyword">let</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token comment">// 找到现在右子树的叶子结点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 在叶子结点后接上之前的右子树</span>    p<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="654-构造最大二叉树"><a href="#654-构造最大二叉树" class="headerlink" title="654 构造最大二叉树"></a>654 构造最大二叉树</h3><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220309191107469.png" alt="image-20220309191107469"><blockquote><p>思路1：自己递归自己，在前序遍历位置找到最大值和最大值索引，递归参数为新的数组</p><p>思路2：分治思想，递归另外的辅助函数，找到最大值和最大值索引，最大值的初始化值比原数组的最小值小，递归参数为数组的新的索引。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment">/** * @param {number[]} nums * @return {TreeNode} */</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token comment">/** * 思路一 * 递归传递的参数是数组*/</span><span class="token keyword">var</span> <span class="token function-variable function">constructMaximumBinaryTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">/* 前序遍历位置 */</span>    <span class="token comment">// 确定并创建根节点</span>    <span class="token keyword">let</span> maxNum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>maxNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>maxNum<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 递归创建左子树</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">constructMaximumBinaryTree</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 递归创建右子树</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">constructMaximumBinaryTree</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * 思路二 * 递归传递的参数是数组的索引*/</span><span class="token keyword">var</span> <span class="token function-variable function">constructMaximumBinaryTree</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token function">construct</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** nums: 输入的数组 lo: 数组左边界的索引 hi: 数组右边界的索引*/</span><span class="token keyword">const</span> <span class="token function-variable function">construct</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lo <span class="token operator">===</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 这里要特别注意测试用例的数组的值的范围</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> maxValue <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// 找到数组中最大值和相应的索引</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> lo<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hi<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxValue <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 创建根节点</span>    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 递归构造左子树</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">construct</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 递归构造右子树</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">construct</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="105-从前序与中序遍历序列构造二叉树"><a href="#105-从前序与中序遍历序列构造二叉树" class="headerlink" title="105 从前序与中序遍历序列构造二叉树"></a>105 从前序与中序遍历序列构造二叉树</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220309191444266.png" alt="image-20220309191444266"></p><blockquote><p>逻辑处理在<strong>前序遍历位置</strong>，然后分别递归左子树和右子树。首先确定根节点的值和位置（前序遍历的第一个位置），中序遍历根节点的左边是左子树，右边是右子树，前序遍历的左子树和右子树位置由左子树的长度确定。</p><p>难点在如何确定前序遍历中左子树的起始位置。</p><p>递归的参数是整个树的前序遍历和中序遍历、树的前序遍历起始索引、树的中序遍历索引。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment">/** * @param {number[]} preorder * @param {number[]} inorder * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">buildTree</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">preorder<span class="token punctuation">,</span> inorder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * @param {number[]} preorder前序遍历序列 * @param {number[]} inorder中序遍历虚列 * @param {number} preStart前序遍历序列第一个元素的索引 * @param {number} preEnd前序遍历序列最后一个元素的索引 * @param {number} inStart中序遍历序列第一个元素的索引 * @param {number} inEnd中序遍历序列最后一个元素的索引 * @return {TreeNode}*/</span><span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token parameter">preorder<span class="token punctuation">,</span> preStart<span class="token punctuation">,</span> preEnd<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> inStart<span class="token punctuation">,</span> inEnd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 退出条件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>preStart <span class="token operator">&gt;</span> preEnd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 找到根节点的值</span>    <span class="token keyword">let</span> rootValue <span class="token operator">=</span> preorder<span class="token punctuation">[</span>preStart<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 找到根节点在中序遍历中的索引</span>    <span class="token keyword">let</span> rootInIndex <span class="token operator">=</span> inorder<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>rootValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 左子树的长度</span>    <span class="token keyword">let</span> leftSize <span class="token operator">=</span> rootInIndex <span class="token operator">-</span> inStart<span class="token punctuation">;</span>    <span class="token comment">// 确定前序遍历中左子树的起始</span>    <span class="token keyword">let</span> preLStart <span class="token operator">=</span> preStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> preLEnd <span class="token operator">=</span> preStart <span class="token operator">+</span> leftSize<span class="token punctuation">;</span>    <span class="token comment">// 确定中序遍历中左子树的起始</span>    <span class="token keyword">let</span> inLStart <span class="token operator">=</span> inStart<span class="token punctuation">;</span>    <span class="token keyword">let</span> inLEnd <span class="token operator">=</span> rootInIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 确定前序遍历中右子树的起始</span>    <span class="token keyword">let</span> preRStart <span class="token operator">=</span> preStart <span class="token operator">+</span> leftSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> preREnd <span class="token operator">=</span> preEnd<span class="token punctuation">;</span>    <span class="token comment">// 确定中序遍历中右子树的起始</span>    <span class="token keyword">let</span> inRStart <span class="token operator">=</span> rootInIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> inREnd <span class="token operator">=</span> inEnd<span class="token punctuation">;</span>    <span class="token comment">// 创建根节点</span>    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>rootValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 递归左右子树</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> preLStart<span class="token punctuation">,</span> preLEnd<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> inLStart<span class="token punctuation">,</span> inLEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> preRStart<span class="token punctuation">,</span> preREnd<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> inRStart<span class="token punctuation">,</span> inREnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="106-从中序与后序遍历序列构造二叉树"><a href="#106-从中序与后序遍历序列构造二叉树" class="headerlink" title="106 从中序与后序遍历序列构造二叉树"></a>106 从中序与后序遍历序列构造二叉树</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220309191513286.png" alt="image-20220309191513286"></p><blockquote><p>逻辑处理在<strong>前序遍历位置</strong>，同5类似，根据中序遍历和后序遍历的特点确定递归传递的左右子树起始位置的索引。</p><p>中序遍历，根结点的左边是左子树，右边是右子树；</p><p>后序遍历，根结点在后序遍历序列的末尾。</p><p>根据中序遍历确定左子树的长度，然后确定递归时左右子树遍历序列的起始索引。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment">/** * @param {number[]} inorder * @param {number[]} postorder * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">buildTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">inorder<span class="token punctuation">,</span> postorder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> postorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token parameter">inorder<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> inStart<span class="token punctuation">,</span> inEnd<span class="token punctuation">,</span> postStart<span class="token punctuation">,</span> postEnd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 退出条件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inStart <span class="token operator">&gt;</span> inEnd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 确定根节点的值</span>    <span class="token keyword">let</span> rootVal <span class="token operator">=</span> postorder<span class="token punctuation">[</span>postEnd<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 确定根节点的值在中序遍历中的索引</span>    <span class="token keyword">let</span> rootIndex <span class="token operator">=</span> inorder<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 确定左子树的长度</span>    <span class="token keyword">let</span> leftSize <span class="token operator">=</span> rootIndex <span class="token operator">-</span> inStart<span class="token punctuation">;</span>    <span class="token comment">// 创建根节点</span>    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 递归创建左子树和右子树</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> inStart<span class="token punctuation">,</span> rootIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> postStart<span class="token punctuation">,</span> postStart <span class="token operator">+</span> leftSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> rootIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inEnd<span class="token punctuation">,</span> postStart <span class="token operator">+</span> leftSize<span class="token punctuation">,</span> postEnd <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="889-根据前序和后序遍历构造二叉树"><a href="#889-根据前序和后序遍历构造二叉树" class="headerlink" title="889 根据前序和后序遍历构造二叉树"></a>889 根据前序和后序遍历构造二叉树</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220309191702675.png" alt="image-20220309191702675"></p><blockquote><p>和105、106的思路一致，不同之处是退出条件。由前序遍历确定的左子树根节点rootLeft的值可能是rootLeft的右节点的值，此时返回一个新的节点。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment">/** * @param {number[]} preorder * @param {number[]} postorder * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">constructFromPrePost</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">preorder<span class="token punctuation">,</span> postorder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> postorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token parameter">preorder<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> preStart<span class="token punctuation">,</span> preEnd<span class="token punctuation">,</span> postStart<span class="token punctuation">,</span> postEnd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 退出条件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>preStart <span class="token operator">&gt;</span> preEnd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 左子树根结点的右结点？？？</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>preStart <span class="token operator">===</span> preEnd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>preStart<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 确定根节点的值</span>    <span class="token keyword">let</span> rootVal <span class="token operator">=</span> preorder<span class="token punctuation">[</span>preStart<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 确定左子树的长度</span>    <span class="token keyword">let</span> leftVal <span class="token operator">=</span> preorder<span class="token punctuation">[</span>preStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> leftSize <span class="token operator">=</span> postorder<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>leftVal<span class="token punctuation">)</span> <span class="token operator">-</span> postStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 创建根节点</span>    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 递归创建左右子树</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> preStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preStart <span class="token operator">+</span> leftSize<span class="token punctuation">,</span> postStart<span class="token punctuation">,</span> postStart <span class="token operator">+</span> leftSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> preStart <span class="token operator">+</span> leftSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preEnd<span class="token punctuation">,</span> postStart <span class="token operator">+</span> leftSize<span class="token punctuation">,</span> postEnd <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="652-寻找重复的子树"><a href="#652-寻找重复的子树" class="headerlink" title="652 寻找重复的子树"></a>652 寻找重复的子树</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220309191810035.png" alt="image-20220309191810035"></p><blockquote><p>这道题的逻辑处理代码是在<code>后序遍历位置</code>。</p><p>两种解法：</p><ol><li>记录每棵子树的序列和出现的次数，并记录有重复序列时的根节点。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&gt;</span><span class="token comment">/**&gt;* Definition for a binary tree node.&gt;* function TreeNode(val, left, right) {&gt;*     this.val = (val===undefined ? 0 : val)&gt;*     this.left = (left===undefined ? null : left)&gt;*     this.right = (right===undefined ? null : right)&gt;* }&gt;*/</span><span class="token operator">&gt;</span><span class="token comment">/**&gt;* @param {TreeNode} root&gt;* @return {TreeNode[]}&gt;*/</span><span class="token operator">&gt;</span><span class="token keyword">var</span> <span class="token function-variable function">findDuplicateSubtrees</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 记录子树的序列及出现的次数</span> <span class="token keyword">let</span> subTreeSeqAndTimes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录重复的子树根节点</span> <span class="token keyword">let</span> repNodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>     <span class="token comment">// 退出条件</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'#'</span><span class="token punctuation">;</span>     <span class="token comment">// 迭代左右子树</span>     <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 子树序列化</span>     <span class="token keyword">let</span> subTreeSeq <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> right <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>     <span class="token comment">// 在子树的序列化map中找有没有相同的序列，有的话将序列出现的次数赋值给freq</span>     <span class="token keyword">let</span> freq <span class="token operator">=</span> subTreeSeqAndTimes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>subTreeSeq<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">// 判断子树序列是否已经存在，多次重复的序列只存一次根节点</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>freq <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         repNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment">// 给相应的子树序列出现次数加1</span>     subTreeSeqAndTimes<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>subTreeSeq<span class="token punctuation">,</span> freq <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> subTreeSeq<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> repNodes<span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236 二叉树的最近公共祖先"></a>236 二叉树的最近公共祖先</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220326225804966.png" alt="image-20220326225804966"></p><blockquote><ol><li>递归</li><li>迭代法，求p到root的路径与q到root 的路径的第一个交点</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } */</span><span class="token comment">/** * @param {TreeNode} root * @param {TreeNode} p * @param {TreeNode} q * @return {TreeNode} */</span><span class="token comment">/* 递归 */</span><span class="token keyword">var</span> <span class="token function-variable function">lowestCommonAncestor</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 2. 确定递归终止条件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> p <span class="token operator">||</span> root <span class="token operator">===</span> q <span class="token operator">||</span> root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 1. 确定递归函数返回值和参数</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3. 确定单层逻辑</span>    <span class="token comment">// p和q在root的左右节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// p和q都在根节点的右边</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// p和q都在根节点的左边</span>        <span class="token keyword">return</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 整棵树中都没有这里p和q</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } */</span><span class="token comment">/** * @param {TreeNode} root * @param {TreeNode} p * @param {TreeNode} q * @return {TreeNode} */</span><span class="token comment">/* 迭代法 */</span><span class="token keyword">var</span> <span class="token function-variable function">lowestCommonAncestor</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> parentMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录每个结点的父结点</span>    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 用于层序遍历的队列</span>    parentMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 层序遍历，记录每个结点的父结点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>parentMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>parentMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>            parentMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            parentMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> ancestors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存储祖先结点</span>    <span class="token comment">// 找到p的最近公共祖先</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>ancestors<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ancestors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> parentMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 找到与q最近的公共祖先</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>ancestors<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        q <span class="token operator">=</span> parentMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> q<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="技巧总结"><a href="#技巧总结" class="headerlink" title="技巧总结"></a>技巧总结</h3><hr><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p>二叉搜索树是有数值的，<strong>二叉搜索树是一个有序树</strong>。</p><ul><li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li><li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li><li>它的左、右子树也分别为二叉排序树</li></ul><p>二叉搜索树的<code>中序遍历</code>是按<code>升序</code>排列的。</p><hr><h3 id="700-二叉搜索树中的搜索"><a href="#700-二叉搜索树中的搜索" class="headerlink" title="700 二叉搜索树中的搜索"></a>700 二叉搜索树中的搜索</h3><p>给定二叉搜索树（BST）的根节点 root 和一个整数值 val。</p><p>你需要在 BST 中找到节点值等于 val 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 null 。</p><p><strong>示例 1:</strong></p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220518224725.jpeg" style="zoom:50%;"><p>输入：root = [4,2,7,1,3], val = 2<br>输出：[2,1,3]</p><p><strong>示例2:</strong></p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220518224721.jpeg" style="zoom:50%;"><p>输入：root = [4,2,7,1,3], val = 5<br>输出：[]</p><p><strong>提示：</strong></p><p>数中节点数在 [1, 5000] 范围内<br>1 &lt;= Node.val &lt;= 107<br>root 是二叉搜索树<br>1 &lt;= val &lt;= 107</p><blockquote><p>二叉搜索树的中序遍历是有序的（升序），根据BST的这一特点，使用中序遍历，找到根节点或者找到节点时就返回这个节点。</p></blockquote><p>（1）递归</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @param {number} val * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">searchBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> root<span class="token punctuation">.</span>val <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）迭代</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @param {number} val * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">searchBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// BST的特点，搜索一个节点的路径是固定好的，不需要像二叉树那样需要回溯</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98 验证二叉搜索树"></a>98 验证二叉搜索树</h3><p><a href="https://leetcode.cn/problems/validate-binary-search-tree/">leetcode</a></p><blockquote><p>二叉搜索树的中序遍历是有序的（升序），根据BST的这一特点，使用中序遍历，比较当前节点与前一个节点的值。</p><ol><li>递归（设定一个最大值）</li><li>递归（记录当前节点的前一个节点）</li><li>迭代（中序遍历）<code>（统一模板的中序遍历没有实现）</code></li></ol></blockquote><p>（1）递归（设定一个最大值）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {boolean} */</span><span class="token keyword">var</span> <span class="token function-variable function">isValidBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 中序遍历位置---BST的中序遍历是有序的（升序）</span>  <span class="token keyword">let</span> maxVal <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">inorder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 中序遍历是否是升序的，如果不是就返回false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxVal <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      maxVal <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> left <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）递归（记录当前节点的前一个节点）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {boolean} */</span><span class="token keyword">var</span> <span class="token function-variable function">isValidBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 中序遍历位置---BST的中序遍历是有序的（升序）</span>  <span class="token comment">// 如果节点的值非常小，这个时候用左边节点的值来进行比较</span>  <span class="token comment">// let maxVal = -Infinity;</span>  <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">inorder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> pre<span class="token punctuation">.</span>val <span class="token operator">&gt;=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    pre <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> left <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）迭代</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {boolean} */</span><span class="token keyword">var</span> <span class="token function-variable function">isValidBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>  <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>      cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>   <span class="token comment">// 左</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment">// 中</span>      cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> pre<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>      cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span> <span class="token comment">// 右</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="530-二叉搜索树的最小绝对差"><a href="#530-二叉搜索树的最小绝对差" class="headerlink" title="530 二叉搜索树的最小绝对差"></a>530 二叉搜索树的最小绝对差</h3><p>给你一个二叉搜索树的根节点 root ，返回 树中任意两不同节点值之间的最小差值 。</p><p>差值是一个正数，其数值等于两值之差的绝对值。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2021/02/05/bst1.jpg" style="zoom:50%;"><p>输入：root = [4,2,6,1,3]<br>输出：1<br><strong>示例 2：</strong></p><img src="https://assets.leetcode.com/uploads/2021/02/05/bst2.jpg" style="zoom:50%;"><p>输入：root = [1,0,48,null,null,12,49]<br>输出：1</p><p><strong>提示：</strong></p><p>树中节点的数目范围是 [2, 10^4]<br>0 &lt;= Node.val &lt;= 10^5</p><blockquote><p>BST的中序遍历是有序的，最小的差肯定存在于相邻两个节点之差。</p><ol><li>记录中序遍历结果，然后for循环遍历得到最小差；（时间复杂度高）</li><li>在中序遍历过程中，比较前一个节点与当前节点的差，一次遍历得到结果；</li></ol></blockquote><p>（1）中序遍历+for循环</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">getMinimumDifference</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> inorder <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">;</span>  <span class="token comment">// 中序遍历</span>  <span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    inorder<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// console.log(inorder);</span>  <span class="token comment">// 求任意两个节点的最小差值</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> inorder<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）pre和cur比较（递归和迭代）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">getMinimumDifference</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">;</span>  <span class="token comment">// 中序遍历-pre记录前一个节点</span>  <span class="token comment">// 最小差肯定是相邻两个节点的值之差</span>  <span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>val <span class="token operator">-</span> pre<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">getMinimumDifference</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>  <span class="token comment">// 中序遍历-pre记录前一个节点</span>  <span class="token comment">// 最小差肯定是相邻两个节点的值之差</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>      cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span> <span class="token comment">// 左</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 中</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>val <span class="token operator">-</span> pre<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      pre <span class="token operator">=</span> cur<span class="token punctuation">;</span> <span class="token comment">// 记录前一个节点</span>      cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span> <span class="token comment">// 右</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="501-二叉搜索树中的众数"><a href="#501-二叉搜索树中的众数" class="headerlink" title="501 二叉搜索树中的众数"></a>501 二叉搜索树中的众数</h3><p>给你一个含重复值的二叉搜索树（BST）的根节点 root ，找出并返回 BST 中的所有 众数（即，出现频率最高的元素）。</p><p><u>如果树中有不止一个众数，可以按 任意顺序 返回。</u></p><p>假定 BST 满足如下定义：</p><p>结点左子树中所含节点的值 小于等于 当前节点的值<br>结点右子树中所含节点的值 大于等于 当前节点的值<br>左子树和右子树都是二叉搜索树</p><p><strong>示例 1：</strong></p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220520205505.jpeg" style="zoom:50%;"><p>输入：root = [1,null,2,2]<br>输出：[2]<br><strong>示例 2：</strong></p><p>输入：root = [0]<br>输出：[0]</p><p><strong>提示：</strong></p><p>树中节点的数目在范围 [1, 104] 内<br>-10^5 &lt;= Node.val &lt;= 10^5</p><blockquote><p>出现频率次数最多的是众数。设最大的出现频率是m，可能有多个节点出现的次数都为m。</p><p>还是利用BST中序遍历有序的特点，统计每个节点出现的次数，把最大次数的节点加入到结果中。</p></blockquote><p>（1）迭代</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @return {number[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">findMode</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 前一个节点</span>  <span class="token keyword">let</span> result<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 结果集</span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 出现次数</span>  <span class="token keyword">let</span> maxCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 最大出现次数</span>  <span class="token comment">// 中序遍历，利用BST中序遍历是有序的特点</span>  <span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 第一个节点</span>      count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val <span class="token operator">===</span> pre<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 与上一个节点数值相同的节点</span>      count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 与上一个节点数值不同的节点</span>      count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 更新上一个节点</span>    pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>    <span class="token comment">// 判断该节点出现的频率是否是最大频率</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> maxCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> maxCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// 如果当前节点的频率大于最大频率，更新最大频率，并将之前的result清空，放入当前最大频率的节点</span>      maxCount <span class="token operator">=</span> count<span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// return ;</span>  <span class="token punctuation">}</span>  <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="236-二叉树的最近公共祖先-1"><a href="#236-二叉树的最近公共祖先-1" class="headerlink" title="236 二叉树的最近公共祖先"></a>236 二叉树的最近公共祖先</h3><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p><strong>示例 1：</strong></p><p><img src="D:\Users\superlee\Pictures\temp\binarytree.png"></p><p>输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1<br>输出：3<br>解释：节点 5 和节点 1 的最近公共祖先是节点 3 。<br><strong>示例 2：</strong></p><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220520210502.png"></p><p>输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4<br>输出：5<br>解释：节点 5 和节点 4 的最近公共祖先是节点 5 。因为根据定义最近公共祖先节点可以为节点本身。<br><strong>示例 3：</strong></p><p>输入：root = [1,2], p = 1, q = 2<br>输出：1</p><p><strong>提示：</strong></p><ul><li>树中节点数目在范围 [2, 105] 内。</li><li>-109 &lt;= Node.val &lt;= 109</li><li>所有 Node.val 互不相同 。</li><li>p != q</li><li>p 和 q 均存在于给定的二叉树中。</li></ul><blockquote><p>两个节点的最近公共祖先分为两种情况：</p><p>（1）两个节点分布在某个节点的两侧，这该节点是最近公共祖先；</p><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220520211018.png" alt="binarytree1"></p><p>（2）两个节点在同侧，则最上层的节点是最近公共祖先。</p><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220520211536.png" alt="binarytree2"></p></blockquote><p>（1）递归</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @param {TreeNode} p * @param {TreeNode} q * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">lowestCommonAncestor</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 2. 确定递归终止条件（找到p或q就返回）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> p <span class="token operator">||</span> root <span class="token operator">===</span> q <span class="token operator">||</span> root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 1. 确定递归函数返回值和参数（后序）</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3. 确定单层逻辑</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// p和q在两侧，返回此时的根节点</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// p和q在同侧，则最上面的节点是最近公共祖先</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）迭代（两个节点到根节点的路径的第一个交点，用map存储每个节点的父节点，然后找到p的所有祖先ancestors ，再从ancestors 中找离q最近的祖先）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @param {TreeNode} p * @param {TreeNode} q * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">lowestCommonAncestor</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> parentMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录每个结点的父结点</span>    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 用于层序遍历的队列</span>    parentMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 层序遍历，记录每个结点的父结点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>parentMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>parentMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>            parentMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            parentMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> ancestors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存储祖先结点</span>    <span class="token comment">// 找到p的所有祖先</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>ancestors<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ancestors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> parentMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 找到与p最近的公共祖先</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>ancestors<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        q <span class="token operator">=</span> parentMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> q<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="701-二叉搜索树中的插入操作"><a href="#701-二叉搜索树中的插入操作" class="headerlink" title="701 二叉搜索树中的插入操作"></a>701 二叉搜索树中的插入操作</h3><p>给定二叉搜索树（BST）的根节点 root 和要插入树中的值 value ，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。</p><p>注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 任意有效的结果 。</p><p><strong>示例 1：</strong></p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220523222040.jpeg" style="zoom: 67%;"><p>输入：root = [4,2,7,1,3], val = 5<br>输出：[4,2,7,1,3,5]<br>解释：另一个满足题目要求可以通过的树是：</p><p><strong>示例 2：</strong></p><p>输入：root = [40,20,60,10,30,50,70], val = 25<br>输出：[40,20,60,10,30,50,70,null,null,25]<br><strong>示例 3：</strong></p><p>输入：root = [4,2,7,1,3,null,null,null,null,null,null], val = 5<br>输出：[4,2,7,1,3,5]</p><p><strong>提示：</strong></p><p>树中的节点数将在 [0, 10^4]的范围内。<br>-10^8 &lt;= Node.val &lt;= 10^8<br>所有值 Node.val 是 独一无二 的。<br>-10^8 &lt;= val &lt;= 10^8<br>保证 val 在原始BST中不存在。</p><blockquote><ol><li>在有空位置的时候返回新插入的节点，作为上一层的子节点。（递归有返回值）</li><li>parent记录上一个访问的节点，cur记录当前访问的节点，插入的节点值小于parent.val就添加为parent的左子节点，插入节点的值大于parent.val就添加为parent的右子节点。</li><li>迭代的思路与2一样。</li></ol></blockquote><p>（1）递归有返回值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @param {number} val * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">insertIntoBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 找到空的位置，插入结点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 插入值大于当前结点的值，将插入值插入到当前结点的右子树上</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">// 插入值小于当前结点的值，将插入值插入到当前结点的左子树上</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）递归没有返回值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @param {number} val * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">insertIntoBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> parentNode <span class="token operator">=</span> root<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 前序递归，没有返回值</span>  <span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cur<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> parentNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        parentNode<span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        parentNode<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    parentNode <span class="token operator">=</span> cur<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">traverse</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">traverse</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）迭代法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @param {number} val * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">insertIntoBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 迭代法</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> root<span class="token punctuation">,</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 找到插入的位置</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pre <span class="token operator">=</span> cur<span class="token punctuation">;</span> <span class="token comment">// 记录上一个节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span>  <span class="token punctuation">{</span>      cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 判断插入值与pre的值的大小</span>  <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> pre<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pre<span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> pre<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pre<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="450-删除二叉搜索树中的节点"><a href="#450-删除二叉搜索树中的节点" class="headerlink" title="450 删除二叉搜索树中的节点"></a>450 删除二叉搜索树中的节点</h3><p>给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p><p>一般来说，删除节点可分为两个步骤：</p><p>首先找到需要删除的节点；<br>如果找到了，删除它。</p><p><strong>示例 1:</strong></p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220523222030.jpeg" style="zoom:67%;"><p>输入：root = [5,3,6,2,4,null,7], key = 3<br>输出：[5,4,6,2,null,null,7]<br>解释：给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。<br>一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。<br>另一个正确答案是 [5,2,6,null,4,null,7]。</p><p><strong>示例 2:</strong></p><p>输入: root = [5,3,6,2,4,null,7], key = 0<br>输出: [5,3,6,2,4,null,7]<br>解释: 二叉树不包含值为 0 的节点<br><strong>示例 3:</strong></p><p>输入: root = [], key = 0<br>输出: []</p><p><strong>提示:</strong></p><p>节点数的范围 [0, 104].<br>-10^5 &lt;= Node.val &lt;= 10^5<br>节点值唯一<br>root 是合法的二叉搜索树<br>-10^5 &lt;= key &lt;= 10^5</p><blockquote><p>分为五种情况：</p><p>第一种情况：没有找到要删除的节点，返回null；</p><p>找到了：</p><p>第二种情况：要删除的节点是叶子结点，返回null；</p><p>第三种情况：要删除的节点左子树为空，返回右子节点；</p><p>第四种情况：要删除的节点右子树为空，返回左子节点；</p><p>第五种情况：要删除的节点的左右子树都不为空，把左子树添加到右子树的最左边。</p><p>二叉树删除节点的通用解法：</p><ol><li>交换要删除节点的值和右子树最左边的节点的值；</li><li>第二次访问到要删除节点（步骤一中交换的值），返回null给父节点（删除该节点）。</li></ol></blockquote><p>（1）二叉搜索树的递归解法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @param {number} key * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">deleteNode</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 没找到值为key的节点</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 找到值为key的节点</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 第一种情况</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 第二种情况</span>      <span class="token keyword">return</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 第三种情况</span>      <span class="token keyword">return</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 第四种情况</span>      <span class="token keyword">let</span> cur <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      cur<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>      <span class="token keyword">return</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 上一层的root接住返回值</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&gt;</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）二叉树删除的通用解法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {TreeNode} root * @param {number} key * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">deleteNode</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 二叉树删除节点的通用写法</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span> <span class="token comment">// 第二次处理，返回的是null</span>    <span class="token punctuation">}</span>        <span class="token comment">// 第一次处理，交换值</span>    <span class="token keyword">let</span> cur <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>      cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">[</span>root<span class="token punctuation">.</span>val<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment">// 接住下层节点返回的值</span>  root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="二叉树插入，删除的小结"><a href="#二叉树插入，删除的小结" class="headerlink" title="二叉树插入，删除的小结"></a>二叉树插入，删除的小结</h3><p>插入操作和删除操作的递归写法中都用到了一种写法：返回一个值，然后上一层的节点接住这个值。</p><hr><h3 id="230-二叉搜索树中第K小的元素"><a href="#230-二叉搜索树中第K小的元素" class="headerlink" title="230 二叉搜索树中第K小的元素"></a>230 <strong>二叉搜索树中第K小的元素</strong></h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220309191849669.png" alt="image-20220309191849669"></p><blockquote><p>二叉搜索树（Binary Search Tree，BST），BST 的中序遍历结果是有序的（升序）。这道题的逻辑代码在中序遍历位置，从中序遍历结果中找到第k小的元素，此时的时间复杂度为O(N)。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment">/** * @param {TreeNode} root * @param {number} k * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">kthSmallest</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/* BST的中序遍历结果是从小到大排列的 */</span>    <span class="token comment">// 记录结果</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 当前元素的排名</span>    <span class="token keyword">let</span> currentRank <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">select</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">// 退出条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token function">select</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 中序遍历位置</span>        currentRank<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 找到第K个最小元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentRank <span class="token operator">===</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">select</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">select</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优化：根据BST的定义，结点的左子树小，右子树大。给每个节点添加一个额外信息，自己的排名m，每次搜索的时候比较k与m的大小，如果k&lt;m就去当前结点的左子树去搜索k；如果k&gt;m就去右子树搜索k。</p><p>优化后的时间复杂度为O(logN)。</p></blockquote><h3 id="538-1038-把二叉搜索树转换为累加树"><a href="#538-1038-把二叉搜索树转换为累加树" class="headerlink" title="538 1038 把二叉搜索树转换为累加树"></a>538 1038 <strong>把二叉搜索树转换为累加树</strong></h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220309191923393.png" alt="image-20220309191923393"></p><blockquote><p>BST的中序遍历结果性质很重要。并且，由于是中序遍历，所以在对根节点做操作时，逻辑处理代码是在<code>中序遍历位置</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">convertBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 记录累加和</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token parameter">root</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 退出条件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 迭代右子树</span>  <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 中序遍历位置</span>  sum <span class="token operator">+=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>  root<span class="token punctuation">.</span>val <span class="token operator">=</span> sum<span class="token punctuation">;</span>  <span class="token comment">// 迭代左子树</span>  <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="96-不同的二叉搜索树"><a href="#96-不同的二叉搜索树" class="headerlink" title="96 不同的二叉搜索树"></a>96 <strong>不同的二叉搜索树</strong></h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220309192016211.png" alt="image-20220309192016211"></p><blockquote><p>穷举+递归的解法</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number} n * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">numTrees</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 穷举不同的BST</span><span class="token comment">/*** @param {number} low 最小的结点值* @param {number} hight 最大的结点值*/</span><span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token parameter">low<span class="token punctuation">,</span> hight</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 退出条件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&gt;</span> hight<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 保存不同的BST个数的变量</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 穷举BST的个数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> low<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> hight<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// i作为根结点的左子树中BST的组合个数</span>        <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// BST的个数=根节点左子树BST组合个数*根节点右子树BST组合个数</span>        result <span class="token operator">+=</span> left <span class="token operator">*</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="95-不同的二叉搜索树-II"><a href="#95-不同的二叉搜索树-II" class="headerlink" title="95 不同的二叉搜索树 II"></a>95 <strong>不同的二叉搜索树 II</strong></h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220309192041794.png" alt="image-20220309192041794"></p><blockquote><p>找到不同BST的组合</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment">/** * @param {number} n * @return {TreeNode[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">generateTrees</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token parameter">low<span class="token punctuation">,</span> high</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 此时没有数字，直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&gt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 只有一个数字，将这个数字作为根结点，然后加入结果列表中</span>    <span class="token comment">// if (low === high) {</span>    <span class="token comment">//     let root = new TreeNode(low);</span>    <span class="token comment">//     result.push(root);</span>    <span class="token comment">//     return result;</span>    <span class="token comment">// }</span>    <span class="token comment">// 此时，将(low, high)中的所有数字都作为根结点，然后递归得到每一种组合</span>    <span class="token comment">// 遍历每种可能</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> low<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> high<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 根节点的左子树构成的BSTs</span>        <span class="token keyword">let</span> leftBSTs <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 根结点的右子树构成的BSTs</span>        <span class="token keyword">let</span> rightBSTs <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> letfBST <span class="token keyword">of</span> leftBSTs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> rightBST <span class="token keyword">of</span> rightBSTs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 左BST和右BST接到根节点上</span>                <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                root<span class="token punctuation">.</span>left <span class="token operator">=</span> letfBST<span class="token punctuation">;</span>                root<span class="token punctuation">.</span>right <span class="token operator">=</span> rightBST<span class="token punctuation">;</span>                result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1373-二叉搜索子树的最大键值和"><a href="#1373-二叉搜索子树的最大键值和" class="headerlink" title="1373. 二叉搜索子树的最大键值和"></a>1373. 二叉搜索子树的最大键值和</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220310152511647.png" alt="image-20220310152511647"></p><blockquote><p>这道题的常规解题思路逻辑很清晰，但是算法复杂度高，递归嵌套递归，有空去实现一下，巩固基础。</p><p>优化的算法是后序遍历，借助一个额外的函数，通过一次递归得到根结点需要的数据。</p><p>对递归的理解越来越懵了，这是咋回事，要回头总结！！！</p><p><font color="red">这个题还没吃透。</font></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 后序遍历 */</span><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val, left, right) { *     this.val = (val===undefined ? 0 : val) *     this.left = (left===undefined ? null : left) *     this.right = (right===undefined ? null : right) * } */</span><span class="token comment">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">maxSumBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 全部变量，记录最大值</span>    <span class="token keyword">let</span> maxSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">/*** 返回一个数组，记录根节点操作需要的信息*  */</span>    <span class="token keyword">function</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// base case</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">,</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 后序遍历位置 */</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断以root为根的二叉树是不是BST</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> left<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">// 这里大小判断是因为空结点返回的数组中的值的影响</span>            <span class="token comment">// 左子树的最小值</span>            result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 右子树的最大值</span>            result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 求和</span>            result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> right<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            maxSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxSum<span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 以root为根的二叉树不是BST</span>            result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> maxSum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="297-二叉树的序列化与反序列化"><a href="#297-二叉树的序列化与反序列化" class="headerlink" title="297  二叉树的序列化与反序列化"></a>297  二叉树的序列化与反序列化</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220310200515590.png" alt="image-20220310200515590"></p><blockquote><p>本质：二叉树的遍历和恢复。</p><p><font color="red">这个题还没吃透。</font></p></blockquote><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } */</span><span class="token comment">/** * Encodes a tree to a single string. * * @param {TreeNode} root * @return {string} */</span><span class="token keyword">var</span> <span class="token function-variable function">serialize</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 定义在函数外面会出问题</span>    <span class="token keyword">let</span> sequence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">serializeHelper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">/* 前序遍历 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sequence<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">'#'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                sequence<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serializeHelper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serializeHelper</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">serializeHelper</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sequence<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * Decodes your encoded data to tree. * * @param {string} data * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">deserialize</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">===</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 这里必须返回null，返回空结点通不过</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> nodes <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token function-variable function">deserializeHelper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nodes</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nodes<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> firstVal <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstVal <span class="token operator">===</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>firstVal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">deserializeHelper</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deserializeHelper</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">deserializeHelper</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * Your functions will be called as such: * deserialize(serialize(root)); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } */</span><span class="token comment">/** * Encodes a tree to a single string. * * @param {TreeNode} root * @return {string} */</span><span class="token keyword">var</span> <span class="token function-variable function">serialize</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> sequence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token parameter">root</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sequence<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 后序遍历</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        sequence<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sequence<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * Decodes your encoded data to tree. * * @param {string} data * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">deserialize</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> nodes <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">deTraverse</span> <span class="token operator">=</span> <span class="token parameter">nodes</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        lastVal <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastVal <span class="token operator">===</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>lastVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deTraverse</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">deTraverse</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token function">deTraverse</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * Your functions will be called as such: * deserialize(serialize(root)); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } */</span><span class="token comment">/** * Encodes a tree to a single string. * * @param {TreeNode} root * @return {string} */</span><span class="token keyword">var</span> <span class="token function-variable function">serialize</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> sequence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sequence<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sequence<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 定义一个队列存放当前结点的非空左右子树</span>    <span class="token keyword">let</span> queue  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 层序遍历</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> currentNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sequence<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sequence<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sequence<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * Decodes your encoded data to tree. * * @param {string} data * @return {TreeNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">deserialize</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// console.log(data);</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>data <span class="token operator">===</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> nodes <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 二叉树的根结点</span>    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 队列中都存放非空的根结点</span>    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 层序遍历</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 从队列中出队一个根结点</span>        <span class="token keyword">let</span> parentNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 父结点对应的左孩子的值在父结点右边第一个，然后i（当做指针）往后移动一个位置，指向父结点的右孩子的值</span>        <span class="token keyword">let</span> left <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!=</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            parentNode<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将非空结点入队</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>parentNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            parentNode<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token comment">// 指针i向后移动到下一个结点</span>        <span class="token keyword">let</span> right <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">!=</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            parentNode<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>parentNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            parentNode<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * Your functions will be called as such: * deserialize(serialize(root)); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="技巧总结-1"><a href="#技巧总结-1" class="headerlink" title="技巧总结"></a>技巧总结</h3><hr><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203 移除链表元素"></a>203 移除链表元素</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220312205545154.png" alt="image-20220312205545154"></p><blockquote><ol><li>直接在链表上操作</li><li>虚拟头节点</li></ol></blockquote><p><strong>直接在原链表上操作</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment">/** * @param {ListNode} head * @param {number} val * @return {ListNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">removeElements</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 链表中的所有元素都要删除</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>val <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 链表为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 此时说明不再删头节点了</span>    <span class="token comment">// 指向前一个节点</span>    <span class="token keyword">let</span> pre <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// 指向当前的节点</span>    <span class="token keyword">let</span> cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 指向下一个节点</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>虚拟头节点</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment">/** * @param {ListNode} head * @param {number} val * @return {ListNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">removeElements</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 定义一个虚拟头节点</span>    <span class="token keyword">let</span> dummyNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定义一个指针指向当前节点</span>    <span class="token keyword">let</span> cur <span class="token operator">=</span> dummyNode<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 删除下一个节点</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 指针指向下一个节点</span>         cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707 设计链表"></a>707 设计链表</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220315235347.png" alt="image-20220315235340054"></p><blockquote><p>对链表的增删查改，是对链表操作的综合考察。</p><p>细节上的问题：</p><ol><li>头节点同时是尾节点的情况；</li><li>size什么时候加和减，加了几次；</li><li>删除index位置节点容易出错；</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** 定义节点*/</span><span class="token keyword">class</span> <span class="token class-name">LinkNode</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*** 单链表，存储头节点和尾节点以及节点数量*/</span><span class="token keyword">var</span> <span class="token function-variable function">MyLinkedList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_tail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * 获取链表index位置的节点 */</span><span class="token class-name">MyLinkedList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getNode</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 创建虚拟头节点</span>    <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">--</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// console.log(cur);</span>    <span class="token keyword">return</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/**  * @param {number} index * @return {number} */</span><span class="token class-name">MyLinkedList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// console.log(index);</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/**  * @param {number} val * @return {void} */</span><span class="token class-name">MyLinkedList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">addAtHead</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkNode</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_head <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 如果还没有添加尾节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_tail <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/**  * @param {number} val * @return {void} */</span><span class="token class-name">MyLinkedList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">addAtTail</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkNode</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果尾节点不为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_tail<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_tail <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果尾节点为空，则头节点也为空，此时还没有添加节点</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_tail <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_head <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/**  * @param {number} index  * @param {number} val * @return {void} */</span><span class="token class-name">MyLinkedList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">addAtIndex</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addAtHead</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addAtTail</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> preNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span>index <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkNode</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/**  * @param {number} index * @return {void} */</span><span class="token class-name">MyLinkedList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">deleteAtIndex</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// index有效</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment">// 如果头节点同时也是尾节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_tail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> preNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        preNode<span class="token punctuation">.</span>next <span class="token operator">=</span> preNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_tail <span class="token operator">=</span> preNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 删完之后size再减</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_size<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * Your MyLinkedList object will be instantiated and called as such: * var obj = new MyLinkedList() * var param_1 = obj.get(index) * obj.addAtHead(val) * obj.addAtTail(val) * obj.addAtIndex(index,val) * obj.deleteAtIndex(index) */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206 反转链表"></a>206 反转链表</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220315235732.png" alt="image-20220315235731928"></p><blockquote><ol><li>双指针法<br> 用中间节点temp保存cur的next节点</li><li>与双指针相同思路的递归</li><li>递归，从后往前翻转</li></ol><ul><li>难以理解，很考察对递归的理解程度；</li><li>👉<a href="https://leetcode-cn.com/problems/reverse-linked-list/solution/dong-hua-yan-shi-206-fan-zhuan-lian-biao-by-user74/">动画演示+多种解法 206. 反转链表 - 反转链表 - 力扣（LeetCode） (leetcode-cn.com)</a></li></ul></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment">/** 1. 双指针法 * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment">// 改变next方向</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>        <span class="token comment">// pre往后移动</span>        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token comment">// cur往后移动</span>        cur <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pre<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**  * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment">/**  * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">traverse1</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 3. 与双指针相同思路的递归</span><span class="token keyword">function</span> <span class="token function">traverse1</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token keyword">let</span> temp <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">traverse1</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment">/** 3. 递归，从后往前翻转 * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// return traverse1(null, head);</span>    <span class="token keyword">return</span> <span class="token function">traverse2</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 从后往前翻转（遍历完再翻转）</span><span class="token keyword">function</span> <span class="token function">traverse2</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 递归调用</span>    <span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token function">traverse2</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 翻转头节点和第二个节点的方向</span>    head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> last<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a>24. 两两交换链表中的节点</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220316000349.png" alt="image-20220316000349733"></p><blockquote><p>画图，按照交换步骤组织代码逻辑</p><p>虚拟头节点法</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">swapPairs</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> dummyNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> cur <span class="token operator">=</span> dummyNode<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> temp1 <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">let</span> temp2 <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment">// 步骤一</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment">// 步骤二</span>        cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> temp1<span class="token punctuation">;</span>        <span class="token comment">// 步骤三</span>        cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> temp2<span class="token punctuation">;</span>        <span class="token comment">// cur向后移动两个节点</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a>19. 删除链表的倒数第 N 个结点</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220316000540.png" alt="image-20220316000540652"></p><blockquote><p>快慢指针+虚拟头节点（用了两次循环）</p><p>n:  要删除的倒数第n个节点；</p><p>L：链表的长度</p><ol><li>fast指针和slow指针首先指向dummy node;</li><li>fast指针移动n+1个节点；</li><li>slow指针移动L-n个节点，指向倒数第n个节点的前一个节点。（这里快慢指针一起移动，fast指针指向null时，停止移动）</li><li>删除slow.next = slow.next.next;</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for singly-linked list. * function ListNode(val, next) { *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * } */</span><span class="token comment">/** * @param {ListNode} head * @param {number} n * @return {ListNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">removeNthFromEnd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建虚拟头节点</span>    <span class="token keyword">let</span> dummyNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义双指针</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> slow <span class="token operator">=</span> dummyNode<span class="token punctuation">;</span>    <span class="token comment">// 1. fast移动n+1个节点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">&amp;&amp;</span> fast <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment">// slow移动的节点数量是：L+1-(n+1)=L-n, L表示链表长度</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 2. fast继续移动，直至指向null</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment">// 3. slow跟fast一起移动，指向待删除节点的前一个节点</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 删除倒数第n个节点</span>    slow<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160. 相交链表"></a>160. 相交链表</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220316000727.png" alt="image-20220316000727610"></p><blockquote><p>lenA: 链表A的长度；</p><p>lenB: 链表B的长度；</p><ol><li>定义一个获取链表长度的辅助函数；</li><li>curA, curB分别指向headA和headB；</li><li>指定A为最长的链表，如果不是就交换；</li><li>curA移动(lenA -lenB)个节点，与curB对齐；</li><li>curA与curB同时移动，只要有curA===curB，退出循环，返回curA；</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment">/** * @param {ListNode} headA * @param {ListNode} headB * @return {ListNode} * 如果链表A和B相交，则从相交节点开始，后面的节点位置是对齐的 */</span><span class="token keyword">var</span> <span class="token function-variable function">getIntersectionNode</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">headA<span class="token punctuation">,</span> headB</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 定义指向当前节点的指针</span>    <span class="token keyword">let</span> curA <span class="token operator">=</span> headA<span class="token punctuation">;</span>    <span class="token keyword">let</span> curB <span class="token operator">=</span> headB<span class="token punctuation">;</span>    <span class="token keyword">let</span> lenA <span class="token operator">=</span> lenB <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 1. 获取链表长度</span>    lenA <span class="token operator">=</span> <span class="token function">getListLength</span><span class="token punctuation">(</span>curA<span class="token punctuation">)</span><span class="token punctuation">;</span>    lenB <span class="token operator">=</span> <span class="token function">getListLength</span><span class="token punctuation">(</span>curB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 比较链表A和B的长度，始终让A为最长的链表</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lenA <span class="token operator">&lt;</span> lenB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>curA<span class="token punctuation">,</span> curB<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>curB<span class="token punctuation">,</span> curA<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">[</span>lenA<span class="token punctuation">,</span> lenB<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>lenB<span class="token punctuation">,</span> lenA<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> gap <span class="token operator">=</span> lenA <span class="token operator">-</span> lenB<span class="token punctuation">;</span>    <span class="token comment">// 3. 移动curA，与curB的位置对齐</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>gap<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        curA <span class="token operator">=</span> curA<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 4. 同时移动curA和curB并比较是否相交</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>curA <span class="token operator">&amp;&amp;</span> curA <span class="token operator">!==</span> curB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        curA <span class="token operator">=</span> curA<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        curB <span class="token operator">=</span> curB<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> curA<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getListLength</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        len<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a>142. 环形链表 II</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220316000852.png" alt="image-20220316000852544"></p><blockquote><p>快慢指针法</p><ol><li>先判断链表有没有环<ul><li>定义快慢指针fast和slow分别指向头节点；</li><li>fast指针每次移动2步，slow指针移动一步，如果相遇，则说明有环；如果没有环就返回null。</li></ul></li><li>找到了相遇的节点。定义两个指针index1和index2，index1指向头节点，index2指向相遇的节点，然后index1和index2同时移动，步长都为1，当index1===index2时，此时两个指针指向的节点就是环的入口。</li></ol></blockquote><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/QQ%E5%9B%BE%E7%89%8720220401151358.png" alt="QQ图片20220401151358"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment">/** * @param {ListNode} head * @return {ListNode} */</span><span class="token keyword">var</span> <span class="token function-variable function">detectCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**    快慢指针法     */</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 1. fast指针每次移动两个节点，slow指针每次移动一个节点</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment">// 2. （判断是否有环）当fast与slow相遇时，再次定义两个指针，index1从相遇的节点出发，index2从头节点出发</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">===</span> fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> index1 <span class="token operator">=</span> fast<span class="token punctuation">;</span>            <span class="token keyword">let</span> index2 <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token comment">// 3. 当index1和index2相遇时，此时所在的节点就是环的入口节点</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>index1 <span class="token operator">!==</span> index2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                index1 <span class="token operator">=</span> index1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                index2 <span class="token operator">=</span> index2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> index1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 3. 没有找到环</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="技巧总结-2"><a href="#技巧总结-2" class="headerlink" title="技巧总结"></a>技巧总结</h3><ol><li>虚拟头节点—在需要返回操作后的头节点时常用，不用管头节点的边界问题；<ul><li>203 移除链表元素；</li></ul></li><li>双指针—同时移动；<ul><li>206 翻转链表</li><li>24 两两交换链表中的节点</li><li>160 相交链表</li></ul></li><li>快慢指针—fast和slow；<ul><li>判断有没有环（fast每次移动2，slow移动1）；</li><li>删除倒数第n个节点，fast先移动n+1个节点，然后slow和fast一起移动，直到fast指向null，此时删除slow.next；</li><li>142 环形链表II</li></ul></li></ol><hr><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><ol><li>704 二分查找</li><li>35 搜索插入位置</li><li>34 在排序数组中查找元素的第一个和最后一个位置</li><li>27 移除元素</li><li>209 长度最小的子数组</li><li>904 水果成篮</li><li>76 最小覆盖子串</li><li>59 螺旋矩阵</li><li>54 螺旋矩阵</li></ol></blockquote><h3 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704 二分查找"></a>704 二分查找</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220316001121.png" alt="image-20220316001121528"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} nums * @param {number} target * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">search</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**        闭合区间[left, right]     */</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// JS中除不尽的话不会自动舍出小数点，调用Math.floor</span>        <span class="token keyword">let</span> middle <span class="token operator">=</span> left <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// console.log(middle);</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            right <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> middle<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35 搜索插入位置"></a>35 搜索插入位置</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220316001306.png" alt="image-20220316001306430"></p><blockquote><ol><li>二分查找法，注意返回值处理的4种插值情况。</li><li>暴力解法—循环</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} nums * @param {number} target * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">searchInsert</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> middle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        middle <span class="token operator">=</span> left <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            right <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> middle<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} nums * @param {number} target * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">searchInsert</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/**            这里处理三种情况：            1. 插入位置在所有元素之前            2. 插入元素的数组中的值            3. 插入元素到数组中         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34 在排序数组中查找元素的第一个和最后一个位置"></a>34 在排序数组中查找元素的第一个和最后一个位置</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220316001426.png" alt="image-20220316001426035"></p><blockquote><ol><li>分别找左边界，右边界。(最简单的思路—定义两个分别找左右边界的辅助函数)<br> 难点在找左右边界时，如何确定最左边或最右边的target的索引。</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} nums * @param {number} target * @return {number[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">searchRange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// target不在数组内</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>nums<span class="token punctuation">.</span>length <span class="token operator">||</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> target <span class="token operator">||</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token function">getLeftMargin</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token function">getRightMargin</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>start<span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/* 找target在数组nums中的左边界 */</span><span class="token keyword">function</span> <span class="token function">getLeftMargin</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> middle <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关键代码，即使找到了target在数组中的位置，也让high往左移动，而low不动</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">===</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            high <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            high <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            low <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> low<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">/* 找target在数组nums中的右边界 */</span><span class="token keyword">function</span> <span class="token function">getRightMargin</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> middle <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关键代码，即使找到了target在数组中的位置，也让low往右移动，而high不动</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">===</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            low <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            low <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            high <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> high<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220316230955.png" alt="image-20220316230947997"></p><blockquote><p>快慢指针法</p><p>快慢指针同时移动，遇到要删除元素时，快指针继续往前移动，slow指针不动。之后就相当于要删除元素之后的元素往前移动一位，将要删除的元素覆盖掉。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} nums * @param {number} val * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">removeElement</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/* 快慢指针 */</span>    <span class="token keyword">let</span> slowIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> fastIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> fastIndex <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> fastIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fastIndex<span class="token punctuation">]</span> <span class="token operator">!==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>slowIndex<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fastIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            slowIndex<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slowIndex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209 长度最小的子数组"></a>209 长度最小的子数组</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220316231340.png" alt="image-20220316231340710"></p><blockquote><ol><li>暴力解法，双循环<br> 不断从子数组中寻找满足条件的长度最小的子数组，找到满足条件的就break，从下一个子数组中找，直到退出循环。</li><li>滑动窗口<br> 这个解法太妙了，直接把时间复杂度降低一个量级</li></ol><ul><li>确定左边界，右边界</li><li>左边界移动，更新窗口内的值；</li><li>右边界移动，更新窗口内的值。</li></ul></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number} target * @param {number[]} nums * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">minSubArrayLen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/* 暴力解法 */</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> subLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 子数组的长度</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 子数组元素的和</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 满足条件，求出此时的子数组长度，然后与result比较</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                subLength <span class="token operator">=</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>subLength <span class="token operator">&lt;</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    result <span class="token operator">=</span> subLength<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 只要找到了满足条件的子数组，让子数组长度与result对比并重新给result赋值后，跳出内循环，开始从下一个子数组中寻找</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">===</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number} target * @param {number[]} nums * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">minSubArrayLen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/* 滑动窗口解法 */</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> subLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 滑动窗口的长度</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 滑动窗口内元素的和</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 滑动窗口的左边界</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 满足条件，求出此时的子数组长度，然后与result比较</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                subLength <span class="token operator">=</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> subLength <span class="token operator">&lt;</span> result <span class="token operator">?</span> subLength <span class="token operator">:</span> result<span class="token punctuation">;</span>                <span class="token comment">/**                滑动窗口的核心代码，滑动窗口内的值减去左边界的值，左边界i向右移动一个位置，右边界向前移动，重复这个过程                 */</span>                sum <span class="token operator">-=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">===</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="904-水果成篮"><a href="#904-水果成篮" class="headerlink" title="904 水果成篮"></a>904 水果成篮</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220318233929.png" alt="image-20220318233921728"></p><blockquote><p>滑动窗口法<br>使用滑动窗口方法要确定：</p><ol><li>窗口中装的什么—两种不同种类的水果；</li><li>窗口左边界如何移动，什么时候移动；</li><li>窗口右边界如何移动</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} fruits * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">totalFruit</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fruits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 窗口左边界</span>    <span class="token keyword">let</span> fruitWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 滑动窗口，存储每一种水果装入篮中的个数</span>    fruitWindow<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 窗口左边界的水果入篮</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 记录窗口内水果的种类数量</span>    <span class="token keyword">let</span> maxLength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 窗口的最大长度</span>    <span class="token comment">// 外层循环---窗口=右边界移动</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> right <span class="token operator">&lt;</span> fruits<span class="token punctuation">.</span>length<span class="token punctuation">;</span> right<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 窗口内没有存过这种水果，或者这种水果在篮中的个数为0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fruitWindow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> fruitWindow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fruitWindow<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 存过这种水果，直接数量+1</span>            fruitWindow<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> fruitWindow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 当满足篮中水果种类数小于2时，更新最大窗口长度</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxLength <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> maxLength <span class="token operator">?</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> maxLength<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 内部循环，当不满足条件时，左边界向右移动，直到满足条件。</span>        <span class="token comment">// 左边界移动，判断左边界所在位置的水果数量是否为0，为0说明篮中没有这种水果了，count-1</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 左边界处的水果数-1</span>            fruitWindow<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> fruitWindow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 更新count</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fruitWindow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 左边界右移</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxLength<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76 最小覆盖子串"></a>76 最小覆盖子串</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220318234132.png" alt="image-20220318234132461"></p><blockquote><p>滑动窗口<br>左边界，右边界 区间是怎样的<br>窗口在什么时候更新数据，什么时候移动左边界，什么时候更新结果</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {string} s * @param {string} t * @return {string} */</span> <span class="token comment">/* 滑动窗口，左闭右开[left, right)，初始时窗口内没有数据 */</span><span class="token keyword">var</span> <span class="token function-variable function">minWindow</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 左边界</span>    <span class="token keyword">let</span> myWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 滑动窗口</span>    <span class="token keyword">let</span> need <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 将目标子串的中的字符转换成map，存储key: char, value: count(char)</span>    <span class="token keyword">let</span> valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 窗口满足条件的不同字符个数和</span>    <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 最小子串的左边界</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">;</span> <span class="token comment">// 最小子串的长度</span>    <span class="token comment">// need赋值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        need<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> need<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> need<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// console.log(need)</span>    <span class="token comment">// 右边界右移</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> right<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 待移入窗口的字符</span>        <span class="token keyword">let</span> charR <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 更新窗口内数据</span>        <span class="token comment">// charR是否为满足条件的字符</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>charR<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 窗口内右边界指向的字符个数+1</span>            myWindow<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>charR<span class="token punctuation">,</span> myWindow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>charR<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> myWindow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>charR<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 窗口内的charR跟need中的个数一致，valid+1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>charR<span class="token punctuation">]</span> <span class="token operator">===</span> myWindow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>charR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                valid<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 窗口内的字符满足条件，左边界右移</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>valid <span class="token operator">===</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>need<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 待移出窗口的字符</span>            <span class="token keyword">let</span> charL <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 更新结果</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left  <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                start <span class="token operator">=</span> left<span class="token punctuation">;</span>                len <span class="token operator">=</span> right <span class="token operator">-</span> left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>charL<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 相同的字符，就将valid-1</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">[</span>charL<span class="token punctuation">]</span> <span class="token operator">===</span> myWindow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>charL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    valid<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// </span>                myWindow<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>charL<span class="token punctuation">,</span> myWindow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>charL<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      <span class="token comment">// console.log(start, start + len);</span>    <span class="token keyword">return</span> len <span class="token operator">===</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> start <span class="token operator">+</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="59-螺旋矩阵"><a href="#59-螺旋矩阵" class="headerlink" title="59 螺旋矩阵"></a>59 螺旋矩阵</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220318234321.png" alt="image-20220318234321837"></p><blockquote><p>给n赋几个值，然后观察规律。</p><ol><li>得到螺旋数组的过程，这个过程都涉及哪些变量；</li><li>循环的每一条边，保持区间变量一致，即左闭右开</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number} n * @return {number[][]} */</span><span class="token keyword">var</span> <span class="token function-variable function">generateMatrix</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> loopCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 循环的圈数</span>    <span class="token keyword">let</span> startX <span class="token operator">=</span> startY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 循环开始的位置</span>    <span class="token keyword">let</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果n为奇数要手动填充中间位置的值</span>    <span class="token keyword">let</span> offset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 控制每一圈循环的边界</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 控制数值增加</span>    <span class="token comment">// console.log(loopCount, middle);</span>        <span class="token comment">// JavaScript创建二维数组的一种方式</span>    <span class="token keyword">let</span> matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// console.log(matrix);</span>        <span class="token keyword">let</span> i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>loopCount<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">=</span> startX<span class="token punctuation">;</span>        j <span class="token operator">=</span> startY<span class="token punctuation">;</span>        <span class="token comment">// 上方从右到左</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> offset<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 右方从上到下</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> offset<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 下方从右到左</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> startY<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 左方从下到上</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> startX<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 循环一圈了，更新下一圈的开始位置</span>        startX<span class="token operator">++</span><span class="token punctuation">;</span>        startY<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 更新控制右边界的变量</span>        offset<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 奇数填充中间位置的值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        matrix<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">=</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> matrix<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="54-螺旋矩阵"><a href="#54-螺旋矩阵" class="headerlink" title="54 螺旋矩阵"></a>54 螺旋矩阵</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20220318234440.png" alt="image-20220318234440564"></p><blockquote><p>循环的区间–左开右闭<br>当m===n时，正常<br>当m !== n时{<br>循环的次数由小的那个数决定；<br>循环里面要判断边界，是否还需要剩下两个方向的遍历。<br>}</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[][]} matrix * @return {number[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">spiralOrder</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">matrix</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> m <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> startX <span class="token operator">=</span> startY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> loopCount <span class="token operator">=</span> m <span class="token operator">&lt;</span> n <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>m <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>m <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> offset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// console.log(m, n);</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        matrix<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>loopCount<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">=</span> startX<span class="token punctuation">;</span>        j <span class="token operator">=</span> startY<span class="token punctuation">;</span>        <span class="token comment">// 上方从左到右</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> offset<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 右方从上到下</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">-</span> offset<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> offset <span class="token operator">===</span> startY<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> offset <span class="token operator">===</span> startX<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token comment">// 下方从右到左</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> startY<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 左边从下到上</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> startX<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 走完一圈，更新开始循环的位置</span>        startX<span class="token operator">++</span><span class="token punctuation">;</span>        startY<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// offset更新（控制边界）</span>        offset<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">===</span> n <span class="token operator">&amp;&amp;</span> m <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="技巧总结-3"><a href="#技巧总结-3" class="headerlink" title="技巧总结"></a>技巧总结</h3><ol><li><p> 二分查找—<code>middle = left + Math.floor((right - left) / 2), 闭合区间[left, right]</code>;</p></li><li><p>快慢指针—初始时，fast和slow指向同一个位置，然后同时移动，满足某个条件时，fast指针继续移动，slow不动。</p><ul><li>27 移除元素</li></ul></li><li><p>滑动窗口—窗口内装什么值，右边界什么时候更新窗口的值，左边界什么时候移动，怎么更新窗口内的值；</p><ul><li><p>209 长度最小的子数组</p></li><li><p>904 水果成篮</p></li><li><p>76 最小覆盖子串</p></li></ul></li><li><p>螺旋矩阵—保持区间左闭右开，四个方向；</p><ul><li>当m×n的矩阵，m=== n时是最简单的，当m !== n时，在循环内部判断特殊情况；</li><li>涉及的变量：<ul><li>middle（当m===n且m,n是奇数时，单独处理）</li><li>loopCount（循环的圈数）</li><li>startX, startY（循环的起点）</li><li>offset（更新边界时用到）</li></ul></li><li>当m === n时，<code>loopCount = Math.floor(n / 2)</code>;</li><li>当m !== n时，<code>loopCount = m &lt; n ? Math.ceil(m / 2) : Math.ceil(n / 2)</code>;</li></ul></li></ol><hr><h2 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h2><h3 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232 用栈实现队列"></a>232 用栈实现队列</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220327132214866.png" alt="image-20220327132214866"></p><blockquote><ol><li>用两个栈模拟队列，stackA是输入栈，存储输入的数据，stackB是输出栈，用于模拟队列的输出；</li><li>注意pop和peek的代码细节。</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">MyQueue</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stackA <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 输入栈</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stackB <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 输出栈</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/**  * @param {number} x * @return {void} */</span><span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stackA<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">switchStackAAndB</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stackA<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stackB<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stackA<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * @return {number} */</span><span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pop</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stackB<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stackB<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stackA<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">switchStackAAndB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stackB<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * @return {number} */</span><span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">peek</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 输出栈stackB先出队，再入队，这里复用了pop的代码</span>    <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stackB<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * @return {boolean} */</span><span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">empty</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// !(this.stackA.length || this.stackB.length)</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>stackA<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>stackB<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * Your MyQueue object will be instantiated and called as such: * var obj = new MyQueue() * obj.push(x) * var param_2 = obj.pop() * var param_3 = obj.peek() * var param_4 = obj.empty() */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225 用队列实现栈"></a>225 用队列实现栈</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220327132338229.png" alt="image-20220327132338229"></p><blockquote><ol><li><p>JavaScript模拟队列—数组+push+shift</p></li><li><p>一个队列模拟栈</p></li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 两个队列模拟栈 */</span><span class="token keyword">var</span> <span class="token function-variable function">MyStack</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>queueOut <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 输出队列</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>queueBackup <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 备份队列</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/**  * @param {number} x * @return {void} */</span><span class="token class-name">MyStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>queueOut<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * @return {number} */</span><span class="token class-name">MyStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pop</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sizeOut <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queueOut<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> sizeBackup <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sizeOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sizeOut<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 保留queueOut队尾的元素</span>        <span class="token comment">// 将queueOut队尾之前的元素备份到queueBack</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>sizeOut<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>queueBackup<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queueOut<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 队尾出队</span>        value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queueOut<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 备份到queueBack中的元素还原到queueOut中</span>        sizeBackup <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queueBackup<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>sizeBackup<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>queueOut<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queueBackup<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span>         <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * @return {number} */</span><span class="token class-name">MyStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">top</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> topValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>queueOut<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>topValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> topValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * @return {boolean} */</span><span class="token class-name">MyStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">empty</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>queueOut<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * Your MyStack object will be instantiated and called as such: * var obj = new MyStack() * obj.push(x) * var param_2 = obj.pop() * var param_3 = obj.top() * var param_4 = obj.empty() */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 一个队列模拟栈 */</span><span class="token keyword">var</span> <span class="token function-variable function">MyStack</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/**  * @param {number} x * @return {void} */</span><span class="token class-name">MyStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * @return {number} */</span><span class="token class-name">MyStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pop</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 模拟出栈，首先将队尾的元素出队后添加到队尾，然后队尾出队</span>    <span class="token keyword">let</span> size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>size<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * @return {number} */</span><span class="token class-name">MyStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">top</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * @return {boolean} */</span><span class="token class-name">MyStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">empty</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * Your MyStack object will be instantiated and called as such: * var obj = new MyStack() * obj.push(x) * var param_2 = obj.pop() * var param_3 = obj.top() * var param_4 = obj.empty() */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20 有效的括号"></a>20 有效的括号</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220327132557910.png" alt="image-20220327132557910"></p><blockquote><p>用栈来解决对称匹配问题<br>分析不匹配的三种情况，在这三种情况下，出栈入栈的情况</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {string} s * @return {boolean} */</span><span class="token keyword">var</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'['</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'{'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// s[i] === stack.top()</span>            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047 删除字符串中的所有相邻重复项"></a>1047 删除字符串中的所有相邻重复项</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220327132704380.png" alt="image-20220327132704380"></p><blockquote><p>依然是用栈来解决匹配问题</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {string} s * @return {string} */</span><span class="token keyword">var</span> <span class="token function-variable function">removeDuplicates</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> char <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        char <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> char <span class="token operator">!==</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 栈的逆序就是结果，但是JavaScript用数组模拟栈，数组的顺序就是结果</span>    stack<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> result <span class="token operator">+=</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150 逆波兰表达式求值"></a>150 逆波兰表达式求值</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220327132800901.png" alt="image-20220327132800901"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {string[]} tokens * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">evalRPN</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tokens</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> operators <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> num1 <span class="token operator">=</span> num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tokens<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>operators<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            num1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num2 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token operator">:</span>                    result <span class="token operator">=</span> num2 <span class="token operator">+</span> num1<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token operator">:</span>                    result <span class="token operator">=</span> num2 <span class="token operator">-</span> num1<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"*"</span><span class="token operator">:</span>                    result <span class="token operator">=</span> num2 <span class="token operator">*</span> num1<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"/"</span><span class="token operator">:</span>                    <span class="token comment">// 这里不能用floor，floor在商为-0的时候得到的值为-1</span>                    <span class="token comment">// Math.trunc()---保留小数点前的数值</span>                    result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span>num2 <span class="token operator">/</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> result<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239 滑动窗口最大值"></a>239 滑动窗口最大值</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220327132852798.png" alt="image-20220327132852798"></p><blockquote><p>自定义一个单调队列</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} nums * @param {number} k * @return {number[]} */</span><span class="token keyword">function</span> <span class="token function">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 每次弹出的时候，比较当前要弹出的数值是否等于队首元素的数值，如果相等则弹出。</span><span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pop</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> value <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 如果push的数值大于队尾元素的数值，那么就将队尾的数值弹出，直到push的数值小于等于队尾元素的数值为止。</span><span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> value <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 返回队首元素的值---窗口中的最大值</span><span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">front</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token function-variable function">maxSlidingWindow</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> myQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        myQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>myQueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        myQueue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>myQueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><hr><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><blockquote><ol><li>344 反转字符串</li><li>541 反转字符串 II</li></ol></blockquote><h3 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344 反转字符串"></a>344 反转字符串</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220324133418919.png" alt="image-20220324133418919"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {character[]} s * @return {void} Do not return anything, modify s in-place instead. */</span><span class="token comment">/* 双指针法 */</span><span class="token comment">// 注意这里输入的是字符数组</span><span class="token keyword">var</span> <span class="token function-variable function">reverseString</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 数组解构对变量复制---交换两个变量值的简便写法</span>        <span class="token punctuation">[</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        left<span class="token operator">++</span><span class="token punctuation">;</span>        right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="541-反转字符串-II"><a href="#541-反转字符串-II" class="headerlink" title="541 反转字符串 II"></a>541 反转字符串 II</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220324133618189.png" alt="image-20220324133618189"></p><blockquote><p>长度k固定，每次移动2k个位置。<br>不能直接对字符串进行交换字符的操作（无效），应该先将字符串转换成字符数组，对字符数组进行操作。355</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {string} s * @param {number} k * @return {string} */</span><span class="token keyword">var</span> <span class="token function-variable function">reverseStr</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里先将字符串转换为字符数组</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// 每次移动2k个字符</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        left <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token comment">// 题目条件</span>        right <span class="token operator">=</span> i <span class="token operator">+</span> k <span class="token operator">&gt;</span> len <span class="token operator">?</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> i <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">[</span>result<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>result<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><h3 id="77-组合"><a href="#77-组合" class="headerlink" title="77 组合"></a>77 组合</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220326230106884.png" alt="image-20220326230106884"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number} n * @param {number} k * @return {number[][]} */</span><span class="token keyword">var</span> <span class="token function-variable function">combine</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 递归函数的返回值 </span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1. 定义递归函数，确定参数</span>    <span class="token keyword">function</span> <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> startIndex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 2. 确定递归结束条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// JS需要特别注意这里的写法，如果直接将path添加到result中，回溯删除path内元素时会影响result中的值---数组的引用</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 3. for循环横向遍历整个集合，递归子集和</span>        <span class="token comment">/*         * n - (k - path.length) + 1是剪枝优化         * k-path.length是还需要几个数         * n - (k - path.length) + 1表示至少从哪个数开始是合理的         */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> path<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 处理结点</span>            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 递归，控制树的纵向遍历</span>            <span class="token function">backTracking</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 回溯，撤销处理的结点</span>            path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">backTracking</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="216-组合总和-III"><a href="#216-组合总和-III" class="headerlink" title="216 组合总和 III"></a>216 组合总和 III</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220326230302176.png" alt="image-20220326230302176"></p><blockquote><ol><li>不能写成result.push(result)—浅拷贝</li><li>多一个记录path数组和的参数sum</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number} k * @param {number} n * @return {number[][]} */</span><span class="token keyword">var</span> <span class="token function-variable function">combinationSum3</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> startIndex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">-=</span> i<span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17 电话号码的字母组合"></a>17 电话号码的字母组合</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220326230423408.png" alt="image-20220326230423408"></p><blockquote><p>确定递归参数<br>递归结束条件<br>细节处理</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {string} digits * @return {string[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">letterCombinations</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">digits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> num2Letter <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">// 0</span>        <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">// 1</span>        <span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token comment">// 2</span>        <span class="token string">"def"</span><span class="token punctuation">,</span> <span class="token comment">// 3</span>        <span class="token string">"ghi"</span><span class="token punctuation">,</span> <span class="token comment">// 4</span>        <span class="token string">"jkl"</span><span class="token punctuation">,</span> <span class="token comment">// 5</span>        <span class="token string">"mno"</span><span class="token punctuation">,</span> <span class="token comment">// 6</span>        <span class="token string">"pqrs"</span><span class="token punctuation">,</span> <span class="token comment">// 7</span>        <span class="token string">"tuv"</span><span class="token punctuation">,</span> <span class="token comment">// 8</span>        <span class="token string">"wxyz"</span> <span class="token comment">// 9</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">/**     * index: 处理的第几个数字     */</span>    <span class="token keyword">function</span> <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token parameter">digits<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 当处理的数字个数和给出的digits个数相等时，结束递归</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>digits<span class="token punctuation">.</span>length <span class="token operator">===</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> digit <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>digits<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> letters <span class="token operator">=</span> num2Letter<span class="token punctuation">[</span>digit<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> letters<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>letters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>digits <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>digits<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num2Letter<span class="token punctuation">[</span><span class="token function">parseInt</span><span class="token punctuation">(</span>digits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39 组合总和"></a>39 组合总和</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220326230518380.png" alt="image-20220326230518380"></p><blockquote><p>剪枝优化，写在for循环内部</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} candidates * @param {number} target * @return {number[][]} */</span><span class="token keyword">var</span> <span class="token function-variable function">combinationSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">candidates<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token parameter">candidates<span class="token punctuation">,</span> target<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> startIndex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里要用解构</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 当下一层的sum，即sum+candidates[i] &gt; target就退出本次循环，进入下一次循环</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 剪枝优化只能写在这里，不能写在for循环条件判断那里</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以选取重复的元素</span>            sum <span class="token operator">-=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="40-组合总和II"><a href="#40-组合总和II" class="headerlink" title="40 组合总和II"></a>40 组合总和II</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220326230634932.png" alt="image-20220326230634932"></p><blockquote><ol><li>先对数组排序，然后在单层循环里去除重复的组合，没有使用used数组;</li><li>使用used数组</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} candidates * @param {number} target * @return {number[][]} */</span><span class="token keyword">var</span> <span class="token function-variable function">combinationSum2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">candidates<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    candidates <span class="token operator">=</span> candidates<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 去除重复的组合需要对数组中的数字升序排列</span>    <span class="token keyword">const</span> <span class="token function-variable function">backtracking</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> startIndex</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// i &gt; startIndex &amp;&amp; candidates[i - 1] === candidates[i] 去处重复组合的关键代码</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> startIndex <span class="token operator">&amp;&amp;</span> candidates<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sum <span class="token operator">+=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">-=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} candidates * @param {number} target * @return {number[][]} */</span><span class="token keyword">var</span> <span class="token function-variable function">combinationSum2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">candidates<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>candidates<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    candidates <span class="token operator">=</span> candidates<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 去除重复的组合需要对数组中的数字升序排列</span>    <span class="token keyword">const</span> <span class="token function-variable function">backtracking</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> startIndex</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// i &gt; 0 &amp;&amp; candidates[i - 1] === candidates[i] &amp;&amp; used[i - 1] === false 去处重复组合的关键代码</span>            <span class="token comment">// 树的同一层不能使用相同的元素</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> candidates<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> used<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sum <span class="token operator">+=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">-=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="131-分割回文串"><a href="#131-分割回文串" class="headerlink" title="131 分割回文串"></a>131 分割回文串</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220326230829928.png" alt="image-20220326230829928"></p><blockquote><p>回溯，startIndex就是分割线，子串范围[startIndex, i]</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {string} s * @return {string[][]} */</span><span class="token keyword">var</span> <span class="token function-variable function">partition</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">backtracking</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">startIndex</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">// startIndex相当于分割线，分割线到字符串的串尾就返回，此时已经分割好结果了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>startIndex <span class="token operator">&gt;=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 子串的范围是[startIndex, i]</span>            <span class="token keyword">let</span> str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPStr</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isPStr</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!==</span> str<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        left<span class="token operator">++</span><span class="token punctuation">;</span>        right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="93-复原IP地址"><a href="#93-复原IP地址" class="headerlink" title="93 复原IP地址"></a>93 复原IP地址</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220326230940719.png" alt="image-20220326230940719"></p><blockquote><p>注意：</p><ol><li>回溯退出的条件</li><li>单层循环中的逻辑</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {string} s * @return {string[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">restoreIpAddresses</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token function-variable function">backtracking</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">startIndex</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// path内的4个子串都满足条件，最后用"."拼接</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> startIndex <span class="token operator">===</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 这里用substring不行，不知道为什么</span>            <span class="token comment">// substr(satrtIndex, Length) --- 从starIndex开始提取Length个字符</span>           <span class="token keyword">let</span> str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> i <span class="token operator">-</span> startIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">||</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 为什么是直接break？剪枝，不满足条件的可以直接跳过了</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="78-子集"><a href="#78-子集" class="headerlink" title="78 子集"></a>78 子集</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220330111547463.png" alt="image-20220330111547463"></p><blockquote><p>子集，要记录每一个结点的值</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} nums * @return {number[][]} */</span><span class="token keyword">var</span> <span class="token function-variable function">subsets</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">backtracking</span> <span class="token operator">=</span> <span class="token parameter">startIndex</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">// slice()返回一个新的数组，新数组是由begin和end决定的原数组的浅拷贝</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//记录每一个节点的结果。</span>        <span class="token comment">// 这里可以不写退出条件，因为当startIndex大于等于集合长度时，本层循环就结束了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>startIndex <span class="token operator">&gt;=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">backtracking</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="90-子集II"><a href="#90-子集II" class="headerlink" title="90 子集II"></a>90 子集II</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220330111740128.png" alt="image-20220330111740128"></p><blockquote><p>树层去重：</p><ol><li>i &gt; startIndex</li><li>i&gt;0 &amp;&amp; used[i - 1] === false</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* i &gt; startIndex */</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> startIndex <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">continue</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * @param {number[]} nums * @return {number[][]} */</span><span class="token keyword">var</span> <span class="token function-variable function">subsetsWithDup</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">backtracking</span> <span class="token operator">=</span> <span class="token parameter">startIndex</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">// 子集问题，需要存储每个节点的结果</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 同一层的上一个结点used[i - 1]为false</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> used<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="491-递增子序列"><a href="#491-递增子序列" class="headerlink" title="491 递增子序列"></a>491 递增子序列</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220330113032521.png" alt="image-20220330113032521"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} nums * @return {number[][]} */</span><span class="token keyword">var</span> <span class="token function-variable function">findSubsequences</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">backtracking</span> <span class="token operator">=</span> <span class="token parameter">startIndex</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> uset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 用数组来做hash映射</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果进入集合下一个元素小于集合的最后一个元素或者nums[i]在同一个父结点下已经使用过了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> path<span class="token punctuation">[</span>path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>uset<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            uset<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><h3 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46 全排列"></a>46 全排列</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220330112038667.png" alt="image-20220330112038667"></p><blockquote><p>回溯，全排列没有用到startIndex，但是用used数组标记了某个元素是否已经使用。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} nums * @return {number[][]} */</span><span class="token keyword">var</span> <span class="token function-variable function">permute</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 标记用过的元素</span>    <span class="token keyword">const</span> <span class="token function-variable function">backtracking</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="47-全排列II"><a href="#47-全排列II" class="headerlink" title="47 全排列II"></a>47 全排列II</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220330112258378.png" alt="image-20220330112258378"></p><blockquote><p>排列去重—树层去重与树枝去重都可以，但树层去重效率更高（当数组中的元素重复元素较多时）。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} nums * @return {number[][]} */</span><span class="token keyword">var</span> <span class="token function-variable function">permuteUnique</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">backtracking</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 同一树层去重--&gt;((i &gt; 0 &amp;&amp; nums[i - 1] === nums[i]) &amp;&amp; used[i - 1] === false)</span>            <span class="token comment">// used[i]===true --&gt; 全排列</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> used<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">||</span> used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 同一树枝去重--&gt;((i &gt; 0 &amp;&amp; nums[i - 1] === nums[i]) &amp;&amp; used[i - 1] === true)</span>            <span class="token comment">// used[i]===true --&gt; 全排列</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> used<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">||</span> used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h2><h3 id="455-分发饼干"><a href="#455-分发饼干" class="headerlink" title="455 分发饼干"></a>455 分发饼干</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220330112755521.png" alt="image-20220330112755521"></p><blockquote><p>贪心思路，先将两个数组升序排序，然后每次将最大的饼干优先分给胃口最大的孩子。<br>一个for循环就可以了。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} g * @param {number[]} s * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">findContentChildren</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">g<span class="token punctuation">,</span> s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sIndex <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    g<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> g<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sIndex <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>sIndex<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            sIndex<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="376-摆动序列"><a href="#376-摆动序列" class="headerlink" title="376 摆动序列"></a>376 摆动序列</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220330112914457.png" alt="image-20220330112914457"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} nums * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">wiggleMaxLength</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 贪心---局部最优---峰值</span>    <span class="token keyword">let</span> preDiff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 前一对数字的差</span>    <span class="token keyword">let</span> curDiff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 当前这对数字的差</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        curDiff <span class="token operator">=</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>preDiff <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> curDiff <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>preDiff <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> curDiff <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token operator">++</span><span class="token punctuation">;</span>            preDiff <span class="token operator">=</span> curDiff<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><h3 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53 最大子数组和"></a>53 最大子数组和</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/image-20220330113147802.png" alt="image-20220330113147802"></p><blockquote><ol><li>暴力两个for循环</li><li>贪心思想的解法，将时间复杂度降低了一个数量级</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 暴力解法 */</span><span class="token comment">/** * @param {number[]} nums * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> maxSum <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            maxSum <span class="token operator">=</span> sum <span class="token operator">&gt;</span> maxSum <span class="token operator">?</span> sum <span class="token operator">:</span> maxSum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxSum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 贪心思路 */</span><span class="token comment">/** 贪心思路的解法 * @param {number[]} nums * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> maxSum <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span><span class="token punctuation">;</span> <span class="token comment">// 设置最值</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 循环迭代的值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 确定最大和序列的终点</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> maxSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>           maxSum <span class="token operator">=</span> sum<span class="token punctuation">;</span>       <span class="token punctuation">}</span>        <span class="token comment">// 确定最大和序列的起点---sum&lt;=0说明nums[i]是负数，从下一个元素开始找最大和</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxSum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><hr><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><blockquote><p>DP(Dynamic programming): 动态规划</p><p>五部曲：</p><ol><li>确定dp数组及下标含义；</li><li>确定递推公式；</li><li>初始化dp数组</li><li>确定dp数组的遍历方向；</li><li>举例</li></ol></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构(JavaScript实现)</title>
      <link href="/2022/03/16/suan-fa/javascript-suan-fa-yu-shu-ju-jie-gou/"/>
      <url>/2022/03/16/suan-fa/javascript-suan-fa-yu-shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><blockquote><ol><li>冒泡排序</li><li>选择排序</li><li>插入排序</li><li>希尔排序</li><li>归并排序</li><li>快速排序</li></ol><p>References:</p><ul><li><a href="https://www.runoob.com/w3cnote/ten-sorting-algorithm.html">1.0 十大经典排序算法 | 菜鸟教程 (runoob.com)</a></li><li><a href="https://blog.csdn.net/shengshengshiwo/article/details/123482843">Javascript 实现冒泡排序、选择排序、插入排序、归并排序、快速排序、希尔排序、堆排序_极客小生的博客-CSDN博客</a></li><li><a href="https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md">JavaScript 算法与数据结构</a></li><li><a href="https://blog.csdn.net/qq_41219157/article/details/123382826">希尔排序详解</a></li></ul></blockquote><p><img src="https://static.vue-js.com/5c3d7b50-2131-11ec-a752-75723a64e8f5.png" alt="img"></p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>每次交换两个相邻的元素，数组最后是最大的值(或最小的值)。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">bubbleSort</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>每次从数组中找到最小值，然后将最小值跟待排序数组序列的第一个元素交换位置。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 将数组分为两部分：已排序部分和未排序部分。记录未排序部分中最小值或最大值的索引，然后和未排序部分开始位置的数交换位置，放到已排序数组的末尾 */</span><span class="token keyword">const</span> <span class="token function-variable function">selectionSort</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">let</span> minIndex<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 寻找最小的数</span>        minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 将索引i之后的最小值放到之前已排序的序列后面</span>    <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">selectionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>将当前元素   current 之前的序列看作是已排序的序列 arr，然后将当前元素current跟序列arr中的每个元素比较，如果 current 比序列中的元素 arr[index] 小就将arr[index] 往后移动一个位置，最后将 current 插入到空出来的位置。（类似斗地主理牌的顺序）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** 将待排序序列的第一个元素当成一个有序序列，把第二个元素到最后一个元素当成未排序序列。从头到尾扫描，每次将当前元素插入到有序序列的适当位置 * 将当前元素 current 之前的序列看作是已排序的序列 arr，然后将当前元素 current 跟序列 arr 中的每个元素比较，* 如果 current 比序列中的元素 arr[index] 小就将 arr[index] 往后移动一个位置，最后将 current 插入到空出来的位置。（类似斗地主理牌的顺序）*/</span><span class="token keyword">const</span> <span class="token function-variable function">insertionSort</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> preIndex <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// current 的前一个元素</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>preIndex <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span> <span class="token operator">&gt;</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 将 current 之前的比它大的元素往后移动一个位置</span>      arr<span class="token punctuation">[</span>preIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      preIndex<span class="token operator">--</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">// 当 current 比前一个元素大的时候不需要赋值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>preIndex <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">!==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 将 current 插入到空出来的位置</span>      arr<span class="token punctuation">[</span>preIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">insertionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 1. 找基准点，将基准点从原数组中删除； * 2. 遍历原数组，根据元素与基准点大小的关系，将元素存放到 left 或 right 数组中 * （left 存放小于基准点的元素，right 存放大于基准点的元素）； * 3. 递归 left 和 right，并把 left 和 right 合并。 * @param {*} arr 未排序的数组 * @returns arr 已排好序的数组 */</span><span class="token keyword">const</span> <span class="token function-variable function">quickSort</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> midIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 基准点的索引</span>  <span class="token keyword">const</span> midVal <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>midIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 基准点的值</span>  <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 存放比基准点小的元素</span>  <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 存放比基准点大的元素</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 遍历数组，根据元素与基准值的大小关系进入到相应的数组中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> midVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>midVal<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归执行</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** 堆是一个完全二叉树 * 1. 将待排序的序列构造成一个大顶堆。（此时，整个序列的最大值就是堆顶元素）； * 2. 将堆顶元素与堆尾元素交换，然后将剩余 n-1 个序列重新构造成一个大顶堆，这样就得到 * n 个元素中的次大值。如此反复执行，最终得到一个有序序列。 * @param {Array} array 待排序的数组 * @returns 已排序的数组 */</span><span class="token keyword">const</span> <span class="token function-variable function">heapSort</span> <span class="token operator">=</span> <span class="token parameter">array</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 初始化一个大顶堆，从第一个非叶子节点开始</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">heapify</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 排序，每一次for循环找出一个当前的最大值，交换堆首与堆尾，</span>  <span class="token comment">// 然后将剩下i个序列重新构造成一个大顶堆。</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token function">heapify</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> array<span class="token punctuation">}</span><span class="token comment">/** * 交换数组索引 i 和 j 处的值 * @param {Array} array 待排序数组 * @param {Number} i 索引 i * @param {Number} j 索引 j */</span><span class="token keyword">const</span> <span class="token function-variable function">swap</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>  array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">}</span><span class="token comment">/** * 将以i位置以下的序列调整为大顶堆 * @param {Array} array 待排序数组 * @param {Number} i 根节点索引 * @param {Number} length 待排序数组的长度 */</span><span class="token keyword">const</span> <span class="token function-variable function">heapify</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> length</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment">// 根节点的值</span>  <span class="token comment">// j 是根节点 i 的左右孩子的索引，从左孩子遍历到右孩子，</span>  <span class="token comment">// 对结点 i 以下的结点全部做顺序调整</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment">// 左孩子的值小于右孩子</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      j<span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token comment">// 子节点的值大于根节点，交换</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>      i <span class="token operator">=</span> j    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">break</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'原始array:'</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token function">heapSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'newArr:'</span><span class="token punctuation">,</span> newArr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 自上而下递归，将 arr 分为两个数组，然后继续分，直到 left 和 right 都只有一个元素， * 然后又逐级向上合并已排序的 left 和 right * @param {Array} arr 原数组 * @returns res 已排序的数组 */</span><span class="token keyword">const</span> <span class="token function-variable function">mergeSort</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr  <span class="token punctuation">}</span>  <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> left <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span>  <span class="token keyword">const</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 合并left和right</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 如果 left 和 right 中有一个里面没有元素而另一个里面有，</span>  <span class="token comment">// 直接将剩下的元素添加到合并的数组后面（剩下的都是比 res 中元素大的元素）</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 希尔排序的代码直接看，很难懂，但从原理上来理解之后再去看代码就很清晰了： * 希尔排序是插入排序的升级版。插入排序的 gap=1，希尔排序是设置几个不同大小的 gap， * 按 gap 递减的顺序每次对 arr 进行插入排序。这样做的目的是先将 arr 排成一个尽量有序的数组， * 元素值小的位置靠前，元素值大的位置靠后，其他的位于中间位置。最后再进行一次 gap=1 的 * 插入排序，减小排序的时间。 * 因此希尔排序的代码其实就是在插入排序的基础上，在最外层包了一个设置 gap 递减的 for 循环。 * @param {Array} arr 未排序的 arr * @returns arr 已排好序的 arr */</span><span class="token keyword">const</span> <span class="token function-variable function">shellSort</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length  <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">// 初识化gap</span>  <span class="token keyword">let</span> gap <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>gap <span class="token operator">&lt;</span> length <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    gap <span class="token operator">=</span> gap <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>gap<span class="token punctuation">;</span> gap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>gap <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 外层 for 循环控制 gap 递减</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 插入排序的代码，只是将1替换成了 gap</span>      current <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">let</span> preIndex <span class="token operator">=</span> i <span class="token operator">-</span> gap      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> preIndex <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span> <span class="token operator">&gt;</span> current<span class="token punctuation">;</span> preIndex <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>preIndex <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span>      <span class="token punctuation">}</span>      arr<span class="token punctuation">[</span>preIndex <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> current    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">}</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">shellSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 1. 确定桶大小，桶的个数，将 array 中的元素根据映射关系装入桶中； * 2. 分别每个桶中的元素单独排序（插入排序或快速排序）； * 3. 将每个桶内的元素按顺序取出，组成的序列就是有序的了； * @param {Array} array 待排序数组 * @param {Number} bucketSize 桶的大小 * @returns 已排序的数组 */</span><span class="token keyword">const</span> <span class="token function-variable function">bucketSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> bucketSize</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> array  <span class="token punctuation">}</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> minValue <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> maxValue <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      minValue <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      maxValue <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">/* 桶的初始化 */</span>  <span class="token keyword">const</span> <span class="token constant">DEFAULT_BUCKET_SIZE</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">// 桶大小的默认值</span>  bucketSize <span class="token operator">=</span> bucketSize <span class="token operator">||</span> <span class="token constant">DEFAULT_BUCKET_SIZE</span>  <span class="token keyword">const</span> bucketCount <span class="token operator">=</span>    Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue <span class="token operator">-</span> minValue<span class="token punctuation">)</span> <span class="token operator">/</span> bucketSize<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 桶的个数</span>  <span class="token keyword">const</span> buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>bucketCount<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>bucketSize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 初始化桶</span>  <span class="token comment">/* 利用映射函数((array[i] - minValue) / bucketSize))将数据分配到各个桶中 */</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    buckets<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> minValue<span class="token punctuation">)</span> <span class="token operator">/</span> bucketSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>      array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">/* 对每一个桶中的元素排序，然后依次取出组成一个序列 */</span>  array<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buckets<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> array<span class="token punctuation">}</span><span class="token comment">// const quickSort = arr =&gt; {</span><span class="token comment">//   if (arr.length &lt;= 1) {</span><span class="token comment">//     return arr</span><span class="token comment">//   }</span><span class="token comment">//   const midIndex = Math.floor(arr.length / 2)</span><span class="token comment">//   const midVal = arr.splice(midIndex)</span><span class="token comment">//   const left = []</span><span class="token comment">//   const right = []</span><span class="token comment">//   for (let i = 0; i &lt; arr.length; i++) {</span><span class="token comment">//     if (arr[i] &lt; midVal) {</span><span class="token comment">//       left.push(arr[i])</span><span class="token comment">//     } else {</span><span class="token comment">//       right.push(arr[i])</span><span class="token comment">//     }</span><span class="token comment">//   }</span><span class="token comment">//   return quickSort(left).concat(midVal, quickSort(right))</span><span class="token comment">// }</span><span class="token comment">/** * 快速排序的原地实现，没有搞懂！ * @param {Array} arr 待排序数组 * @param {Number} left 数组的左边界 * @param {Number} right 数组的右边界 * @returns 已排序的数组 */</span><span class="token comment">// TODO: 搞懂实现细节</span><span class="token keyword">const</span> <span class="token function-variable function">quickSort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> partionIndex <span class="token operator">=</span> <span class="token number">0</span>  left <span class="token operator">=</span> <span class="token keyword">typeof</span> left <span class="token operator">!==</span> <span class="token string">'number'</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> left  right <span class="token operator">=</span> <span class="token keyword">typeof</span> right <span class="token operator">!==</span> <span class="token string">'number'</span> <span class="token operator">?</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> right  <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    partionIndex <span class="token operator">=</span> <span class="token function">partion</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> partionIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> partionIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token function-variable function">partion</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> pivot <span class="token operator">=</span> left <span class="token comment">// 基准点</span>  <span class="token keyword">let</span> index <span class="token operator">=</span> pivot <span class="token operator">+</span> <span class="token number">1</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">;</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>      index<span class="token operator">++</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">;</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">return</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'原始array:'</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'newArr:'</span><span class="token punctuation">,</span> newArr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 1.找出待排序的数组中最大和最小的元素。 * 2.统计数组中每个值为 i 的元素出现的次数，存入新数组 countArr 的第 i 项。 * 3.对所有的计数累加（从 countArr 中的第一个元素开始，每一项和前一项相加）。 * 4.反向填充目标数组：将每个元素 i 放在新数组的第 countArr[i] 项，每放一个元素就将 countArr[i] 减去 1 。 * @param {Array} array 待排序数组 * @returns 已排序数组 */</span><span class="token keyword">const</span> <span class="token function-variable function">countingSort</span> <span class="token operator">=</span> <span class="token parameter">array</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 存放排序后的结果</span>  <span class="token keyword">const</span> countArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 统计 array 中每个数出现的次数</span>  <span class="token keyword">let</span> min <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> max <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 获取最小，最大值</span>    min <span class="token operator">=</span> min <span class="token operator">&lt;=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> min <span class="token operator">:</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    max <span class="token operator">=</span> max <span class="token operator">&gt;=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> max <span class="token operator">:</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    countArr<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> countArr<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>      <span class="token operator">?</span> countArr<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>      <span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token comment">// 从最小值-&gt;最大值，将计数逐项相加</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> min<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    countArr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>countArr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>countArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 反向填充结果数组</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">[</span>countArr<span class="token punctuation">[</span>array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>k<span class="token punctuation">]</span>    countArr<span class="token punctuation">[</span>array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'原始 array: '</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token function">countingSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'newArr: '</span><span class="token punctuation">,</span> newArr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://vue3js.cn/interview/algorithm/sort.html#%E4%BA%8C%E3%80%81%E6%9C%89%E5%93%AA%E4%BA%9B">面试官：说说常见的排序算法有哪些？区别？ | web前端面试 - 面试官系列 (vue3js.cn)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎样看论文</title>
      <link href="/2021/06/21/xue-zhu/zen-yang-kan-lun-wen/"/>
      <url>/2021/06/21/xue-zhu/zen-yang-kan-lun-wen/</url>
      
        <content type="html"><![CDATA[<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li><p>Abstract</p><p> 说明这篇论文的<code>主要贡献</code>、<code>方法特色</code>与<code>主要内容概要</code>。</p></li><li><p>Introduction</p><p>介绍<code>问题的背景和起源</code>，交代前人在这个题目上已经有过的<code>主要贡献</code>，说清楚<code>前人留下来的问题</code>，以及在这个背景下这篇论文<code>想解决的问题</code>和它的<code>意义</code>。</p></li><li><p>Main body(Include simulation and experimental examples)</p><p>详细说明作者<code>采用的方法</code>以及<code>做的过程</code>和产生的<code>实验结果</code></p></li><li><p>Conclusion</p><p><u>通过什么样的方法解决了什么样的问题</u>，有什么<code>优点</code>和<code>缺陷</code>，下一步<code>怎样改进</code>和对<code>未来工作的展望</code>。</p></li></ol><hr><h2 id="怎样阅读"><a href="#怎样阅读" class="headerlink" title="怎样阅读"></a>怎样阅读</h2><p>step 1. <font color="red">title/abstract/figures</font>.</p><p>step 2. Intro+Conclusion+Figures+Skim rest.(skip related work)</p><p>step 3. Read but skip maths.</p><p>step 4. <strong>Whole thing but skip parts that don’t make sense.</strong></p><p>Try to answer: </p><ul><li>What do the authors try to accomplish? — 作者这样做的动机是什么？</li><li>What were the key elements of the approch？—该方法的关键要素是什么？</li><li>What can you use yourself? — 什么东西能为你所用？</li><li>What other references do you want to follow?  — 你还想跟踪阅读哪些参考文献？</li></ul>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>paper写作词汇及句子</title>
      <link href="/2021/06/16/xue-zhu/paper-ju-zi/"/>
      <url>/2021/06/16/xue-zhu/paper-ju-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="paper的表达及词汇整理"><a href="#paper的表达及词汇整理" class="headerlink" title="paper的表达及词汇整理"></a>paper的表达及词汇整理</h1><ul><li>花里胡哨<ul><li>without any bells and whistles</li></ul></li><li>简单的，直截了当的<ul><li>straightforward</li></ul></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Paper for Fun</title>
      <link href="/2021/06/16/xue-zhu/paper-for-fun/"/>
      <url>/2021/06/16/xue-zhu/paper-for-fun/</url>
      
        <content type="html"><![CDATA[<h1 id="Paper-for-Fun"><a href="#Paper-for-Fun" class="headerlink" title="Paper for Fun"></a>Paper for Fun</h1><h2 id="SCI分区"><a href="#SCI分区" class="headerlink" title="SCI分区"></a>SCI分区</h2><table><thead><tr><th>1区</th><th>2区</th></tr></thead><tbody><tr><td>IEEE Transactions on Pattern Analysis and Machine Intelligence(<strong>PAMI</strong>)</td><td>Pattern Recognition</td></tr><tr><td>IEEE Transactions on Neural Networks and Learning Systems</td><td>Neural Networks</td></tr><tr><td>IEEE Transactions On Image Processing(<strong>TIP</strong>)</td><td></td></tr><tr><td>International Journal Of Computer Vision(<strong>IJCV</strong>)</td><td></td></tr><tr><td>IEEE Transactions on Medical Imaging(<strong>TMI</strong>)</td><td></td></tr></tbody></table><hr><h2 id="Referernce"><a href="#Referernce" class="headerlink" title="Referernce"></a>Referernce</h2><ul><li><a href="https://www.letpub.com.cn/index.php?page=journalapp&amp;fieldtag=153&amp;firstletter=">最新计算机视觉领域SCI期刊查询及投稿分析系统</a></li><li><a href="https://ijournal.topeditsci.com/home">期刊查询与选择服务系统 (topeditsci.com)</a></li></ul><hr><h2 id="CCF-分区"><a href="#CCF-分区" class="headerlink" title="CCF 分区"></a>CCF 分区</h2><h3 id="国际分区"><a href="#国际分区" class="headerlink" title="国际分区"></a>国际分区</h3><h4 id="期刊"><a href="#期刊" class="headerlink" title="期刊"></a>期刊</h4><table><thead><tr><th>A类</th><th>B类</th></tr></thead><tbody><tr><td>Artificial Intelligence</td><td><strong>Machine Learning</strong></td></tr><tr><td>IEEE Trans on Pattern Analysis and Machine Intelligence(<strong>PAMI</strong>)</td><td>Neural Computation</td></tr><tr><td>International Journal of Computer Vision(<strong>IJCV</strong>)</td><td><strong>Neural Networks</strong></td></tr><tr><td><font color="red">Journal of Machine Learning Research</font>(<strong>JMLR</strong>)</td><td><strong>Pattern Recognition</strong></td></tr><tr><td>…</td><td></td></tr></tbody></table><hr><h4 id="会议"><a href="#会议" class="headerlink" title="会议"></a>会议</h4><table><thead><tr><th>A类</th><th>B类</th></tr></thead><tbody><tr><td>AAAI Conference on Artificial Intelligence(<strong>AAAI</strong>)</td><td>European Conference on Artificial Intelligence(<strong>ECAI</strong>)</td></tr><tr><td><font color="red">Annual Conference on Neural Information Processing Systems</font>(<strong>NeurIPS</strong>)<font color="red"></font></td><td><font color="red">European Conference on Computer Vision</font>(<strong>ECCV</strong>)</td></tr><tr><td>Annual Meeting of the Association for Computational Linguistics(<strong>ACL</strong>)</td><td></td></tr><tr><td><font color="red">IEEE Conference on Computer Vision and Pattern Recognition</font>(<strong>CVPR</strong>)</td><td></td></tr><tr><td><font color="red">International Conference on Computer Vision</font>(<strong>ICCV</strong>)</td><td></td></tr><tr><td><font color="red">International Conference on Machine Learning</font>(<strong>ICML</strong>)</td><td></td></tr><tr><td>International Joint Conference on Artificial Intelligence(<strong>IJCAI</strong>)</td><td></td></tr></tbody></table><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><ul><li><a href="https://www.ccf.org.cn/Academic_Evaluation/AI/"> 人工智能-中国计算机学会 (ccf.org.cn)</a></li></ul><hr><h3 id="国内分区"><a href="#国内分区" class="headerlink" title="国内分区"></a>国内分区</h3><h4 id="期刊-1"><a href="#期刊-1" class="headerlink" title="期刊"></a>期刊</h4><table><thead><tr><th>A 类</th><th>B类</th><th>C类</th></tr></thead><tbody><tr><td>软件学报</td><td>科学通报</td><td>计算机工程与应用</td></tr><tr><td>计算机学报</td><td>中文信息学报</td><td>计算机工程与科学</td></tr><tr><td>中国科学：信息科学</td><td>模式识别与人工智能</td><td>计算机应用</td></tr><tr><td>计算机研究与发展</td><td>中国图像图形学报</td><td>计算机系统应用</td></tr><tr><td>计算机辅助设计与图形学学报</td><td>计算机科学</td><td>计算机应用研究</td></tr><tr><td>电子学报</td><td>计算机科学与探索</td><td>计算机应用与软件</td></tr><tr><td>自动化学报</td><td></td><td>图学学报</td></tr><tr><td></td><td></td><td>计算机工程</td></tr><tr><td></td><td></td><td>计算机工程与设计</td></tr><tr><td></td><td></td><td>计算机集成制造系统</td></tr><tr><td></td><td></td><td>计算机技术与发展</td></tr><tr><td></td><td></td><td>数据分析与知识发现</td></tr><tr><td></td><td></td><td>智能系统学报</td></tr><tr><td></td><td></td><td>电子与信息学报</td></tr><tr><td></td><td></td><td>计算机与数字工程</td></tr><tr><td></td><td></td><td>计算机教育</td></tr></tbody></table><h4 id="Reference-1"><a href="#Reference-1" class="headerlink" title="Reference"></a>Reference</h4><ul><li><a href="https://www.ccf.org.cn/ccftjgjxskwml/">中国计算机学会推荐中文科技期刊目录</a></li></ul><hr><h2 id="文献搜索和管理"><a href="#文献搜索和管理" class="headerlink" title="文献搜索和管理"></a>文献搜索和管理</h2><h3 id="Reference-2"><a href="#Reference-2" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://ying-zhang.github.io/misc/2016-we-love-paper/">如何收集和整理论文（面向CS专业） - Ying ZHANG (ying-zhang.github.io)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发环境配置汇总</title>
      <link href="/2021/06/16/huan-jing-pei-zhi/kai-fa-huan-jing-pei-zhi-hui-zong/"/>
      <url>/2021/06/16/huan-jing-pei-zhi/kai-fa-huan-jing-pei-zhi-hui-zong/</url>
      
        <content type="html"><![CDATA[<h1 id="开发环境配置汇总"><a href="#开发环境配置汇总" class="headerlink" title="开发环境配置汇总"></a>开发环境配置汇总</h1><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><div class="info"><blockquote><p>下载了JDK，安装时不需要再安装jre了 </p></blockquote></div>  <ol><li>JAVA_HOME<ul><li>JDK安装的目录</li></ul></li><li>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin<ul><li>添加到PATH中</li></ul></li><li>CLASSPATH<ul><li>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</li></ul></li></ol><h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><div class="warning"><blockquote><p>可使用国内镜像源下载，官网下载比较慢    </p></blockquote></div><ol><li><p>MAVEN_HOME</p><ul><li>maven的安装目录</li></ul></li><li><p>%MAVEN_HOME%\bin</p><ul><li>添加到PATH中去</li></ul></li><li><p>MAVEN_OPTS</p><ul><li>-Xms128m -Xmx512m</li></ul></li><li><p>生成.m2文件（默认在C盘）</p><ul><li><p>执行命令：mvn help:system（可中断），目的是生成C盘中的.m2文件夹</p></li><li><p>将安装目录下的conf中的settings.xml拷贝到.m2文件夹下 。前者是全局的，后者是当前用户的。 </p></li><li><p>在settings.xml中改镜像和本地仓库位置</p></li></ul> <pre class="line-numbers language-none"><code class="language-none">&lt;!-- 配置中央仓库的镜像（改用：阿里云中央仓库镜像）--&gt;&lt;mirror&gt;          &lt;id&gt;alimaven&lt;/id&gt;  &lt;name&gt;aliyun-maven&lt;/name&gt;  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;  &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;&lt;!-- 设置本地仓库位置 --&gt;&lt;localRepository&gt;D:\maven-local-repository&lt;/localRepository&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>IDEA中的配置</p></li></ol><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="pip换源"><a href="#pip换源" class="headerlink" title="pip换源"></a>pip换源</h3><p>​    在C:\Users\当前用户名\pip下新建一个pip.ini文件，写入以下内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token keyword">global</span><span class="token punctuation">]</span>index<span class="token operator">-</span>url <span class="token operator">=</span> http<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>pypi<span class="token operator">/</span>simple<span class="token operator">/</span>trusted<span class="token operator">-</span>host <span class="token operator">=</span> mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>comtimeout <span class="token operator">=</span> <span class="token number">120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pip离线安装"><a href="#pip离线安装" class="headerlink" title="pip离线安装"></a>pip离线安装</h2><p>查看当前python版本支持的离线文件类型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pip<span class="token punctuation">.</span>_internal<span class="token keyword">print</span><span class="token punctuation">(</span>pip<span class="token punctuation">.</span>_internal<span class="token punctuation">.</span>pep425tags<span class="token punctuation">.</span>get_supported<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="pip安装requirements"><a href="#pip安装requirements" class="headerlink" title="pip安装requirements"></a>pip安装requirements</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install <span class="token operator">-</span>r requirements<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Anacond"><a href="#Anacond" class="headerlink" title="Anacond"></a>Anacond</h2><p>一、安装Pytorch</p><pre class="line-numbers language-none"><code class="language-none">Solving environment: failed with current_repodata.json, will retry with next repodata source.Initial quick solve with frozen env failed.  Unfreezing env and trying again.解决：conda update --all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>二、安装package</p><pre class="line-numbers language-none"><code class="language-none">PackagesNotFoundError解决：1. anaconda search -t conda package2. anaconda show "conda-forge/pydap"(根据查出来的结果选择)3. 根据提示安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三、环境管理</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 克隆环境conda create <span class="token operator">-</span>n BBB <span class="token operator">-</span><span class="token operator">-</span>clone AAA<span class="token operator">*</span> BBB是自己要创建的环境名称<span class="token operator">*</span> AAA是已经存在的环境名称<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 删除环境conda remove <span class="token operator">-</span>n env_name <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 环境迁移<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Linux<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">1.</span> conda pack <span class="token operator">-</span>n my_env<span class="token punctuation">(</span>要打包的环境<span class="token punctuation">)</span> <span class="token operator">-</span>o my_env<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz<span class="token punctuation">(</span>自定义打包后的环境名称<span class="token punctuation">)</span><span class="token number">2.</span> 在env目录下<span class="token punctuation">,</span> mkdir <span class="token operator">-</span>p my_env<span class="token number">3.</span> tar <span class="token operator">-</span>xzvf my_env<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz <span class="token operator">-</span>C my_env<span class="token number">4.</span> source <span class="token punctuation">.</span><span class="token operator">/</span>my_env<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>activate<span class="token number">5.</span> conda activate my_env<span class="token number">6.</span><span class="token punctuation">(</span>my_env<span class="token punctuation">)</span> $ conda<span class="token operator">-</span>unpack<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Windows<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">1.</span> 同上进行打包<span class="token punctuation">,</span> 可打包为<span class="token builtin">zip</span><span class="token number">2.</span> 将<span class="token builtin">zip</span>文件解压到envs目录下<span class="token number">3.</span> 进入base环境<span class="token number">4.</span> conda env <span class="token builtin">list</span><span class="token number">5.</span> 进入envs目录<span class="token number">6.</span> <span class="token punctuation">.</span>\my_env\Scripts\activate<span class="token punctuation">.</span>bat<span class="token number">7.</span> <span class="token punctuation">.</span>\my_env\Scripts\conda<span class="token operator">-</span>unpack<span class="token punctuation">.</span>exe<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>reference<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">//</span>zhuanlan<span class="token punctuation">.</span>zhihu<span class="token punctuation">.</span>com<span class="token operator">/</span>p<span class="token operator">/</span><span class="token number">87344422</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>四、镜像管理</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">.</span>condarc配置show_channel_urls<span class="token punctuation">:</span> truechannels<span class="token punctuation">:</span>  <span class="token operator">-</span> https<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>anaconda<span class="token operator">/</span>cloud<span class="token operator">/</span>conda<span class="token operator">-</span>forge<span class="token operator">/</span>  <span class="token operator">-</span> https<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>anaconda<span class="token operator">/</span>cloud<span class="token operator">/</span>msys2<span class="token operator">/</span>  <span class="token operator">-</span> https<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>anaconda<span class="token operator">/</span>cloud<span class="token operator">/</span>bioconda<span class="token operator">/</span>  <span class="token operator">-</span> https<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>anaconda<span class="token operator">/</span>cloud<span class="token operator">/</span>menpo<span class="token operator">/</span>  <span class="token operator">-</span> https<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>anaconda<span class="token operator">/</span>cloud<span class="token operator">/</span>pytorch<span class="token operator">/</span>  <span class="token operator">-</span> https<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>anaconda<span class="token operator">/</span>pkgs<span class="token operator">/</span>free<span class="token operator">/</span>  <span class="token operator">-</span> https<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>anaconda<span class="token operator">/</span>pkgs<span class="token operator">/</span>main<span class="token operator">/</span>  <span class="token operator">-</span> defaults<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 查看当前channelconda config <span class="token operator">-</span><span class="token operator">-</span>show<span class="token operator">-</span>sources<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 添加源conda config <span class="token operator">-</span><span class="token operator">-</span>add channels<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 移除源conda config <span class="token operator">-</span><span class="token operator">-</span>remove channels<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h2><ol><li>检查是否安装成功<ul><li>node -v</li><li>npm -v</li></ul></li><li>换源<ul><li>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></li><li>测试是否安装成功<ul><li>cnpm</li></ul></li></ul></li><li>设置npm全局模块路径（自定义路径）<ul><li>在NodeJS安装路径下新建两个文件夹： node_globle, node_cache</li><li>npm config set prefix “D:\Environments\nodejs\node_globle”</li><li>npm config set cache “D:\Environments\nodejs\node_cache”</li></ul></li><li>添加环境变量<ul><li>NODE_PATH<ul><li>D:\Enviroment\NodeJs\node_globle\node_modules</li></ul></li><li>PATH<ul><li>D:\Enviroment\NodeJs\node_globle\</li></ul></li></ul></li></ol><hr><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ol><li>cnpm install -g hexo-cli</li><li>hexo -v</li><li>hexo init (在指定的存放博客目录下使用)</li><li>hexo s</li><li>localhost:4000测试</li><li>常用命令</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> hexo c <span class="token comment">// 清理缓存文件</span><span class="token operator">*</span> hexo g<span class="token comment">// 生成文件</span><span class="token operator">*</span> hexo s<span class="token comment">// 运行本地服务器</span><span class="token operator">*</span> hexo d<span class="token comment">// 上传到服务器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Hexo迁移"><a href="#Hexo迁移" class="headerlink" title="Hexo迁移"></a>Hexo迁移</h3><div class="info"><blockquote><p>将电脑上的博客迁移到另一台电脑</p></blockquote></div><ol><li>备份原来的博客文件夹，清单如下：<ul><li>_config.yml</li><li>package.json</li><li>scaffolds/</li><li>source/</li><li>themes/</li></ul></li><li>在新电脑上安装环境（node，hexo）</li><li>在博客目录下（与原来的博客路径保持一致最好，不同的话没试过）<ul><li>cnpm install –save hexo-deployer-git</li><li>hexo c<ul><li>这里会报错，缺少相关依赖，根据提示安装即可</li><li>再次执行hexo c</li></ul></li><li>hexo g</li><li>hexo s</li></ul></li></ol><hr><h2 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h2><h3 id="安装的插件"><a href="#安装的插件" class="headerlink" title="安装的插件"></a>安装的插件</h3><blockquote><ol><li><p>open-in-browser 在浏览器中查看</p></li><li><p>Auto Close Tag 自动闭合标签</p></li><li><p>Auto Rename Tag 尾部闭合标签同步修改</p></li><li><p>Bracket Pair Colorizer 用不同颜色高亮显示匹配的括号</p></li><li><p>Highlight Matching Tag 高亮显示匹配标签</p></li><li><p>Vscode-icons VSCode 文件图标</p></li><li><p>TODO Highlight 高亮</p></li><li><p>Code Spell Checker 单词拼写检查</p></li><li><p>Code Runner 运行选中代码段</p></li></ol><ul><li>Python开发时的配置</li><li>输出时中文乱码<ul><li>“code-runner.runInTerminal”: true</li></ul></li></ul><ol start="10"><li><p>Improt Cost 成本提示</p></li><li><p>WakaTime 计算代码工作量</p></li><li><p>Settings Sync 同步扩展配置到GitHub</p></li></ol></blockquote><p><a href="https://www.cnblogs.com/lychee/p/11214032.html">参考</a></p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><h4 id="编辑器与窗口管理"><a href="#编辑器与窗口管理" class="headerlink" title="编辑器与窗口管理"></a>编辑器与窗口管理</h4><pre class="line-numbers language-none"><code class="language-none">Ctrl+Shift+P: 打开命令面板。Ctrl+Shift+N: 新建窗口。Ctrl+Shift+W: 关闭窗口。切分窗口：Ctrl+1/Ctrl+3/Ctrl+3Ctrl+H：最小化窗口Ctrl+B：显示/隐藏侧边栏Ctrl+"+/-"：放大/缩小界面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><pre class="line-numbers language-none"><code class="language-none">Ctrl+N：新建文件Ctrl+W：关闭文件Ctrl+Tab：文件切换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="格式调整"><a href="#格式调整" class="headerlink" title="格式调整"></a>格式调整</h4><pre class="line-numbers language-none"><code class="language-none">Ctrl+C/Ctrl+V：复制或剪切当前行/当前选中内容Alt+Up/Down：向上/下移动一行Shift+Alt+Up//Down：向上/下复制一行Ctrl+Delete：删除当前行Shift+Alt+Left/Right：从光标开始向左/右选择内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码编辑"><a href="#代码编辑" class="headerlink" title="代码编辑"></a>代码编辑</h4><pre class="line-numbers language-none"><code class="language-none">Ctrl+D：选中下一个相同内容Ctrl+Shift+L：选中所有相同内容Ctrl+F：查找内容Ctrl+Shit+F：在整个文件夹中查找内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><ol><li><p>检查本机是否有ssh key设置，打开git bash客户端：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cd <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh或cd <span class="token punctuation">.</span>ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用Git Bash生成新的ssh key</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cd <span class="token operator">~</span>  <span class="token comment">#保证当前路径在”~”下</span>ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">"xxxxxx@yy.com"</span>  <span class="token comment">#填写自己真实有效的邮箱地址</span>Generating public<span class="token operator">/</span>private rsa key pair<span class="token punctuation">.</span>Enter <span class="token builtin">file</span> <span class="token keyword">in</span> which to save the key <span class="token punctuation">(</span><span class="token operator">/</span>c<span class="token operator">/</span>Users<span class="token operator">/</span>xxxx_000<span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment">#不填直接回车</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment">#输入密码（可以为空）</span>Enter same passphrase again<span class="token punctuation">:</span>   <span class="token comment">#再次确认密码（可以为空）</span>Your identification has been saved <span class="token keyword">in</span> <span class="token operator">/</span>c<span class="token operator">/</span>Users<span class="token operator">/</span>xxxx_000<span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token punctuation">.</span>   <span class="token comment">#生成的id_rsa文件为密钥</span>Your public key has been saved <span class="token keyword">in</span> <span class="token operator">/</span>c<span class="token operator">/</span>Users<span class="token operator">/</span>xxxx_000<span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token punctuation">.</span>pub<span class="token punctuation">.</span>  <span class="token comment">#生成的id_rsa.pub公钥</span>The key fingerprint <span class="token keyword">is</span><span class="token punctuation">:</span>e3<span class="token punctuation">:</span><span class="token number">51</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">:</span>xx<span class="token punctuation">:</span>xx<span class="token punctuation">:</span>xx<span class="token punctuation">:</span>xx<span class="token punctuation">:</span>xxx<span class="token punctuation">:</span><span class="token number">61</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">:</span><span class="token number">83</span><span class="token punctuation">:</span>e2<span class="token punctuation">:</span><span class="token number">81</span> xxxxxx@yy<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置GitHub账户</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">git config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> user<span class="token punctuation">.</span>name “your_username”  <span class="token comment">#设置用户名</span>git config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> user<span class="token punctuation">.</span>email “your_registered_github_Email”  <span class="token comment">#设置邮箱地址(建议用注册giuhub的邮箱)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>测试ssh keys是否设置成功</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ssh <span class="token operator">-</span>T git@github<span class="token punctuation">.</span>comThe authenticity of host <span class="token string">'github.com (192.30.252.129)'</span> can't be established<span class="token punctuation">.</span>RSA key fingerprint <span class="token keyword">is</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span>xx<span class="token punctuation">:</span>xx<span class="token punctuation">:</span>xx<span class="token punctuation">:</span>xx<span class="token punctuation">:</span>xx<span class="token punctuation">:</span>4d<span class="token punctuation">:</span>eb<span class="token punctuation">:</span>df<span class="token punctuation">:</span>a6<span class="token punctuation">:</span><span class="token number">48.</span>Are you sure you want to <span class="token keyword">continue</span> connecting <span class="token punctuation">(</span>yes<span class="token operator">/</span>no<span class="token punctuation">)</span>? yes <span class="token comment">#确认你是否继续联系，输入yes</span>Warning<span class="token punctuation">:</span> Permanently added <span class="token string">'github.com,192.30.252.129'</span> <span class="token punctuation">(</span>RSA<span class="token punctuation">)</span> to the <span class="token builtin">list</span> of known hosts<span class="token punctuation">.</span>Enter passphrase <span class="token keyword">for</span> key <span class="token string">'/c/Users/xxxx_000/.ssh/id_rsa'</span><span class="token punctuation">:</span>  <span class="token comment">#生成ssh kye是密码为空则无此项，若设置有密码则有此项且，输入生成ssh key时设置的密码即可。</span>Hi xxx! You've successfully authenticated<span class="token punctuation">,</span> but GitHub does <span class="token keyword">not</span> provide shell access<span class="token punctuation">.</span> <span class="token comment">#出现词句话，说明设置成功。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Reference: [<a href="https://segmentfault.com/a/1190000004564905">Windows下配置Git连接上github - SegmentFault 思否</a>]:</p></li></ol><h2 id="文档写作"><a href="#文档写作" class="headerlink" title="文档写作"></a>文档写作</h2><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><p>配置快捷设置字体颜色</p><p>快捷键：</p><ul><li>Ctrl+Alt+o 橙色</li><li>Ctrl+Alt+r 红色</li><li>Ctrl+Alt+b 浅蓝色</li></ul><p>Reference：</p><ul><li><p><a href="https://blog.csdn.net/u010886217/article/details/109661322">Typora修改字体颜色快捷键设置</a></p></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 安装Tensorflow GPU版本</title>
      <link href="/2021/06/16/huan-jing-pei-zhi/windows-an-zhuang-tensorflow-gpu-ban-ben/"/>
      <url>/2021/06/16/huan-jing-pei-zhi/windows-an-zhuang-tensorflow-gpu-ban-ben/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-安装Tensorflow-GPU版本"><a href="#Windows-安装Tensorflow-GPU版本" class="headerlink" title="Windows 安装Tensorflow GPU版本"></a>Windows 安装Tensorflow GPU版本</h1><h2 id="安装CUDA"><a href="#安装CUDA" class="headerlink" title="安装CUDA"></a>安装CUDA</h2><p><a href="https://developer.nvidia.com/cuda-toolkit-archive">历史版本</a></p><p><a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">驱动版本要求</a></p><hr><h2 id="安装cuDNN"><a href="#安装cuDNN" class="headerlink" title="安装cuDNN"></a>安装cuDNN</h2><p><a href="https://developer.nvidia.com/cudnn">历史版本</a></p><ul><li>需要下载与CUDA对应的版本</li></ul><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20210610092349.png" alt="image-20200718171010579"></p><ul><li>将解压出来的文件夹下的lib, include, bin目录下的文件粘贴到CUDA的文件夹下（C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.2 | 环境变量PATH中可以看到）</li></ul><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20210610092402.png" alt="image-20200718181032861"></p><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20210610092415.png" alt="image-20200718181057262"></p><hr><h2 id="安装tensorflow-gpu"><a href="#安装tensorflow-gpu" class="headerlink" title="安装tensorflow-gpu"></a>安装tensorflow-gpu</h2><p><a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/1-2-install/">参考</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip3 install <span class="token operator">-</span><span class="token operator">-</span>upgrade tensorflow<span class="token operator">-</span>gpu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20210610092603.png" alt="image-20200718181842958"></p><p>分析：</p><ol><li><p>检查安装的Python版本是否为3.6以上的64bit</p><ul><li><p>使用命令python -v查看</p><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20210610092618.png" alt="image-20200718182013302"></p></li></ul></li><li><p>检查使用的pip镜像（亲测华为的镜像不行）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token keyword">global</span><span class="token punctuation">]</span>index<span class="token operator">-</span>url <span class="token operator">=</span> http<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>pypi<span class="token operator">/</span>simple<span class="token operator">/</span>trusted<span class="token operator">-</span>host <span class="token operator">=</span> mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>comtimeout <span class="token operator">=</span> <span class="token number">120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr></li></ol><h2 id="目前的环境"><a href="#目前的环境" class="headerlink" title="目前的环境"></a>目前的环境</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">CUDA Toolkit<span class="token punctuation">:</span> <span class="token number">10.1</span> cuDNN<span class="token punctuation">:</span> v7<span class="token punctuation">.</span><span class="token number">6.5</span>python<span class="token punctuation">:</span> <span class="token number">3.7</span><span class="token number">.0</span> x64  pip<span class="token punctuation">:</span> <span class="token number">20.1</span><span class="token number">.1</span> Pycharm<span class="token punctuation">:</span> <span class="token number">2020.1</span><span class="token number">.2</span> x64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">Could <span class="token keyword">not</span> load dynamic library <span class="token string">'cudart64_101.dll'</span><span class="token punctuation">;</span> dlerror<span class="token punctuation">:</span> cudart64_101<span class="token punctuation">.</span>dll <span class="token keyword">not</span> found<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度炼丹指北</title>
      <link href="/2021/06/16/xue-zhu/shen-du-lian-dan-zhi-bei/"/>
      <url>/2021/06/16/xue-zhu/shen-du-lian-dan-zhi-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习、机器学习路线"><a href="#深度学习、机器学习路线" class="headerlink" title="深度学习、机器学习路线"></a>深度学习、机器学习路线</h1><p><img src="https://typora-lee.oss-cn-chengdu.aliyuncs.com/img-typora/20210610091932.jpg" alt="我的机器学习入门学习清单及路线"><em>来源：知乎</em></p><blockquote><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><p>个人学习经历：跟着吴恩达的<em>Machine Learning</em>视频课学习，课程是全英文的，学起来还算可以，没有实现视频中的课后作业，只过了一遍基础。</p><p>建议：</p><ul><li>根据自身情况选择一个入门课，最好自己用代码实现课程中的作业，复现经典的算法，不会的参考网上的代码，对之后的学习很有用。</li><li>阶段性总结，思维导图画起来</li><li>不要纠结细节的东西，先有个全局认识，细节在之后需要用到再去补</li></ul></blockquote><hr><h3 id="吴恩达系列"><a href="#吴恩达系列" class="headerlink" title="吴恩达系列"></a>吴恩达系列</h3><p>全英文，根据自身数学基础情况选一个</p><ul><li><p>基础课</p><ul><li><p><a href="https://www.bilibili.com/video/BV1JE411w7Ub">CS229 机器学习 · 2018年—数学推导较多</a></p></li><li><p><a href="https://www.bilibili.com/video/BV164411b7dx">机器学习 · 2018年—数学推导较少</a></p><ul><li><p><a href="https://pan.baidu.com/s/16065BpNAP7JEx_PpFHLSOw">思维导图</a></p><p>提取码：xcmi</p></li><li><p><a href="https://github.com/nsoojin/coursera-ml-py">课后练习-python实现</a></p></li><li><p><a href="https://github.com/kaleko/CourseraML">课后练习-jupyter实现</a></p></li></ul></li></ul></li><li><p>进阶课</p><ul><li>后续的课程在深度学习部分</li></ul></li></ul><div class="warning"><blockquote><p>网上说<u>吴恩达</u>的机器学习课程在SVM、决策树这些部分讲解得不是很清楚，<strong>林轩田</strong>的课程要讲得好一点，我个人也感觉当时听得有点迷糊，仅供参考！</p></blockquote></div><h3 id="台大林轩田系列"><a href="#台大林轩田系列" class="headerlink" title="台大林轩田系列"></a>台大林轩田系列</h3><p>台湾腔中文讲解，看过一点，推荐这个的人也挺多</p><ul><li><p>入门课</p><ul><li><a href="https://www.bilibili.com/video/BV1Cx411i7op?from=search&amp;seid=8384477960072240639">机器学习基石</a></li><li><a href="https://www.csie.ntu.edu.tw/~htlin/">Hsuan-Tien Lin &gt; Home (教师主页)</a></li><li><a href="http://amlbook.com/">Learning From Data - A Short Course (配套教材)</a></li></ul></li><li><p>进阶课</p><ul><li><a href="https://www.bilibili.com/video/BV1ix411i7yp?from=search&amp;seid=13811471041503243239">机器学习技法</a></li><li><a href="https://redstonewill.com/category/ai-notes/lin-ml-techniques/">博客笔记 </a></li><li><a href="https://github.com/RedstoneWill/HsuanTienLin_MachineLearning">课程资源</a></li></ul></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><a href="https://tensorflow.google.cn/resources/learn-ml/theoretical-and-advanced-machine-learning">理论机器学习和高级机器学习 | TensorFlow中文官网 (google.cn)</a></li><li><a href="https://github.com/josephmisiti/awesome-machine-learning/blob/master/courses.md">awesome-machine-learning</a></li></ul><hr><blockquote><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><p>个人学习经历：这部分没有系统地看视频，很后悔，当时是跟着《智能计算系统》这本书学的，自己在网上找代码跑，没有动手复现</p><p>建议：</p><p>① 跟着视频课系统地过一遍，一样的，切记不要纠结某些细节，有些东西在之后看论文的时候能解答你的疑惑；</p><p>② 要动手复现经典的网络模型，自己跑模型然后观察模型跑出来的结果和某些参数、网络结构对结果的影响；</p><p>③ 学一些可视化的工具(模型学习过程的可视化和结果的可视化)</p></blockquote><h3 id="吴恩达系列-1"><a href="#吴恩达系列-1" class="headerlink" title="吴恩达系列"></a>吴恩达系列</h3><ul><li><a href="https://www.bilibili.com/video/BV1XE411r7zy?from=search&amp;seid=140127664571744806">Andrew NG (吴恩达) Deep Learning Specialization </a></li></ul><h3 id="李宏毅系列"><a href="#李宏毅系列" class="headerlink" title="李宏毅系列"></a>李宏毅系列</h3><ul><li><a href="https://www.bilibili.com/video/BV1JE411g7XF?from=search&amp;seid=14321012422853123935">李宏毅2020机器学习深度学习</a></li><li><a href="https://speech.ee.ntu.edu.tw/~tlkagk/">Hung-yi Lee (教师主页)</a></li><li><a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses.html">Hung-yi Lee (课程主页)</a></li></ul><h3 id="斯坦福大学李飞飞教授的课程"><a href="#斯坦福大学李飞飞教授的课程" class="headerlink" title="斯坦福大学李飞飞教授的课程"></a>斯坦福大学李飞飞教授的课程</h3><ul><li><p><a href="https://www.bilibili.com/video/BV1nJ411z7fe">斯坦福李飞飞cs231n计算机视觉课程</a></p><ul><li>课程每年都会更新，这是我当时收藏的一个</li></ul></li><li><p><a href="http://cs231n.stanford.edu/">Stanford University CS231n: Convolutional Neural Networks for Visual Recognition</a></p><ul><li>斯坦福课程主页</li></ul></li></ul><hr><blockquote><h2 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h2><p>这个没学过，欢迎补充</p></blockquote><ul><li><a href="http://web.stanford.edu/class/cs224n/">Stanford CS 224N | Natural Language Processing with Deep Learning</a></li></ul><hr><blockquote><h2 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h2><p>个人学习经历：最开始接触的深度学习框架，没有看视频，跟着一本开源中文书学的，学得很迷。网上很多代码是v1版本的，现在最新的版本是v2，v2和v1的兼容性极其辣鸡，体验非常不好，这是谷歌的锅。后面看论文后发现很多开源的代码都是基于pytorch的，遂转到pytorch。</p><p>建议：</p><ul><li>现在肯定是学习v2版本</li><li>有志于从事算法的同学，工业界tensorflow还是用得很多的</li><li>官方可视化工具：TensorBoard</li></ul></blockquote><h3 id="视频课"><a href="#视频课" class="headerlink" title="视频课"></a>视频课</h3><ul><li><a href="https://www.bilibili.com/video/BV1zE411T7nb">【吴恩达团队Tensorflow2.0实践系列课程第一课】基于TensorFlow2.0的人工智能、机器学习和深度学习简介及基础编程_哔哩哔哩_bilibili</a></li><li><a href="https://www.bilibili.com/video/BV1rz4y117p1?from=search&amp;seid=9632661165340381736">TensorFlow官方入门实操课程_哔哩哔哩_bilibili</a></li><li><a href="https://www.bilibili.com/video/BV1HV411q7xD?from=search&amp;seid=9632661165340381736">【最完整版】深度学习与TensorFlow2入门实战（附源码和课件）_哔哩哔哩_bilibili</a><ul><li><a href="https://github.com/Relph1119/deeplearning-with-tensorflow-notes">Relph1119/deeplearning-with-tensorflow-notes: 龙曲良《TensorFlow深度学习》学习笔记及代码，采用TensorFlow2.0.0版本 (github.com)</a></li><li>我当时跟着书学的，感觉一般，视频没看过，有一定的参考价值。</li></ul></li></ul><hr><blockquote><h2 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h2><p>个人学习经历：没有系统学这个，因为之前学过TensorFlow，框架之间的用法大部分是相通的，直接上手改别人的代码。</p><p>建议：</p><ul><li>两个主流框架选择其中一个，然后深入</li><li>pytorch在学术界 用得很多，看论文之后就会发现这一点</li><li>FaceBook的可视化工具：visdom</li></ul></blockquote><h3 id="视频课-1"><a href="#视频课-1" class="headerlink" title="视频课"></a>视频课</h3><ul><li><a href="https://www.bilibili.com/video/BV1Sr4y1N71H?from=search&amp;seid=14115311494813820017">深度学习与PyTorch入门实战_哔哩哔哩_bilibili</a><ul><li>只看过这一个，跟上面tensorflow的一个视频课的老师是同一个—龙良曲</li></ul></li></ul><hr><h2 id="训练实战"><a href="#训练实战" class="headerlink" title="训练实战"></a>训练实战</h2><ul><li><p><strong>阿里云天池</strong>：<a href="https://tianchi.aliyun.com/?_lang=zh_CN">天池大数据众智平台-数据科学家社区</a></p></li><li><p><strong>kaggle</strong>：</p><ul><li><a href="https://www.kaggle.com/">Your Home for Data Science</a></li><li><a href="https://www.kaggle.com/c/titanic">Titanic: Machine Learning from Disaster</a></li><li><a href="https://zhuanlan.zhihu.com/p/25686876">Kaggle入门，看这一篇就够了 - 知乎专栏</a></li></ul></li></ul><hr><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><ul><li>Kaggle 的 kernels：<a href="https://link.zhihu.com/?target=https://www.kaggle.com/kernels">https://www.kaggle.com/kernels</a>，每周免费使用 30 个小时；</li><li>谷歌的 Colab：<a href="https://link.zhihu.com/?target=https://colab.research.google.com/">https://colab.research.google.com/</a>，每个会话有 12 个小时的限制，每周免费时长限制未知。</li></ul><hr><h2 id="论文和代码"><a href="#论文和代码" class="headerlink" title="论文和代码"></a>论文和代码</h2><ul><li><a href="https://link.zhihu.com/?target=https://arxiv.org/">https://arxiv.org/</a>：免费获取最新论文的网站</li><li><a href="https://link.zhihu.com/?target=https://paperswithcode.com/sota">https://paperswithcode.com/sota</a>：深度学习SOTA(State-Of-The-Art)论文，查找论文的开源代码；</li><li><a href="https://link.zhihu.com/?target=https://github.com/topics/computer-vision?l=python">https://github.com/topics/computer-vision?l=python</a>：可以在这找到代码实现的算法</li><li><a href="https://www.home-for-researchers.com/static/index.html#/">https://www.home-for-researchers.com/static/index.html#/</a>: 科研工具</li><li><a href="https://www.arxivdaily.com/">https://www.arxivdaily.com/</a>: 每日最新论文推荐</li><li><a href="http://www.paperweekly.site/home">http://www.paperweekly.site/home</a>: 同上</li></ul><blockquote><p><strong>网络结构</strong></p><ul><li><strong>AlexNet</strong>: <a href="https://link.zhihu.com/?target=https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks">https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks</a></li><li><strong>ZFNet</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1311.2901">https://arxiv.org/abs/1311.2901</a></li><li><strong>VGG16</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1505.06798">https://arxiv.org/abs/1505.06798</a></li><li><strong>ResNet</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1704.06904">https://arxiv.org/abs/1704.06904</a></li><li><strong>GoogLeNet</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1409.4842">https://arxiv.org/abs/1409.4842</a></li><li><strong>Inception</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1512.00567">https://arxiv.org/abs/1512.00567</a></li><li><strong>Xception</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1610.02357">https://arxiv.org/abs/1610.02357</a></li><li><strong>MobileNet</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1704.04861">https://arxiv.org/abs/1704.04861</a></li></ul><p><strong>语义分割</strong></p><ul><li><strong>FCN</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1411.4038">https://arxiv.org/abs/1411.4038</a></li><li><strong>SegNet</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1511.00561">https://arxiv.org/abs/1511.00561</a></li><li><strong>UNet</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1505.04597">https://arxiv.org/abs/1505.04597</a></li><li><strong>PSPNet</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1612.01105">https://arxiv.org/abs/1612.01105</a></li><li><strong>DeepLab</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1606.00915">https://arxiv.org/abs/1606.00915</a></li><li><strong>ICNet</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1704.08545">https://arxiv.org/abs/1704.08545</a></li><li><strong>ENet</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1606.02147">https://arxiv.org/abs/1606.02147</a></li></ul><p><strong>生成对抗网络（GAN)</strong></p><ul><li><strong>GAN</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1406.2661">https://arxiv.org/abs/1406.2661</a></li><li><strong>DCGAN</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1511.06434">https://arxiv.org/abs/1511.06434</a></li><li><strong>WGAN</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1701.07875">https://arxiv.org/abs/1701.07875</a></li><li><strong>Pix2Pix</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1611.07004">https://arxiv.org/abs/1611.07004</a></li><li><strong>CycleGAN</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1703.10593">https://arxiv.org/abs/1703.10593</a></li></ul><p><strong>目标检测</strong></p><ul><li><strong>RCNN</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1311.2524">https://arxiv.org/abs/1311.2524</a></li><li><strong>Fast-RCNN</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1504.08083">https://arxiv.org/abs/1504.08083</a></li><li><strong>Faster-RCNN</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1506.01497">https://arxiv.org/abs/1506.01497</a></li><li><strong>SSD</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1512.02325">https://arxiv.org/abs/1512.02325</a></li><li><strong>YOLO</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1506.02640">https://arxiv.org/abs/1506.02640</a></li><li><strong>YOLO9000</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1612.08242">https://arxiv.org/abs/1612.08242</a></li></ul><p><strong>实例分割</strong></p><ul><li><strong>Mask-RCNN</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1703.06870">https://arxiv.org/abs/1703.06870</a></li><li><strong>YOLACT</strong>: <a href="https://link.zhihu.com/?target=https://arxiv.org/abs/1904.02689">https://arxiv.org/abs/1904.02689</a></li></ul></blockquote><hr><h2 id="AI相关资源"><a href="#AI相关资源" class="headerlink" title="AI相关资源"></a>AI相关资源</h2><ul><li><a href="https://github.com/lartpang/Machine-Deep-Learning">ML/DL学习笔记（基础+论文） (github.com)</a></li><li><a href="https://github.com/amusi/TensorFlow-From-Zero-To-One"> TensorFlow 最佳学习资源大全（含课程、书籍、博客、公开课等内容） (github.com)</a></li><li><a href="https://github.com/jobbole/awesome-machine-learning-cn">机器学习资源大全中文版，包括机器学习领域的框架、库以及软件 (github.com)</a></li><li><a href="https://github.com/Mikoto10032/DeepLearning">深度学习入门教程, 优秀文章, Deep Learning Tutorial (github.com)</a></li><li><a href="https://github.com/scutan90/DeepLearning-500-questions">深度学习500问，以问答形式对常用的概率知识、线性代数、机器学习、深度学习、计算机视觉等热点问题进行阐述 (github.com)</a></li><li><a href="https://github.com/fengdu78/Coursera-ML-AndrewNg-Notes">吴恩达老师的机器学习课程个人笔记 (github.com)</a></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术资源 </tag>
            
            <tag> 入坑指南 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
